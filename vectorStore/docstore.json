[["0",{"pageContent":"{\n  \"title\": \"2016\",\n  \"date\": \"01/08/2017\"\n}\n---\n\nI'm typically forward looking and barely take time to reflect (not to say\nthose two things are mutually exclusive). However, last year was a especially unique and\ncrazy, so in honor of that (and the new blog design) I decided to sit down,\nreflect, and write something.\n\nThis will be roughly chronological going through the big events that took place last\nyear, and will conclude with some books, lectures, and ideas that had a big\nimpact on my thinking and worldview.\n\n## Leaving Facebook\n\nAt the beginning of the year it seemed like I finally arrived at job\nhappiness. In 2015 I helped start the JS Infra team at Facebook. The motivation\nfor building this team came from my experience building the React Native Packager where I noticed that the\ninfrastructure that we're basing our development toolkit on was poorly\nmaintained, bug-ridden and in some cases poorly designed with no hope without a\nfull rewrite (or replacement).\n\nSo we assembled an amazing team of engineers to build out the basic building blocks that\nwould power Facebook's JavaScript development (and hopefully the JS community at large).\n\n<img src=\"/public/images/js_infra.jpg\" />\n_JS Infra sailing off-site. Not in the photo: Christoph Pojer (which was taking the photos). And our\nmanager Tom Occhino_\n\n\nAlthough the JS infra team was deeply technical and in some cases working on\nproblems a few layers removed from the developer experience, we always thought\nit's best to start from the user experience and work our way backwards. For\ninstance, I remember talking to\nsomeone from the Parse team who told me about a metric they used to make sure their\ntools are easy to get started with: TTH, time till hello world. So when the time came to think about how people would get started with React\nNative, it was obvious that the CLI needs to be robust enough to guide the user\nall the way through to see something on the screen within 5 minutes of installation!\n\n```bash\nreact-native init AwesomeProject\ncd AwesomeProject","metadata":{"id":0}}],["1",{"pageContent":"all the way through to see something on the screen within 5 minutes of installation!\n\n```bash\nreact-native init AwesomeProject\ncd AwesomeProject\nreact-native run\n```\n\nAlthough our team wasn't perfect, we had immediate impact starting with the\nfirst half in our existence. We worked on and released Babel 6, which took Babel\nfrom being merely a transpiler to being a platform and a compiler toolkit. We switched over\nFacebook's entire JS infrastructure to use it. And not only used it for transpiling\nit was now being used by teams throughout the company for things like i18n,\naccessibility, optimization and so much more! We fixed Jest and it became a few order\nof magnitudes faster. We continued improving on the React Native packager which\nbecame a central piece of infrastructure at the company (both as a\ndevelopment tool and as a build system).\n\nUnfortunately, not everyone at the company believed that our team's existence is\njustified. There was a big push to work on performance (which I\nthought was justified since the website was very slow). So there was a lot of pressure on\nus to dump everything that we're working on and focus a 100% on performance.\n\nI didn't agree that\nwhat we're doing and the performance goal weren't aligned. But in the\nend I lost the office politics game and our team was all but\ndismantled. Luckily, I had a great manager, and great support from many other\npeople at the company. So I was given a chance to find something I could\nbe as passionate about. But to be honest, my passion had already drifted\ntowards an old but growing side project of mine.\n\n(A new and improved version of the team has now reassembled and are building\namazing things for the JS community -- like the Yarn package manager!)\n\n## Starting Repl.it (the company)\n\nIn 2015 Haya Odeh and I planned to give an old side project of\nours a face-lift -- mostly just for fun. We knew that some people were using\n[Repl.it](https://repl.it) but when we looked, we where surprised to see that there are 10s of","metadata":{"id":1}}],["2",{"pageContent":"ours a face-lift -- mostly just for fun. We knew that some people were using\n[Repl.it](https://repl.it) but when we looked, we where surprised to see that there are 10s of\nthousands of people using it a month. We started researching, visiting our\nusers, and doing surveys. We found that our biggest impact was on physical\nclassrooms across the country and the world. (Which was not that big of a\nsurprise).\n\n<img src=\"/public/images/replit_school.jpg\" />\n_Haya talking to students using Repl.it at the Mountain View High school_\n\n[Repl.it](https://repl.it) was\nalways at least partly about education. Back in school, I was displeased with the fact that every\nclass I went to\nhad to spend hours installing software. And I watched the instructor struggle to\nget everyone's compilers and editors setup (with matching versions). I started\ndreaming up a site where you open a new tab and start coding. And in 2011 that's\nwhat we built and not only did it help with that, we open-sourced the underlying\nexecution engine (built with emscripten) which went to on power many\nlearn-to-code websites (most famously, Codecademy, which I joined as the #1\nemployee).\n\nOne thing lead to another, and my brother Faris joined us in working on the\nproject and we ended up not only redesigning the website, but we added user\naccounts, built a [cloud-based code execution engine](https://repl.it/api) and\nmany smaller features. We also started planning a totally new product on top of\nour core offering -- a classroom product that automates many of the tedious tasks\nwe noticed a teacher has to do to manage their classroom. Things like submitting\nhomework, giving feedback on homework, and tracking student progress.\n\nWe incorporated in May, 2016 with the mission to make programming more\naccessible. We're building powerful yet simple coding interfaces for programmers\nand students. And we're building a platform for teachers that want to bring\nprogramming to their classroom or reach a wider audience online.\n\n### Repl.it classroom","metadata":{"id":2}}],["3",{"pageContent":"and students. And we're building a platform for teachers that want to bring\nprogramming to their classroom or reach a wider audience online.\n\n### Repl.it classroom\n\nWe rushed to build our first major product as a company. After tons of\nresearch and a tight feedback loop with a handful of teachers it was ready for\nthe release just before the fall school season started. We launched in August and much\nto our surprise that put us on an exponential growth curve. Professors at universities\nlike CMU signed up and used us to teach \"Math Background for Machine\nLearning\", followed by MIT, Cornell and many others. Bootcamps like Hack Reactor and App Academy used us for introductory\ncourses. And high-schools across the US, UK, Japan, and elsewhere in the world\nstarted signing up.\n\n<img src=\"https://repl.it/public/images/studentenvironment.png\" />\n_The student environment_\n\n### Partners\n\nWe're so lucky to be in this part of the world -- Silicon Valley is a place where immigrants can\ncome in and build companies. We're double lucky to have found the support and\nmentorship of amazing people. Repl.it is now backed by Bloomberg Beta and Reach\ncapital and I could've never imagined that the founder/investor relationship\ncould be this good. We're still starting out and the journey is only 0.0001%\ncomplete (Facebook likes to say it's 1% complete), but whatever modest success\nwe achieved we couldn't have done it without the support and mentorship of Roy\nBahat, Wayee Chu, Christina Cacioppo, Chris Mather, and Ly Nguyen.\n\n### Repl.it in 2017\n\nWe spent the last quarter of 2016 focused on the core REPL product -- adding\nmore power yet maintaining the simplicity. We added support for [third-party\nlibraries](https://repl.it/site/blog/package-search), implemented a\n[debugger](https://repl.it/site/blog/python-debugger), and live file updates.\nYou can see more on our [blog](https://repl.it/blog).\n\n<img src=\"http://i.imgur.com/aQ6S00P.gif\" />\n_Live file updates_\n\n<img src=\"https://i.imgur.com/oerWaQR.gif\" />\n_Debugging_","metadata":{"id":3}}],["4",{"pageContent":"You can see more on our [blog](https://repl.it/blog).\n\n<img src=\"http://i.imgur.com/aQ6S00P.gif\" />\n_Live file updates_\n\n<img src=\"https://i.imgur.com/oerWaQR.gif\" />\n_Debugging_\n\nWe also grew the team and hired our first employee. This month, we'll be moving\nto our first private office and we're hoping to add more engineers to the team\nsoon. We have a lot of interesting technical challenges, and we'd like to think\nwe're working on an important mission, if that's interesting to you then\nconsider joining us :)\n\nThis year we're going to continue being heads-down focused on product and\ntechnology. We have a lot of interesting features in the pipeline. But most\nimportantly we want to find ways to have our teachers, students, and\nengineers collaborate with each other and build an awesome community.\n\n## Thoughts, books, etc\n\n#### Coming to terms with Physicalism\n\nYou don't notice how much outdated belief you have in your head until you\nsit down and examine them. In a recent talk, [Alan Kay\ndescribes](https://www.youtube.com/watch?v=fhOHn9TClXY&feature=youtu.be&t=1h1m6s)\nhow every 3-5 years he sits down and writes down all his beliefs in an effort to\nupdate them.\n\nThis year I did this for my worldview and my philosophy on the\nnature of the universe. Physicalism is the thesis that everything is\nphysical. That means -- among many other things -- that your mind/soul is a product of the physical processes\nin your body, and it obeys the laws of physics just like an apple falling from a\ntree. The implications here are big and many. It also could be scary, but luckily I was aided\nby a few books that I recommend to anyone who wants to come to terms with this.\n\n#### [Rationality: From AI to Zombies](https://intelligence.org/rationality-ai-zombies/)\n\nTo build an AI you need to understand and describe how the human mind works (and\nhow it often doesn't). This book helped me in a few ways:\n\n* I now understand pervasiveness of cognitive biases and fallacies. In the words","metadata":{"id":4}}],["5",{"pageContent":"how it often doesn't). This book helped me in a few ways:\n\n* I now understand pervasiveness of cognitive biases and fallacies. In the words\nof Richard Feynman: \"You are the easiest person to fool\".\n* Using a mix fables and science the author gently guides you from the default dualist\nbelief (mind is separate from the body/world) to a purely physical world.\n* Presents different ways to think about some of the seeming absurdities of Physicalism (for\nexample, are we all just cogs in the unwinding clock that is the universe?).\n\nThe book has all sorts of tips and tricks to help you face up to the truth. One\nof my favorites is the [\"Litany of\nGendlin\"](https://wiki.lesswrong.com/wiki/Litany_of_Gendlin):\n\n>What is true is already so.<br/>\n>Owning up to it doesn't make it worse.<br/>\n>Not being open about it doesn't make it go away.<br/>\n>And because it's true, it is what is there to be interacted with.<br/>\n>Anything untrue isn't there to be lived.<br/>\n>People can stand what is true,<br/>\n>for they are already enduring it.\n\n#### [The Beginning of Infinity: Explanations That Transform the World](https://www.amazon.com/Beginning-Infinity-Explanations-Transform-World/dp/0143121359)\n\nThis book layed out the basis for a hopeful and optimistic Physicalist\nworldview. It gives people (or universal explainers in general, as\nthe book calls them) a more privilege place in the universe. Yes, we are\n\"chemical scum\" that evolved via Darwinian selection but our reach can be\ninfinite. And our journey has just begun towards the infinite creation of knowledge.\n\n#### Personal Identity\n\nThe concept of \"self\" seems to be a hack. Evolution gave us this abstraction\nbecause it seems to simplify a lot of things -- most importantly,\nself-preservation (so we can take care of ourselves until we procreate). This\nidea started forming in my head in 2015 after reading [Marvin\nMinsky's Society of\nMind](https://www.amazon.com/Society-Mind-Marvin-Minsky/dp/0671657135), which","metadata":{"id":5}}],["6",{"pageContent":"idea started forming in my head in 2015 after reading [Marvin\nMinsky's Society of\nMind](https://www.amazon.com/Society-Mind-Marvin-Minsky/dp/0671657135), which\nplausibly breaks down the mind into modules and presents it as if it's a big\npiece of software.\n\nConsider how split brain patients seem to have two sides of their brains\nbehave somewhat autonomously (as if it's a different person). In this\n[video](https://youtu.be/aCv4K5aStdU?t=1m35s) the patient's right hemisphere is\nshown a word (via his left eye) but he couldn't say what it was. However, when\nhe closed his eyes and started drawing he was able to draw a pan (which is the\nword that he saw).\n\nThis is just scratching the surface, earlier this year I started reading [Reasons\nand Persons](https://www.amazon.com/Reasons-Persons-Derek-Parfit/dp/019824908X)\nby the late Derek Parfit (died a few days ago). It includes all sorts of\nthought experiments that all but destroys the concept of self. I couldn't\nfinish the book because it was too hard and jargony. However, luckily, I found\na course on YouTube titled [Death](https://www.youtube.com/watch?v=p2J7wSuFRl8&list=PLEA18FAF1AD9047B0) that draws heavily from Parfit's work on\npersonal identity. And this completely shattered how I thought about my self and\nmy place in the world.\n\n<img src=\"http://ctl.yale.edu/sites/default/files/kagan.jpg\" />\n\nI'm now more accepting of the fact that I and everyone I know and love\nwill die in the not very distant future. I feel more connected to other\npeople. And finally understand what it means to have an impact in the\nworld (improve lives and reduce suffering).\n\n\n(For a quick primer on the subject I recommend Wait But Why's [\"What Makes You\nYou?\"](http://waitbutwhy.com/2014/12/what-makes-you-you.html) essay).\n\nThanks for reading.","metadata":{"id":6}}],["7",{"pageContent":"{\n  \"title\": \"Easier Concurrent Programming in JavaScript with Async Functions\",\n  \"date\": \"10/31/2015\"\n}\n---\n\nWe're about to introduce async functions internally at Facebook so\nI'm taking the time to  reflect on how this could be a great win for building\nreliable software.\n\nWhen I joined the company, I worked on a team tasked with improving\nphoto upload reliability on the site. We were failing 1 out of 10\npeople that tried to upload a photo album. Which translates to\nmillions of people having terrible experiences on daily basis. One of the first\nthings that we struggled with was understanding the ordering of\noperations. The system was made up of multiple components (Flash for\nimage re-sizing, UIs, Controllers, Servers) that had to asynchronously\ncommunicate via JS and was all done in callbacks. This made debugging\nreally hard. Sometimes callbacks will get lost and never get called,\nat times they will be called multiple times, sometimes errors will\noccur after the callback is called and never gets reported. Not to\nmention all the horrible race conditions that we saw. And this is not something\nthat is limited to Facebook, or that can only happen at our scale. I\nwas in similar situations at small startups too. This can happen in\nany sizable (potentially distributed) system written in JavaScript\nusing callbacks.\n\nWhen I first started learning JavaScript, one of things people praised\nit for was: \"easy concurrent programming\". The argument goes \"it's a\nsingle-threaded process with a strict run-to-completion programming\nmodel and that means you can't have race conditions\". Turns out that\ncan't be further from the truth. The definition of race conditions is\nnot tied to multithreading. It is simply when you have a system that\nis dependent on the sequence of events from multiple components and\nthen the components behave in an unintended way. Which brings me to the\npoint of this post. I want to show that using async functions (or\ngenerally co-routines) you can write programs that makes the expected","metadata":{"id":7}}],["8",{"pageContent":"point of this post. I want to show that using async functions (or\ngenerally co-routines) you can write programs that makes the expected\nordering of events explicit and makes it easier to recover from\nfailures in subcomponents.\n\nI will illustrate this by going through an example of building a\nvending machine. Everything in the vending machine costs 1 cent, but\nthe machine can take in any coin that is worth any arbitrary number of\ncents. A sample run of this machine:\n\n * Insert a quarter\n * Select an item\n * Dispense the item\n * Return 24 cents change\n\nHere is my initial implementation:\n\n* A `VendingMachine` class with two public methods\n* `coin(value)` inputs a coin with a given value in cents to the machine\n* `select(item)` inputs an item selection to the machine\n* Two subcomponents `itemDispenser` and `change` resoponsible for\ndispensing the items and returning the change respectively\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    this.cents = value;\n  }\n\n  select(item) {\n    this.itemDispenser.dispense(item, () => {\n      this.change.return(this.cents - 1);\n    });\n  }\n}\n```\n\nSimple enough. But of course it's missing a few things. First of\nall there is no error handling:\n\n* What if the `itemDispenser` failed? We should of course return all the money.\n* What if the `change` component failed? We should get into broken\nstate so we don't accept any more coins until someone fixes the\nmachine.\n\nLet's add error handling and a broken state.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    let change = this.cents - 1;\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change = this.cents;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n      })\n    });\n  }\n}\n```\n\nNow that we can handle errors from the machine components. What if the","metadata":{"id":8}}],["9",{"pageContent":"}\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n      })\n    });\n  }\n}\n```\n\nNow that we can handle errors from the machine components. What if the\noutside world behaved in an unintended way? In other words, what\nif someone selected an item without paying? What if someone inserted\ntwo coins without selecting an item? Ideally we'd have input queuing,\nbut let's keep it simple for now.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    if (this.cents) {\n      console.error('Processing existing order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    if (!this.cents) {\n      console.error('Please insert a coin');\n      return;\n    }\n\n    let change = this.cents - 1;\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change = this.cents;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n        this.cents = 0;\n      })\n    });\n  }\n}\n```\n\nCan you spot the potential race condition?\nWhat if you inserted a coin, selected an item, then before the machine\ngets a chance to dispense the item and return the change you selected\nanother item? We should make sure `this.cents` is updated right after\nthe selection.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    if (this.cents) {\n      console.error('Processing existing order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    if (!this.cents) {\n      console.error('Please insert a coin');\n      return;\n    }\n\n    let change = this.cents - 1;\n    // Immediately update to avoid race conditions\n    this.cents = 0;\n\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change += 1;\n      }","metadata":{"id":9}}],["10",{"pageContent":"this.cents = 0;\n\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change += 1;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n        this.cents = 0;\n      })\n    });\n  }\n}\n```\n\nBut wait, are we really done? What if you inserted a coin, selected an\nitem, and then immediatly inserted another coin? That coin is then\nlost in limbo. We should gaurd the entire the process with another\nstate variable. But the problem is that every time we add a state\nvariable it makes the program harder to understand and\ntest, and presents more race hazards. Who would've thought a program\nwith two input events can be so complex to build reliabily. I'll spare\nyou anymore inspection and iteration and directly jump to what\nany sensible programmer would do when presented with this\nchallenge: build a state machine.\n\n```javascript\nclass VendingMachine {\n  constructor() {\n    this.state = IDLE;\n    this.queue = [];\n  }\n\n  coin(coin) {\n    if (this.state === BROKEN) {\n      return console.error('Machine broken');\n    }\n\n    this.queue.push(coin);\n    this.dispatch();\n  }\n\n  dispatch() {\n    if (this.state !== IDLE) {\n      return;\n    }\n\n    this.cents = this.queue.shift();\n    this.state = WAIT_FOR_SELECT;\n  }\n\n  break(err) {\n   console.error(err.message);\n   this.state = BROKEN;\n  }\n\n  select(item) {\n    if (this.state === IDLE) {\n      return console.error('Please insert coin');\n    }\n\n    if (this.sate !== WAIT_FOR_SELECT) {\n      return console.error('Processing existing order');\n    }\n\n    let change = this.cents - 1;\n    this.itemDespenser.despense(item, err => {\n      if (err) {\n        console.error('Error dispensing item');\n        change += 1;\n        return;\n      }\n\n      this.change.return(change, err => {\n        if (err) {\n          this.break(err);\n          return;\n        }\n        this.state = IDLE;\n        this.dispatch();\n      });\n    });\n  }\n}\n```","metadata":{"id":10}}],["11",{"pageContent":"}\n\n      this.change.return(change, err => {\n        if (err) {\n          this.break(err);\n          return;\n        }\n        this.state = IDLE;\n        this.dispatch();\n      });\n    });\n  }\n}\n```\n\nI think I got it right. But who knows, you wouldn't know by reading\nthe program, you'd need to write a lot of unit tests to convince\nyourself that it works. And then write some pseudocode in comments to\nexplain what you intended to do here for future programmers. But even\nthen there is room for failure. One of the subcomponents can call our\ncallback multiple times causing all kind of failures to happen.\n\nNow that we've explored how hard building something -- that is\nconceptually easy -- using callbacks can be. Let's try with a\nbetter concurrency primitive, namely async functions.\n\n_If you're not familiar with async functions, [read this intro\nfirst](https://jakearchibald.com/2014/es7-async-functions/)._\n\nHere's how we'll structure our code for the `async` version:\n\n* We'll be using a data-structure called `PromiseQueue` (it's really\nsimple and can be implemented in ~20 lines of code)\n* A `PromiseQueue` has two methods `put` and `get`. `get` would return\na promise that can only be resolved once we put something into the queue\n* We'll be using two promise queues, one for the coins and one for the\nitems\n* We'll have a main run loop that will run indefinitely or until the\nmachine breaks\n\n```javascript\nclass VendingMachine {\n  constructor() {\n    this.coins = new PromiseQueue();\n    this.items = new PromiseQueue();\n    this.brokenErr = e;\n    this.run().catch(e => this.brokenErr = e);\n  }\n\n  coin(coin) {\n    if (this.brokenErr) {\n      return console.error('Machine broken', this.brokenErr);\n    }\n    this.coins.put(coin);\n  }\n\n  select(item) {\n    if (this.brokenErr) {\n      return console.error('Machine broken', this.brokenErr);\n    }\n    this.items.put(item);\n  }\n\n  async run(item) {\n    while (1) {\n      let cents = await this.coins.get();\n      let item = await this.items.get();\n      let change = cents - 1;\n\n      try {","metadata":{"id":11}}],["12",{"pageContent":"}\n    this.items.put(item);\n  }\n\n  async run(item) {\n    while (1) {\n      let cents = await this.coins.get();\n      let item = await this.items.get();\n      let change = cents - 1;\n\n      try {\n        await this.itemDispenser.dispense(item);\n      } catch (e) {\n        console.error('Error dispensing item');\n        change = cents;\n      }\n\n      try {\n        await this.change.return(change);\n      } catch (e) {\n        console.error('Error returning change');\n        throw e;\n      }\n    }\n  }\n}\n```\n\nLook how beautiful this is. Everything you need to know about the program you'll know by\nreading the `run` function. A single function that reads exactly like\nhow we described the machine should work. We are even using elementary\ncontrol flow, like try/catch, and while loops! What's more, the entire state\nof the machine are basically local variables. That leaves less room\nfor races to happen. Which brings me to the conclusion:\n\n> [Co-routines are to state machines what recursion is to stacks](http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines/)\n\nCo-routines are the generalized form of async functions. Where async\nfunctions can only pause execution while waiting on a promise,\nco-routines allow\nmultiple entry points for functions to suspend and resume\nexecution. [ES6\ngenerator\nfunctions](http://tobyho.com/2013/06/16/what-are-generators/) are an\nexample of a generalized co-routines. So, similar to how recursion\ncan help process nested data-structures without using explicit stacks,\nco-routines helps solve problems involving state without using explicit state machines.","metadata":{"id":12}}],["13",{"pageContent":"{\n  \"title\": \"The dark side of Function.prototype.bind\",\n  \"date\": \"07/02/2012\",\n  \"hidden\": true\n}\n---\n\ntitle:\nauthor: Amjad Masad\ndate:\n\n\n`.bind` is a method found on function objects that statically associates the function with a receiver object `this`. It is implemented in ECMAScript 5 (The current version of JavaScript) and by many JavaScript libraries.\n\nWhen writing Object Oriented JavaScript, you often find it useful to pass object methods as arguments to other functions (callbacks). At a later time when the method is invoked the `this` may change from under your feet to undefined in [Strict Mode](https://developer.mozilla.org/en/JavaScript/Strict_mode) or the window object.\n\nThe following will demonstrate the problem:\n\n\n    var o = { a: 1\n            , getA: function () {return this.a}\n            };\n\n    o.getA(); // 1\n\n    var fn = o.getA;\n    fn(); // undefined\n\n\n\nUsing `.bind`\n\n\n    var o = { a: 1\n            , getA: function () {return this.a}\n            };\n\n    o.getA(); // 1\n\n    var fn = o.getA.bind(o);\n    fn(); // 1\n\n\nDon't be fooled `bind` has its share of weird behavior.\nThis is expected:\n\n\n    var fn = o.getA;\n    fn === o.getA; //true\n\n\nHowever this:\n\n\n    var fn = o.getA;\n    fn === o.getA.bind(o); //false\n\n\n\nThis happens because `.bind` constructs and returns a new function that is statically bound to an object (`o` in our case).\n\nBefore writing this post a quick google search of a typical language feature rant (\"considered harmful\") brought up an excellent [article](http://pmuellr.blogspot.com/2010/06/bind-considered-harmful.html) by @pmuller where he explains the performance and debugging issues associated with `.bind` and his own and other's dislike to the aesthetics of using it. However I found it lacking the real practical issue that would be most annoying and counterintuitive when using `.bind` in client-side JS.","metadata":{"id":13}}],["14",{"pageContent":"When building large JS apps, it's smart to try and approach it in a structured manner and use an MVC-like library like [Backbone](http://backbonejs.org/), others, or create your own thing. Whatever you do, you'll most probably end up with libraries that has views or widgets using a JS \"class\". Consider the following simple editable text widget:\n\n\n    // http://jsfiddle.net/TE2Cq/\n\n    var Editable = function (initialValue) {\n        this.initialValue = initialValue || ''\n        this.$container = $('<div/>').appendTo('body');\n        this.$input = $('<input type=\"text\">').appendTo(this.$container).hide();\n        this.$span = $('<span/>').appendTo(this.$container).text(this.initialValue);\n        this.$reset = $('<button>').appendTo(this.$container).text('reset');\n        this.bindEvents();\n    };\n\n    Editable.prototype.bindEvents = function () {\n        this.$span.click(this.startEdit.bind(this));\n        var that = this;\n        this.$input.blur(this.stopEdit.bind(this)).keydown(function (e) {\n            if (e.which === 13) that.stopEdit();\n        });\n        this.$reset.click(this.reset.bind(this));\n    };\n\n    Editable.prototype.startEdit = function () {\n        this.$span.hide();\n        this.$input.show().val(this.$span.text()).select();\n    };\n\n    Editable.prototype.stopEdit = function () {\n        this.$span.text(this.$input.val()).show();\n        this.$input.hide();\n    };\n\n    Editable.prototype.reset = function () {\n        this.$span.text(this.initialValue);\n    };\n\n\nThis looks great and from a quick look it seems like a library that will allow for extending, sub-classing, overriding, mixins etc. But in reality it isn't as dynamic as a JavaScript class should be. JS classes are really nothing more than a function (constructor) with a prototype and some functions we tend to call \"methods\" in that case attached to it that are by nature not bound and hence free agents that allow for and should be thought of as reusable functions.","metadata":{"id":14}}],["15",{"pageContent":"Let's say I want to use the editable widget so I include the library on my page and instantiate it:\n\n\n    var editable = new Editable('Hello World');\n\n\nIt renders and it does most of what I want from an editable field. However I need this one more confirm dialog step before resetting any editable field. So from my understanding of JavaScript and how prototypes and method (or property) dispatch work, I would intuitively think the following should work:\n\n\n    editable.reset = function () {\n        if (window.confirm('Are you sure you want to reset the text field?')) {\n            Editable.prototype.reset.call(this);\n        }\n    }\n\nThis would successfully override the `reset` method on the instance and be able to call the super method. However clicking the reset button the widget had created before would ignore what we just did here and just execute the original method. This is because we passed it a bound version of the method that on it's own became a living thing that we don't have a reference to and can never easily be unbound as the click event handler.\n\n    $('.greet').click(user.greet.bind(user));\n    // The following will not work since user.greet != user.greet.bind(user)\n    $('.greet').off('click', user.greet);\n\nThe override problem can be easily solved by a bind function that doesn't break [Dynamic Dispatch](http://en.wikipedia.org/wiki/Dynamic_dispatch#JavaScript_Implementation).\n\n    // A simple bind function that takes an Object `obj`\n    // and a method `m` and returns a function that will\n    // lookup the method `m` in `o` and call it with the\n    // object `o` as the context.\n    var bind = function (obj, m) {\n        return function () {\n            obj[m].apply(obj, Array.prototype.slice.call(arguments));\n        };\n    };\n\nYou can see it in action [here](http://jsfiddle.net/TE2Cq/1/).\n\n## Bind all the functions","metadata":{"id":15}}],["16",{"pageContent":"return function () {\n            obj[m].apply(obj, Array.prototype.slice.call(arguments));\n        };\n    };\n\nYou can see it in action [here](http://jsfiddle.net/TE2Cq/1/).\n\n## Bind all the functions\n\nA language like JavaScript is naturally geared towards reuse and if I as a library user that for the most part know what I'm doing, choose to use your (the library creator) function on my own object then I should be able to.\n\nCoffeeScript (and [EcmaScript Next](http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax)) introduces new function syntax that makes it stupidly simple to statically bind functions on objects which is probably going to be convenient for the library creator (I'm guilty of doing it before CoffeeScript many times for the convenience). However it will be a nightmare for users trying to get any of the promised dynamism out of the language, I believe.\n\n\n    class Foo\n      constructor: -> @bar = 1\n      getBar: =>\n        @bar\n\n    foo = new Foo()\n    alert foo.getBar.apply bar: 2 # 1\n\n    Foo::getBar = -> 99\n    # Can't even monkey patch :(\n    alert foo.getBar() # 1\n\n\n\n## Conclusion\n\nI think I like the dynamic nature of JS and would like to use it the way it was built to be used and quit trying to make it act like something it's not. As a community we should promote and enable reuse in classes, modules, widgets, etc. I particularly like libraries which were built with reuse in mind and has clean and readable source code. I've mentioned Backbone before as it's recently becoming one of my favorite libraries, however it's guilty of statically binding methods as handlers to delegated events.","metadata":{"id":16}}],["17",{"pageContent":"{\n  \"title\": \"Caching and Promises\",\n  \"date\": \"03/05/2016\"\n}\n---\n\nIt's fascinating to me how something that can be described so simply can also be\ntricky to implement. Caching is the idea of keeping around results of\ncomputations or outside-world-reads so it's easily accessible the next time\naround.\n\nComplications arise when we have different modules at different times being\ninterested in the same data. And fetching something from memory (cached) is\nfundamentally different from, for example, reading it from disk or a remote\nhost. In JavaScript, the latter is implemented as an asynchronous call. And\nsince we usually don't know the order of calls ahead of time we're left with\nhaving to provide a consistent interface to all callers regardless of where the\ndata is being fetched from. You'd also need to handle cases where callers ask\nfor data concurrently. Meaning that we may get another call while we are still\nfetching the data and now we're left to manage calling the clients back in the\nright order that they called us in.\n\nThe good news is that we can use Promises to:\n\n1. Not have to distinguish between first and subsequent calls\n2. Provide a consistent async interface\n3. Manage callbacks and error propagation\n\n<script src=\"//repl.it/embed/BtUs/11.js\"></script>\n\nA more interesting example would be something that needs to change it's internal\nstate. However, we need to do it in a way that doesn't require synchronous and\nmutative access to the data. One of our criteria is to blur the distinction between readily\navailable data and things we haven't fetched yet. We also don't want different\nmutation calls to effect each other. Ideally, every call would get it's own copy\nof the data that reflect the state of the world at the time of the call.\n\nWe can handle this by chaining promise calls that will result in new instances\nof the data that will also be cached for future use. Regardless of whether calls\nhappen concurrently we maintain a strict order of execution and every call will","metadata":{"id":17}}],["18",{"pageContent":"of the data that will also be cached for future use. Regardless of whether calls\nhappen concurrently we maintain a strict order of execution and every call will\nget a copy of the data without the changes that were made by other callers.\n\n<script src=\"//repl.it/embed/BtUs/12.js\"></script>\n\n------------------------------------------------\n\n### Stores and Loaders\n\nCaching can be hard if we have to continually answer the question: Do we have\nthe data in memory or do we need to fetch it? We just showed how we can use\npromises to simplify this. However, it doesn't take into account function\nparameters. A robust caching system has to be able to associate results with\ninputs, be it URLs, file names, or arbitrary function parameters. To this end we\ncan create a store abstraction that will store things in the form of key/values.\nBut this presents a new challenge of having to synchronize fetching data and\nstoring it.\n\nYou can imagine two `get` calls to the stores for something we don't have a\nresult for yet. Then these two callers would go about concurrently trying to\ncompute or fetch the data and then come back and try to set it in the store. And\nnow we have a duplication of work and something akin to a race condition when it\ncomes to writing the result back to the store. We can add an `isFetching` flag\nto the store but that brings us back to square one of having to manage\ncallbacks. Here again we can use promises to solve this problem. In addition\nto managing callbacks for us they'll provide something which we can call the\n\"loader\" interface.\n\n<script src=\"//repl.it/embed/BtUs/9.js\"></script>\n\nSo instead of having the callers arbitrarily check and set data on the store, we\ncan instead only expose a `get` method that will take a key and a loader\nfunction that if called should return a promise for the value. That way the\nfirst time the `Cache` class encounters a key it will call the loader function\nand cache the promise for any subsequent caller.\n\n### Memoization","metadata":{"id":18}}],["19",{"pageContent":"first time the `Cache` class encounters a key it will call the loader function\nand cache the promise for any subsequent caller.\n\n### Memoization\n\nSo far we've seen how we can remove the burden of having to check whether something\nis in memory or not at every turn. If we\ngeneralize this a bit we can say that callers should *always* call functions\nregardless of the current state. This is commonly referred to as\nmemoization and it allows us to build faster programs without compromising on\nsimplicity. That's partly why frameworks like React are popular -- it unburdens\nthe programmer from dealing with stateful objects like the DOM. You *always* render.\nJust like you *always* call.\n\nAll the caching techniques powered by promises that we talked about here can\ncome in handy when building large programs that conceptually looks like\ngood old simple and stateless programs without compromising on performance.\n\nMy personal experience with this was with building the [React Native\nPackager](https://github.com/facebook/react-native/tree/87245b2d40a865290fbeb4d8f5474fb8b5c1b891/packager)\nand the [module resolver](https://github.com/facebook/node-haste).\nOne of our goals with React Native is to bring the fast feedback loop we're used\nto in web development to native. However, when we looked at\nbundlers in the wild we found that for any sizable project they took\n10s of seconds to recompute the bundle after a single file change.\nSo we had to build our own with performance as the defining feature.\n\nThe entire system was built to be lazy and heavily cached using the techniques\noutlined in this article. When we get a request for a bundle\nwe go through and  apply the module resolution algorithm\nrecursively while reading all the necessary files. And then we compile the files\nin parallel and finally combine everything in a single bundle and generate the\nsourcemaps. Everyone of those steps requires heavy computation and/or I/O. But\nalong the way we cache everything at a granular level. Then the next time we","metadata":{"id":19}}],["20",{"pageContent":"sourcemaps. Everyone of those steps requires heavy computation and/or I/O. But\nalong the way we cache everything at a granular level. Then the next time we\nfan-out in the tree of calls to generate the bundle most things will be cached\nand the result is instantly returned from memory. The whole thing takes up to a\nhundred milliseconds to execute.\n\nWhen a file changes we invalidate the caches concerning that file and we simulate\na request that would go through entire process again but this time recomputing\nparts of the process concerning the changed file (and any other artifacts\naffected by it). This will take less than a second to\nfinish. And by the time the actual request comes in from the client we have\neverything cached!","metadata":{"id":20}}],["21",{"pageContent":"{\n  \"title\": \"John Carmack on Idea Generation\",\n  \"date\": \"03/09/2016\"\n}\n---\n\nLast year at an internal talk at Facebook I was fortunate to see [John\nCarmack](https://en.wikipedia.org/wiki/John_Carmack) speak about his idea generation system. At first I was disappointed\nbecause I was expecting one of Carmack's famous technical talks where he spends hours talking\nnon-stop about programming languages, game development, large scale software\nengineering and many other interesting technical topics.\n\nInstead, he opened with talking about -- what is now a Silicon Valley cliche --\nhow ideas are overrated and execution is everything. Of course, cliches are\nsometimes cliches because they're true. However, things took an interesting turn\nwhen he mentioned the \"Antifragile\" concept.\n\n## Antifragile\n\nA phenomena discovered by Nicholas Nassim Talib that describes things that are\nthe opposite of fragile. We don't currently have a word to describe this in\nEnglish. You might think that words like \"robust\" or \"resilient\" come close\nbut actually those words describe systems that don't break under stress, but\nwhat about things that benefits from stress?\n\nTo me, this was one of those questions that you realize is simple but\nyou're surprised that it hasn't entered your consciousness until this day.\n\nHere is the description from the [Antifragile book](http://www.amazon.com/gp/product/B0083DJWGO/ref=dp-kindle-redirect?ie=UTF8&btkr=1):\n\n>Just as human bones get stronger when subjected to stress and tension, and rumors or riots intensify when someone tries to repress them, many things in life benefit from stress, disorder, volatility, and turmoil. What Taleb has identified and calls “antifragile” is that category of things that not only gain from chaos but need it in order to survive and flourish.\n\nAfter picking up this book and reading it, I was not only able to relate this\nback to Carmack's idea system (more on this later) but saw the world in a slightly different","metadata":{"id":21}}],["22",{"pageContent":"After picking up this book and reading it, I was not only able to relate this\nback to Carmack's idea system (more on this later) but saw the world in a slightly different\nway. To give only one example, I see large open source software as antifragile. The\nmore stress people put the software under the better it becomes. The more\npeople use it in unanticipated ways and the more code path combinations are\nexercised then the more bugs are found and fixed. In contrast, proprietary\nsoftware is usually used in controlled environments all the while building up\nfragility for a major catastrophic event waiting to happen (see [Black Swan\nTheory](https://en.wikipedia.org/wiki/Black_swan_theory)).\n\n## Antifragile Idea Generation\n\nIn programming and many other creative jobs you get many ideas in any single\nday, but you can only implement a fraction of them. The fraction you haven't\nimplemented you might start obsessing about. Everyone has their pet ideas that\nthey go around discussing. The more time this idea spends in your head the less\ncritically you think of it. Now, when the time comes to\nactually try implementing it, if it fails you're left discouraged, embarrassed and might even\nquit the project you're working on.\n\nThis is obviously a fragile system. You start neutral, get a small high when you\nfirst get the idea, and then it starts building up fragility while in your head. If and when it fails it's\ncatastrophic on your productivity.\n\nSo what does an antifragile system for generating ideas look like? First let's\nlay out some criteria:\n\n1. Antifragile systems are -- by definition -- able get the upside but are not\naffected by the downside. That means, we need to be able to get the initial idea\nhigh and the motivation that comes with it.\n2. Failure events must end up making our system stronger. Meaning when an idea\nfails it needs to make the overall system better.\n\nHere is what Carmack thinks an antifragile system might look like:","metadata":{"id":22}}],["23",{"pageContent":"2. Failure events must end up making our system stronger. Meaning when an idea\nfails it needs to make the overall system better.\n\nHere is what Carmack thinks an antifragile system might look like:\n\n1. You are working on a problem and you get an idea and with it the initial idea\nhigh\n2. You should instantly try to defeat your idea -- think of all the ways it\ncould not work, test it out, put it under stress\n3. If the idea survive the brutal scrutiny then it has legs for further\ninvestigations or implementation\n4. If the idea is implemented and it works then that's great\n5. If the idea fails the scrutiny or implementation you can quickly move on to\nthe next idea without feeling the lows because you haven't\nobsessed or talked about it i.e. it's not your pet idea.\n\nCarmack describes how this becomes like a game -- as soon as you get an idea you\ntry to defeat it. You'll be able to generate more ideas because you freed up\nmental space. Furthermore, your existing ideas will\neven be stronger because they survived heavy scrutiny.\n\n## In Practice\n\nI've been using this at work and in my personal life for a few months now and I\nrecommend it to everyone. I end up prototyping a lot more and going through many\niterations of ideas. And that reminded me of my early days of programming. Because I\ndidn't know what was possible or not, I had to vet all my ideas by\ncoding them up. I went through multiple VB projects in any single day.\n\nAt work, we're now focused on JavaScript and web performance, and found this an\nindispensable tool for this type of work. Optimization work (after crushing the\nlow-hanging fruit) is often counter-intuitive and many ideas that sound great in\ntheory end up tanking in practice. So to make progress we need to have a lot of\nideas and try many of them. And this gave me great framework to approach this with.","metadata":{"id":23}}],["24",{"pageContent":"{\n  \"title\": \"Why Learn Compilers\",\n  \"date\": \"12/29/2021\"\n}\n---\n\nA sufficient understanding of computers is impossible without learning how compilers and their parts work. It is like stepping into the computer's mind and seeing how it feels from the inside. Compilers are also some of the most satisfying programs to write. Finally, learning compiler technology can open new artistic avenues for you, and provide a skill bordering on a superpower.\n\n## A most fun sandbox\n\nBecause the most basic compiler architecture is standard, you have limited boundaries and degrees of freedom when designing one. This might sound restricting, but actually, it's freeing because you get to play in a predictable sandbox. \n\nAnd because compilers are largely deterministic closed-system problems -- for each input, there is one and only output -- it makes it really fun to iterate on a program without having to worry about external dependencies or a complicated setup. This lends itself nicely to test-driven development -- you can unit-test the component parts and write end-to-end tests for the compiler as a whole.\n\nWriting the test & debugging framework around compilers can also be really fun. To test a parser, for example, you need to run assertions on massive syntax trees, and you need to output helpful failure messages. You can go as far as writing a Domain-Specific testing language to make testing more pleasant.\n\n## A most magical flow experience\n\nThe most fun I had coding was when I led the JavaScript infrastructure team at Facebook. We were tasked with replacing [JSTransform](https://github.com/facebookarchive/jstransform), a string-manipulation-based JavaScript transpiler. Honestly, it's amazing it worked at all, but it didn't work very well. I resided in NYC but went up to our office in Cambridge to work with one other engineer there. However, I ended up mainly working alone, coming in every day for two weeks and writing code for 10 hours a day. I was in a state of flow.","metadata":{"id":24}}],["25",{"pageContent":"The leading expert on \"flow,\" Csikszentmihályi, identified that for a human to enter a this state, they need to be able to get direct and immediate feedback, for the problem to be well-defined, to have a balance between one's ability level and the challenge, and have a sense of control over the situation. I can't think of a better programming task that hits all those points than writing a compiler.\n\n## Useful skills\n\nI joined Yahoo! for my first job out of college, who'd just acquired a company in my hometown. As part of the acquisition, we were tasked with moving to the Yahoo! stack, and they were adamant about us using YUI instead of jQuery. The task fell on my lap, which felt like a crushing mountain of repetitive work. \n\nLike any good (read: lazy) programmer, I decided to automate the task. The task was more intricate than simply a massive search and replace because you had to deal with many variations of names, formatting, and patterns. I'd been learning about compilers and ASTs, and I figured this was an excellent time to deploy my newfound skills. \n\nFirst, I backfilled into YUI some jQuery-like to make the transition easier. Then I wrote a transformer that took in jQuery code and automatically translated the calls into YUI code. \n\nA many-month project turned into a week project. My colleagues were dumbfounded when they saw the volume of patches flying out of my desk. This is the kind of leverage that compiler technology can give you. \n\n## Do it for the art \n\nWhat do compilers have to do with art? Surprisingly I've found them a great source of inspiration for art projects. \n\nWhen you look at a program in your editor, you're often able to deduce what the program does from its shape or [pattern](https://www.dreamsongs.com/Files/PatternsOfSoftware.pdf). Programs have a visual identity; many are beautiful. So if they have a form, wouldn't it make sense to also have a sound?","metadata":{"id":25}}],["26",{"pageContent":"So how do you make code audible? One way, I thought, is to make running a program sound like something. It wasn't clear how I would do that. A more straightforward idea was to give the syntax tree sound. What does a code block sound like? A statement? A conditional? \n\nI decided to map the sounds from an 808 drum machine to AST node types. Take a listen [here](http://soundofjs.com/), and if you listen to enough programs, I believe you'll be able to identify them in the same way we recognize the shape of a program. You can also toy with the mappings themselves and make them sound differently. \n\n![soundofjs.com screenshot](/public/images/soundofjs.png)\n\nAnother art project that I had the pleasure to play a [small part](https://github.com/nasser/---/commits?author=amasad) in was [Qalb](https://www.albawaba.com/editorchoice/alb-arabic-computer-programming-language-understands-calligraphy-861614), the Arabic programming language. The most fun aspect of the project was not the language or the tooling to which I contributed, but it was the fact that Ramzi, the artist behind the project, showed that you could print programs as Arabic calligraphy tiles.\n\n![qalb program](/public/images/qalb.png)\n\nFinally, I can't talk about compiler art without mentioning [DOMQL](https://amasad.github.io/DOMQL/), a satrical project that add a SQL-like language to the browser and claims it's a better frontend programming experience than JavaScript.\n\n## A better coding UX","metadata":{"id":26}}],["27",{"pageContent":"## A better coding UX\n\nIn my [Computers Doing The Right Thing essay](https://amasad.me/right), I talked about how we can build more delightful software by detecting user intent. I gave the example of deducing the software packages the programmer wanted to install by from the code, and installing them for the user. This is of course, done by parsing import statements in the respective language. The code for this is open-source -- here is, for example, the [Go-based JavaScript parser for that](https://github.com/replit/upm/blob/715e4d1bd301b66b209a6c5cf1345f59aaa0799a/internal/backends/nodejs/grab.go#L91-L216).\n\n![upm in action](https://amasad.me/public/images/import.gif)\n\nTo build delightful coding experiences, it helps to master parsers.I'm incredibly excited about the work we're doing with our live game programming environment: Kaboomjs.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Preview of upcoming creative coding magic (and like everything we do, multiplayer). <a href=\"https://t.co/7i4KakNpeW\">pic.twitter.com/7i4KakNpeW</a></p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1474455969685901312?ref_src=twsrc%5Etfw\">December 24, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n## What Is It Like to Be a Compiler?\n\nAs a programmer, you spend much of your day conversing with your compiler. If you're not happy at work, there's a good chance it's because you have a bad relationship with your compiler. Maybe it's too slow, taking you out of the flow state. Perhaps it's giving you inscrutable errors. Or maybe the language has undefined edge-cases, and you don't know what kind of code the compiler is emitting. \n\nAll those are reasons to get in and understand how compilers work. Once you do, you'll have a whole new appreciation of programming and how languages are constructed. You'll be able to reason about your programs in new ways, and you can predict how it could go wrong.","metadata":{"id":27}}],["28",{"pageContent":"I hope this inspires you to design a toy programming language or compiler. Last year, at Replit, we ran a [massive programming language jam](https://blog.replit.com/pljamresults), and it turned out to be one of the funniest hackathons we ran. It introduced many people to the joy of language design and compiler construction, and I hope to repeat this again in the future.","metadata":{"id":28}}],["29",{"pageContent":"{\n  \"title\": \"Lesser-Known JavaScript Debugging Techniques\",\n  \"date\": \"03/09/2014\"\n}\n---\n\nAfter I prototype an app I'm building, my time is split between the editor and the browser with the console open. I try to debug as I go to avoid creating a complete mess. Moreover, when I get a bug report for a production app the first thing that I do is try to debug using Chrome devtools, and I usually find the bug without touching my editor. To be effective at that, I had to learn a great deal about the tools available and in this post I’m going to shed light on the lesser-known features and techniques of JavaScript debugging.\n\n## Command Line API\n\nStarted by Firebug and currently implemented in all browsers with a debugger. It has [many useful](https://getfirebug.com/wiki/index.php/Command_Line_API) utility functions such as `$`, `$0`, `keys`, `values` etc. and I highly encourage you to [learn everything about them](https://developers.google.com/chrome-developer-tools/docs/commandline-api).\n\nUntil recently, Chrome DevTools [didn't implement](https://code.google.com/p/chromium/issues/detail?id=168776) the full API, and even after they did, a lot went [undocumented](https://developers.google.com/chrome-developer-tools/docs/commandline-api). The most useful of those functions are:\n\n### debug and monitor\n\nIf you basically live in the console like I do you'd want to be able to add breakpoints to function references without having to go to the source and find the function, especially when debugging production apps with minified source or built source with no source maps.\n\n```js\ndebug(ExampleApp.exampleFunction)\n```\n\nNow every time the `ExampleApp.exampleFunction` is called the debugger will be invoked. To turn it off simply call `undebug` on the same function.\n\nHowever, you often just need to know if the function was called and the arguments passed to it, for that you can use `monitor` and `unmonitor`.\n## Setting up traps","metadata":{"id":29}}],["30",{"pageContent":"However, you often just need to know if the function was called and the arguments passed to it, for that you can use `monitor` and `unmonitor`.\n## Setting up traps\n\nWhen working on a complex system with many modules, it's impossible to know what every part is doing. Beyond the typical `console.log`ing and breakpoint insertion, a good debugging technique is setting up traps with debugger statements to stop and get an idea of what's going on.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Just debugged a link-not-working issue by doing `Event.prototype.preventDefault = function () { debugger; };`. Feeling pretty smooth.</p>&mdash; Domenic Denicola (@domenic) <a href=\"https://twitter.com/domenic/statuses/441758861649661952\">March 7, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nFor a long time I've had a library of functions that I copy-pasted around to help set up traps. But after a round of polishing I'm releasing it as a stand-alone JavaScript library and a chrome extension called [Debug Utils](https://github.com/amasad/debug_utils). You can find it on [GitHub](https://github.com/amasad/debug_utils) and can install it directly from the [Chrome Webstore](https://chrome.google.com/webstore/detail/debug-utils/djailkkojeahmihdpcelmmobkpepmkcl).\n\n## Enter DebugUtils\n\n### Break on native method call\n\nUnfortunately `debug` and `monitor` don't work on native methods so you need to wrap native methods with functions containing a `debugger` statement, similar to the tweet above, except you probably would want to call the original function after the `debugger` statement. In DebugUtils this is called `$dum` (short for debug utils method).\n\n```js\n$dum(Event.prototype, 'preventDefault');\n```\n\n### Break on custom events","metadata":{"id":30}}],["31",{"pageContent":"```js\n$dum(Event.prototype, 'preventDefault');\n```\n\n### Break on custom events\n\nThe Command Line API provides a [`monitorEvents`](https://developers.google.com/chrome-developer-tools/docs/commandline-api#monitoreventsobject_events) function which is great for debugging DOM events, but it won't work for custom events. For that you want to setup your own debugger or logger function as a handler to an event on an object. In DebugUtils this is called `$duv` (short for debug utils events).\n\n```js\n$duv(exampleModule, 'data');\n```\n\n### Break on property access\n\nOften times, objects can start changing from under your feet. You can [setup object getters and setters](http://johnkpaul.com/blog/2013/07/20/break-on-property-change/) containing a  `debugger` statement to find out what part of the code is responsible. When something changes a given property on your object you will stop and be able to trace back what's changing it. In DebugUtils this is called `$dus`:\n\n```js\n$dus(exampleObject, 'someProperty');\n```\nYou can also break on property read using `$dug`.\n\nFor more documentation and information on DebugUtils, be sure to check out the [Github project](https://github.com/amasad/debug_utils). Happy debugging!\n\n**Edit**: My EmpireJS talk on this subject\n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/rcjUR4icvoQ\" frameborder=\"0\" allowfullscreen></iframe>","metadata":{"id":31}}],["32",{"pageContent":"{\n  \"title\": \"Ambition++; Reflecting on a decade of work\",\n  \"date\": \"02/23/2021\"\n}\n---\n\nIt's wild: Almost everything I worked on has become a great success on a global scale. I was struck by this fact earlier today when the news came out that Codecademy, where I was a founding engineer, is now a [fast-growing business](https://twitter.com/amasad/status/1364296435059974149). The news came on the heels of our [Series A announcement](https://venturebeat.com/2021/02/18/replit-raises-20-million-for-collaborative-browser-based-coding/) at [Replit](https://repl.it), where we shared some great numbers too. At Facebook, I was a founding engineer on React Native, which also had a [fantastic last year](https://shopify.engineering/react-native-future-mobile-shopify). And all the [open-source projects](https://amasad.me/2016) I've been part of --  Babel and Jest most famously -- became standard tools that measurably increased productivity and changed industries.\n\nAcross all my work -- the millions of developers we helped mint, the CS teachers we empowered, and the entrepreneurs we enabled -- I've probably had a significant impact on the world economy, perhaps even meaningfully increased productivity. \n\nReflecting on this, first, I'm grateful to be able to be useful on such a large scale. After all, just ten years ago, I was a kid in Amman who'd just graduated from university and was interviewing at random companies (including a cigarette factory for VB6 work that comes with a free carton of cigarettes a week).\n\nSecond, and more importantly, I think it's time to be more ambitious. With every project, I stopped short of what was possible. I let haters & doubters change my plans and assumed a sense of fake humility because that's what people expected.","metadata":{"id":32}}],["33",{"pageContent":"The culmination of my work is Replit, where we're working to give people computer superpowers. We want to nudge the world away from rampant digital consumption to one where there are more creators and entrepreneurs. Anyone anywhere can participate in the digital economy and build and leverage software to better themselves and their communities.\n\nNow that I've seen what's possible in a decade while starting from nothing, in this decade, I'd like to create trillions of dollars in value for the world in the form of better access to technology and tools.\n\nMy only regret is my mum is not here to see all this.","metadata":{"id":33}}],["34",{"pageContent":"{\n  \"title\": \"Dialectical Progress in Programming\",\n  \"date\": \"05/27/2017\"\n}\n---\n\nThe notion of progress in programming is -- as in anything else -- debatable and\nhard to define. For various reasons that are besides the point of this essay I\nbelieve that we're indeed making progress in the art of programming (otherwise\nwhat's the point in getting up in the <s>morning</s> afternoon and going to the\noffice?).\n\nBut how does progress happen in programming? Sometimes it looks like it's an\narbitrary walk in the space of possible languages, frameworks and\narchitectures. I'd like to propose an answer: _programming progresses\nin [dialectical](https://en.wikipedia.org/wiki/Dialectic) fashion_. Meaning what usually follows the current best\npractices and technologies is an opposite in many ways. However, this is usually\nfollowed by a _synthesis_ of these two opposites. In other words, a compromise\nor a _best of both worlds_.\n\nWe can think of this as a [_thesis, antithesis, synthesis_](https://en.wikipedia.org/wiki/Thesis,_antithesis,_synthesis):\n\n>(1) a beginning proposition called a thesis, (2) a negation of that thesis\n called the antithesis, and (3) a synthesis whereby the two conflicting ideas\n are reconciled to form a new proposition.\n\nLet's look at some examples.\n\n### Languages: industrial strength vs developer friendliness\n\n1. Thesis: __industrial strength programming languages__. Languages like Java\nand C++ are type-safe, efficient and work well with large systems. But they're\nalso hard, boring, noisy, and take a long time to compile.\n\n2. Antithesis: __developer friendly languages__. Languages like JavaScript,\nPython, and Ruby are dynamically typed so the syntax is clean and less\nnoisy. They're interpreted so there is no compiler to wait for. And they're fun\nand arguably more productive to work with.\n\n3. Synthesis: __developer friendly and suitable for large scale\nprogramming__. Languages like Go, Rust, and TypeScript are both type-safe,\nefficient and work well at large scales.","metadata":{"id":34}}],["35",{"pageContent":"3. Synthesis: __developer friendly and suitable for large scale\nprogramming__. Languages like Go, Rust, and TypeScript are both type-safe,\nefficient and work well at large scales.\n\n### Web rendering: server-rendered vs client-rendered pages\n\n1. Thesis: __server-rendered pages__. Languages and frameworks powering Web 2.0\nlike PHP and Ruby on Rails can get you to market quickly, with predictable\nperformance, and works well with the rest of the web infrastructure (links,\nsearch engines etc).\n\n2. Antithesis: __client-side rendered pages__. Frameworks like Backbone, React,\nand Angular can create delightful user experiences. But they break the web's\nprotocol (hypertext over TCP) and can be slow to boot up.\n\n3. Synthesis: __universal rendering__. Frameworks like [Next.js](https://github.com/zeit/next.js/) bring us the best\nof both worlds: a great user experience, great initial render time, and great\nsupport for search engines and other web infrastructure.\n\n### Mobile apps: native vs web\n\n1. Thesis: __web applications__. Web 2.0 unleashed the power of the internet and\nbrought us amazing applications like social networking and YouTube. But\nwhen mobile came around, using web tech to build mobile apps created monstrosities\nlike the first Facebook HTML5 app.\n\n2. Antithesis: __native applications__. Native applications brought much better\nuser-experience with gesture support, smooth scrolling, and access to APIs\nlike location and notifications. However, a lot of progress that we made in\nengineering (e.g. continuous deployment, cross-platform development) or in application distribution (just\nvisit a URL) had to be thrown away.\n\n3. Synthesis: __progressive web apps and web tech adapted to native__. PWAs\nand frameworks like React Native bring us the best of both worlds. Access to\nnative (or native-like) APIs and a great user experience but also cross-platform\ndevelopment, continues deployment and better application distribution\nstrategies.\n\n### Conclusion","metadata":{"id":35}}],["36",{"pageContent":"native (or native-like) APIs and a great user experience but also cross-platform\ndevelopment, continues deployment and better application distribution\nstrategies.\n\n### Conclusion\n\nThis framework of thinking about progress in programming seems to apply to a lot\nof what I see happening in programming. There are ongoing developments that I\nlook forward to seeing the synthesis of:\n\n- __Web development build tools__: we started out writing and loading scripts\n  in the browser verbatim but applications getting more complicated lead\n  us to build better languages and frameworks which lead us to\n  introduce ever more complicated build-steps to our web developement and\n  deployment pipelines. However, with browser vendors moving faster on supporting\n  language features and with framework authors acknowledging the problem I think\n  we're going to see a synthesis soon.\n- __IDEs__: when I first started programming it seemed unquestionable that you\n  needed to use an IDE. However, they were slow and bloated. And with the shift\n  towards more dynamic languages there was also a shift towards pure text\n  editors like Textmate and Sublime and a return to Vim and Emacs. However,\n  with editors like Atom that has a richer-than-ever plugin ecosystems it seems\n  like we're headed in a synthesis direction where we use lightweight editors\n  while plugging in static analysis, autocompletion, and other automation tools.\n\nThere are a lot more industry trends that can be described and understood using\nthe dialectical framework of progress. I'd be curious to hear your thoughts\non this and if you think if this framework applies to trends in your programming\ncommunity. I'm best reachable on [twitter](https://twitter.com/amasad). Thanks for reading.","metadata":{"id":36}}],["37",{"pageContent":"{\n  \"title\": \"Disintegrated Development Environments — How Did We Get Here?\",\n  \"image\": \"https://amasad.me/public/images/interlisp.jpeg\",\n  \"date\": \"05/01/2017\",\n  \"description\": \"Development environment fragmentation and the story of Worse is Better vs the Right Thing approach to software engineering\"\n}\n---\n\n[_This essay is an adaptation of my talk at\n[Active Ingredients Conference](http://activeingredients.info/)_]\n\nIt's never been better for programmers, a team of 5 today can build projects and\ncompanies that required hundreds if not thousands of engineers just a few\ndecades ago. So although Fred Brooks was right in that there was \"no silver\nbullet\" which \"by itself promises even an order of magnitude improvement in\nproductivity\" I'd argue that there was a million silver arrows that collectively\ngot us those improvements.\n\n![No Silver Bullet](/public/images/no_silver.jpeg)\n\nMuch of this came through open source software, development tools and open\nsource development tools.\n\n![Silver Arrows](/public/images/silver_arrows.jpeg)\n\nHowever, this happened as a wave of distributed innovation. There was no central\nplanning and no vision — it all happened organically. Which explains\nwhy a lot of our day-to-day development tools overlap, compete, and require a ton\nof compatibility code just to make them work with each other.\n\nLet's take an example. Say you're a JavaScript developer and you use the latest and\ngreatest tools. You write your code in ES2017. But before you ship it to\nyour users you use a compiler like Babel which has to parse your code to compile\nit to ES5. And you also want to bundle your code so you use a bundler like\nWebpack which parses your ES5 code, collect the require/import statements, and\nbundles your code. Finally, you also use a minifer like Uglify which has to also\nparse and then minify your code.\n\n![compiling JavaScript](/public/images/js_compile.jpeg)\n\nYou may have noticed that there is only 3 parse steps in this pipeline, that's","metadata":{"id":37}}],["38",{"pageContent":"parse and then minify your code.\n\n![compiling JavaScript](/public/images/js_compile.jpeg)\n\nYou may have noticed that there is only 3 parse steps in this pipeline, that's\nbecause I ran out of slide space. The browser still needs to parse the code\nbefore it executes it.\n\n![compiling JavaScript 2](/public/images/js_compile2.jpeg)\n\nOk, so what? Well, there is a good chance you're reading this article to kill time\nwhile Webpack is recompiling. *Everything is slow*. There is also a\nquestion of how many parsers, as a community, do we have to write and\nmaintain. Furthermore, there is lot of information loss as we go\ndown the pipeline — you might've had Flow type annotations but those will not\nbe accessible for the minifier to emit optimized code because they're compiled\naway at an earlier step.\n\n(This is only one branch of the development pipeline, there is also the\nIDE/static analysis and code generation that contains similar duplication of\nwork and incompatibilities).\n\nRoughly speaking, we separate our tools by development life-cycle stage:\nauthoring, executing, testing, building, and deployment. Which limits how much\nsharing of information and work can happen between tools.\n\n![so what](/public/images/so_what.jpeg)\n\nOk, then what if we imagined we live in a different world where we've taken a more\n[holistic](https://repl.it/site/blog/holistic) approach to development\nenvironments where we layer tools on top of each other. My IDE knows where and\nhow my code executes and can show me inline information about function calls,\nerror rates, and type information — heck, why won't production crashes translate\ninto local development breakpoints? What if my repo on Github could pull from the\nsame code intelligence service and have a click-to-symbol feature. Etc.\n\n![what if](/public/images/what_if.jpeg)\n\nAlan Kay tells us that computing is \"pop culture\" because we have \"disdain for\nhistory\". Well, I'd like to do better. So in looking at this problem I decided","metadata":{"id":38}}],["39",{"pageContent":"![what if](/public/images/what_if.jpeg)\n\nAlan Kay tells us that computing is \"pop culture\" because we have \"disdain for\nhistory\". Well, I'd like to do better. So in looking at this problem I decided\nto construct a historical narrative to help us understand how we got here.\n\n![poop culture](/public/images/poop_culture.jpeg)\n\n## Worse Is Better\n\n![worse is better](/public/images/worse_is_better.jpeg)\n\nIn March 1990 Gaberial stood in front of crowd of Lisp developers and told them\nthat [\"Worse is Better\"](https://www.dreamsongs.com/RiseOfWorseIsBetter.html). The Lisp community's who's who were in the audience and\nthey weren't very happy with the talk. After the talk, Gerry Sussman was the\nfirst to stand up and claim nonsense. Followed by Carl Hewitt, and there was\nGaberial defending a position that, had the Lisp community understood, maybe the\nworld of software engineering today would've been very different.\n\nSee the Lisp community practiced the Right Thing software philosophy which was\nalso know as \"The MIT Approach\" and they were also known as \"LISP Hackers\".\n\n![lisp](/public/images/lisp.jpeg)\n\nThe larger research community that the Lisp community was part of was operating\nunder a vision of computing that Alan Kay recently mentioned in a [Quora answer](https://www.quora.com/What-made-Xerox-PARC-special-Who-else-today-is-like-them):\n_“The destiny of computers is to become interactive intellectual amplifiers for\neveryone in the world pervasively networked worldwide”_.\n\n![vision](/public/images/vision.jpeg)\n\nThey were building amazing technology. Take for example Interlisp, a\nbootstrapped end-to-end Lisp programming environment that featured a structure\neditor (picture editing AST nodes instead of text), a REPL (with undo, which\nright now is coming back as \"time-traveling debugger\") and among many other things\nautomatic error correction.\n\n![interlisp](/public/images/interlisp.jpeg)\n\nMeanwhile in New Jersey the \"Worse is Better\" folks, also known as \"New Jersey","metadata":{"id":39}}],["40",{"pageContent":"automatic error correction.\n\n![interlisp](/public/images/interlisp.jpeg)\n\nMeanwhile in New Jersey the \"Worse is Better\" folks, also known as \"New Jersey\nStyle\", also known as \"C hackers\" were hacking on the C programming language and\nthe Unix operating system. They had a much more pragmatic approach than the MIT\napproach — they valued, above anything else, a simplicity of\nimplementation. Almost exactly the opposite of what the MIT folks valued, which\nis simplicity of interface, completeness, and correctness.\n\n(I like to imagine a late-night stoner-like conversation between Dennis Ritchie\nand Ken Thompson:\n\n_\"Dude, what if, like, everything was made of files?\"_\n\n_\"Everything?\"_\n\n_\"Yeah, like eeverrryyything\"_\n\n_\"Whoaa\"_)\n\n![meanwhile in new jersey](/public/images/meanwhile_in_nj.jpeg)\n\nBack to Richard Gabriel. After he was lambasted by everyone at the conference he\nwent home, hid his essay, and vowed never to talk about it\nagain. See he knew that in the wrong hands Worse is Better — which although the\nNew Jersey folks were practicing they weren't preaching — could do a lot\nof damage.\n\n![never worse is better](/public/images/never_worse_is_better.jpeg)\n\nA couple of years later Richard hired a young hacker by the name of [Jamie Zawinski](https://www.jwz.org/)\n(later of Netscape fame — and can be found running a nightclub somewhere in\nthe SoMa district of SF). Like most hackers Jamie believed that information\nshould be free so when he found the Worse is Better paper he decided, without\nasking Richard, to [send it](https://www.dreamsongs.com/WorseIsBetter.html) to\nall his friend. It then spread like wildfire across the industry.\n\n![jwz](/public/images/jwz.jpeg)\n\nWhat was supposed to be a wake up call became a self-fulfilling\nprophecy. Richard talks about how \"Large companies (with 3-letter names)\"\n(hint: IBM) used the Worse is Better paper a reference for training employees on\nhow to design software.\n\n![self-full-filing prophecy](/public/images/prophecy.jpeg)","metadata":{"id":40}}],["41",{"pageContent":"(hint: IBM) used the Worse is Better paper a reference for training employees on\nhow to design software.\n\n![self-full-filing prophecy](/public/images/prophecy.jpeg)\n\nLater in his career Richard — realizing that he was responsible for the final nail\nin the coffin that killed the Right Thing approach to software development — began\nwriting against Worse is Better [under a pseudonym](https://www.dreamsongs.com/Files/worse-is-worse.pdf). Legend has it that he\nbecame so confused about this subject that he was once invited to talk about\nit and both argued for and against Worse is Better.\n\n![Richard arguing against worse is better](/public/images/richard_pseudonym.jpeg)\n\nNow that I understand our place in history I can't help but wonder what would've\nhappened if the Right Thing philosophy had won out. If\nour development environment resembled something like Interlisp instead of\nUnix. I think maybe since the main feature of Worse is Better is that — in\nthe words of Richard — \"it spreads like virus\" it had been better for computing to\nadopt this approach to achieve scale. But now what? I think we should be more\nambitious and bring back the Right Thing.\n\n(_In the talk which this is based on I talk a bit about what I'm doing about the\nproblem. I've written briefly about this elsewhere: [\"Building Towards a Holistic Development Service\"](https://repl.it/site/blog/holistic)_)","metadata":{"id":41}}],["42",{"pageContent":"{\n  \"title\": \"Eval as a Service\",\n  \"date\": \"01/17/2016\"\n}\n---\n\nAfter operating under the radar for a while, we're now publicly launching the\n[repl.it code evaluation API](https://repl.it/api) that allows anyone to execute\ncode in whatever language from anywhere on the internet. Here is the story so far:\n\n[repl.it](https://repl.it) and the underlying tech is a project that grew out\nof my frustration from the process of setting up machines to learn\nprogramming. I believed that one of the main turn offs for people wanting to\nlearn how to code was setting up the development environment. That's when I\nthought that putting a REPL on the web was the best way to get started with programming.\n\nIn 2011, and after working on the problem for almost a year we were able to cross-compile\nnumerous language interpreters to JavaScript and we also hand coded some. We\nopen sourced everything along the way and little did we know that our work would\nhelp accelerate a revolution in online programming education.\n\nOur [open source code evaluation infrastructure](https://github.com/replit) was used by companies like\nCodeacademy, Udacity, Bloc, and many others to deliver an in-browser coding\nexperience. Unfortunately, the way we were\ndoing things was pushing the envelope for what browsers could do at the time and they would break our code\nvery often. Coupled with the fact that users had to download megabytes worth\nof JavaScript before being able to do anything made it unreliable for websites\nserving millions of users all over the world. Since then, I stopped using it in\nproduction in favor for a server-based system and to keep myself honest I\nalso deprecated the open source project.\n\nAfter the move, I still got emails from people asking for support on those\nprojects, and I felt guilty for not being able to help. At the same time\nrepl.it was  growing and with it my wallet was\nshrinking. One of the benefits of doing client-side code evaluation was that the cost\nwas practically zero. I considered putting ads on the site but I","metadata":{"id":42}}],["43",{"pageContent":"repl.it was  growing and with it my wallet was\nshrinking. One of the benefits of doing client-side code evaluation was that the cost\nwas practically zero. I considered putting ads on the site but I\ncouldn't do this to our users. Especially because many of them happen to be\nstudents learning as part of classrooms:\n\n<div id=\"fb-root\"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.5\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));</script>\n\n<div class=\"fb-post\"\ndata-href=\"https://www.facebook.com/amasad9/posts/772878056174859?pnref=story\"\ndata-width=\"750\">\n<div class=\"fb-xfbml-parse-ignore\">\n<blockquote cite=\"https://www.facebook.com/amasad9/posts/772878056174859\">\n<p>Yesterday we\nvisited a high school in Mountain View where the entire school were learning how\nto code. Hundreds of...</p>Posted by <a href=\"#\" role=\"button\">Amjad Masad</a>\non&nbsp;\n<a href=\"https://www.facebook.com/amasad9/posts/772878056174859\">Saturday, October\n24, 2015</a></blockquote></div></div>\n\nAfter getting so many emails from people asking for support I decided to offer\nour code [evaluation infrastructure as a service](https://repl.it/api). Since then we had a few customers use us -- enough to cover repl.it's cost. More than anything, I'm happy that our customers\nare deriving a lot of value from the service and in many cases they're building\nthings in line with our mission of democratizing programming. For\nexample, Carnegie Mellon University is using us as part of their online open\nlearning initiative. Flatiron school and Trinket are using us to build their online education\nplatforms. Oneinterview and Airety are using us to deliver online interviewing\nservices. And of course repl.it uses the same API for the main site, and the\n[embeds](http://amasad.me/2015/04/09/hello-world/).","metadata":{"id":43}}],["44",{"pageContent":"services. And of course repl.it uses the same API for the main site, and the\n[embeds](http://amasad.me/2015/04/09/hello-world/).\n\nI'm planning to do a technical write up about the tech and architecture behind\nthe service but the basic idea is that you connect to our servers and then send\nus programs to execute. It's fast, reliable, and scalable. Try out at\n[repl.it](https://repl.t). And check out the [API page](https://repl.it/api) for\nmore information. Here is what an API call looks like for a \"Hello World\" in\nRuby:\n\n```js\nvar repl = new ReplitClient('api.repl.it', 80, 'ruby', token);\nrepl.connect().then(() => repl.evaluate(\n  'puts \"hello world\"',\n  { stdout: out => console.log(out) }\n));\n```\n\nWhat started as something that I thought of as a necessary annoyance to keep the\nsite running turned out to be something that I'm actually proud of. This\nwouldn't have been possible without the work from [Haya](http://twitter.com/hayaodeh) and Faris where they\ncontinue to build awesome new features and products on top of repl.it.","metadata":{"id":44}}],["45",{"pageContent":"{\n  \"title\": \"Learning to Fight\",\n  \"date\": \"03/15/2021\"\n}\n---\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-DDZ1A4Q0KY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nRunning a growing business is thrilling. Serving customers is incredible, and growing revenue feels great. But there is only so much excitement in running your average — say b2b — startup. \n\nBut suppose your company is doing something so radical it changes culture. In that case, you have to be ready to be surprised, delighted, horrified, and viscously attacked. \n\nIn prior eras, a b2b startup founder might've been a skilled trader. Whereas a successful culture-changing founder would've started a revolution or a religion.\n\nWhen you're challenging norms, you have to be ready to fight the gatekeepers, the useful idiots, and the final boss — the priesthood — those who maintain the status quo.\n\nIt's essential to cultivate your community. Provide protected spaces to assemble because existing spaces are hostile to change. Build tools for collective action and encourage solidarity. Build allies wherever you can find them — the outsiders, the weirdos, and the radical thinkers are your best friends.\n\nAs a leader, build up stress tolerance. Find habits that clear the mind. Learn how to function with little sleep but take sleep seriously. \n\nIn quiet times don't let your guard down. Use those times to train for the next battle. But also celebrate good times and reflect on your victories and losses.\n\nUnderstand the political milieu. Try not to swim upstream unless it's essential for your mission. Better to ride or entirely circumvent it. \n\nTell your story. Don't rely on the media machine to tell it for you because, ultimately, they're part of the gatekeeping class. Many are owned by the priesthood.","metadata":{"id":45}}],["46",{"pageContent":"Tell your story. Don't rely on the media machine to tell it for you because, ultimately, they're part of the gatekeeping class. Many are owned by the priesthood.\n\nWhen building your crew, prefer zealots. It's too risky to have skeptics in your midst. But prize truth, and allow criticism. Build an organization that is both rooted in and unsatisfied with reality. \n\nEnjoy yourself. And remember that quitting is never an option. When it's darkest and most intense, you're closest to victory.","metadata":{"id":46}}],["47",{"pageContent":"{\n  \"title\": \"Mental Frames to Get Over Entrepreneurial Anxiety and Depression\",\n  \"date\": \"8/31/2017\"\n}\n---\n\nWould you accept a gamble that offers a 10% chance to win $95 and a 90% chance\nto lose $5?\n\n\n\nWould you pay $5 to participate in a lottery that offers a 10% chance to win $100 and a 90% chance to win nothing?\n\nChances are the second proposition sounded more appealing to you. But look\nagain, both these propositions are identical. The second version\nattracts more positive answers[1] because it's *framed* as cost whereas the\nfirst version is *framed* as a loss and who wants to lose?\n\nThis is called \"framing effects,\" how something is presented colors how we think\nabout it. Similarly how we interpret the world around us and our situation in it\nwould affect how we feel and act. In fact, there are whole branches of\npsychotherapy that focus on the art of viewing things differently: \"positive\nreframing\", \"cognitive reframing\", and \"cognitive restructuring\". However, what\nI'd like to focus on is dealing with specific set issues, issues that have\nto do with creating something new in the world, building a business, and all\nthe turmoil that brings.\n\nWhen you're a startup founder, it's almost like your mood is tied to your\nmetrics. When your company is doing well, you feel great. When your company\nisn't doing so hot, you're feeling bad. This, in turn, will affect your\nproductivity and may set you on a vicious cycle of doom where your company isn't\ndoing well, and you don't have the energy to fix it.\n\nSo how do you escape this, deal with the stress, take action on it, and have\nsome fun doing it? Well, we can exploit the mental bug that is \"framing effects\" to bring about a better state of\nmind. I'll introduce what I call \"mental frames\"[2] -- I'm not sure if that's a real\ntechnical term, but it sounded good to my ears -- that has helped and continues\nto help me get through tough times.\n\nBefore I start, I want to acknowledge that it feels kind of silly that we have to trick","metadata":{"id":47}}],["48",{"pageContent":"to help me get through tough times.\n\nBefore I start, I want to acknowledge that it feels kind of silly that we have to trick\nourselves and tell ourselves stories to act the way that we want to\nact. The reason we have to do this is that more and more we're discovering that we're not just one\nself, we're multiple ones. Scientists and philosophers, in different contexts, have proposed various theories on the division of the self. There is the momentary vs. the narrating self; there is System 1 vs.\nSystem 2; there is the left vs. the right hemisphere; there is the lizard\nbrain vs. the neocortex. All that goes to show that although there is a part of your self that wants to get better at managing your mental states -- the one that's reading this, hi! -- it doesn't automatically mean that all your selves are onboard. So join me on a journey to trick these bastards to do what you want.\n\n_Also, I'm not a mental health specialist, see one if you need to._\n\n## \"Life is a game\" mental frame\n\n>Once a motherfucker get an understandin' on the game, and what the levels and\n>the rules of the game is, then the world ain't no trick no more, the world is a\n>game to be played.\n>\n> -- 2Pac in \"Starin' Through My Rear View\"\n\nPart of the startup game is taking risks, in fact, it's almost the only game in\ntown. If you're not taking risks, then your startup already exists, and you're\njust copying something else. But if you are creating something new in the world\nthere wouldn't be a week that goes by without feeling anxiety about all the risk\nthat you're taking. Be it your career, other people's times and money, or\nwith your product, users, etc.\n\nThe risk anxiety can paralyze you and unless you act you're just making your\nsituation worse. One handy mental frame to adopt in this case is \"life is\na game, and I'm playing it.\" If life is a game, then you're there to play it. When\nyou're, for example, playing a video game, although you stop to weigh the pros and cons of every decision you","metadata":{"id":48}}],["49",{"pageContent":"a game, and I'm playing it.\" If life is a game, then you're there to play it. When\nyou're, for example, playing a video game, although you stop to weigh the pros and cons of every decision you\nmake, in the end, you have to act. Otherwise, nothing will happen, and it's no fun. You'll happily\njump from place to place, explore different areas, try different combinations of\nkeys or moves. You're never standing still,\nalways making decisions and executing, learning, failing, restarting and going again.\n\nThe \"life is a game\" mental frame puts you in a fun frame of mind. You just\ncan't wait to see what happens next. Maybe you'll lose, perhaps you'll win --\nwho cares! As long as it's interesting, keeps you amused, engaged, and learning.\n\n## \"Time keeps moving forward\" mental frame\n\n\n>I was a little bit of a procrastinator and I would be faced with this seemingly\n>insurmountable task. I have final exams, I have massive amounts of work, papers\n>-- there is no way to make it through. At that time -- and this is served me\n>well -- I would say 'well, one way or another time keeps moving forward so\n>even though I'm just three weeks away, whatever happens in three weeks from now\n>I'll be on the other side'. So it seems like a wall that I can't get through but\n>actually time is marching ahead and I will get to that point past that thing\n>automatically and that was helpful to me.\n>\n> -- Siri, Change.org, and Viv founder Adam Cheyer on the \"Finding Mastery\"\n>podcast.\n\nWhen you have an upcoming deadline or a significant date of somesort -- be it a product\nlaunch, scoring a deal, hiring someone, or the end of your runway -- there is no\nreal rational reason to feel anxious. All you have to do is perform your best,\nand the rest is outside your control.\n\nIn situations where it's painful, you have to remember that\ntime will go by, nothing lasts forever, and that you'll eventually be on the other side. What's\nimportant now is to execute!\n\n## \"Worst-case scenario\" mental frame","metadata":{"id":49}}],["50",{"pageContent":"time will go by, nothing lasts forever, and that you'll eventually be on the other side. What's\nimportant now is to execute!\n\n## \"Worst-case scenario\" mental frame\n\nYou might've used this one before; it's kind of a cliche that's often used out\nof place: \"order the pizza, worst-case\nscenario we'll eat it in the car\" or some such thing.\n\nWhen correctly used, it can be compelling. Right now, think about a difficult\nsituation in your life, or a tough decision you're pondering, or a\nrisky move you're considering. Now think about the *absolute* worst thing that can\nhappen as a result of your actions -- like literally the worst thing:\n\n1. Will someone die?\n2. Will someone get seriously injured?\n3. Will you become homeless and starve on the streets?\n3. Will you lose your house/job/car?\n4. Will you tarnish your reputation?\n5. Will you fail at the startup thing and go back a to a cushy job where\nthey feed and do your laundry?\n\nEtc. Barring #1, #2, and #3 I think everything else can be tolerated. Honestly\nfor most decisions at Silicon Valley startups that may lead to ruin, it's probably going to be #5 that ends\nup being the worst-case scenario, and you know it's not all that bad.\n\nA excellent technique to couple with the worst-case scenario mental frame is what's\ncalled \"negative visualization\". An age-old technique invented by the Stoics in ancient Greece,\nyou visualize or meditate on the worst. Like, actually imagine it happening. If it does happen, you're already at peace with it, and if\ngood or neutral thing happens then it's ecstatic!\n\n## \"You're not your job\" mental frame\n\n\"Founder of [insert sexy startup name]\" is what you have on your twitter bio. It seems like this\nthing is intricately intertwined with your identity. But in reality, you're a\nlot more than that. You might be a good husband/father/son. You\nmight be a good thinker, writer, or educator. Or you might have hobbies that you're\ngood at.\n\nWhen failure strikes, you might feel that you, personally you, are a failure -- which","metadata":{"id":50}}],["51",{"pageContent":"might be a good thinker, writer, or educator. Or you might have hobbies that you're\ngood at.\n\nWhen failure strikes, you might feel that you, personally you, are a failure -- which\nis basically depression. When that happens, remind yourself that you're much more than your\njob -- that you contain multitudes.\n\nIt's good to cultivate other interests, hobbies, or anything that you\ncan get good at. Have people that rely on you outside of your work. Mentor\nsomeone. Learn a new skill. Find a hobby. Whatever you do try to link it to your\nidentity.\n\nFor me, I try to always have someone that I'm mentoring. I read, discuss, and dabble in\ndoing philosophy. I'm currently obsessed with weight-lifting. I also like to get\nbetter at writing, public speaking, and storytelling. I love to optimize my\nhealth. This year I spent a lot of time enhancing my sleep. Going from an\naverage 5 hours a night to 7.5 hours a night. I also increased my REM sleep,\ngoing from less than an hour to 1.5-2.5 hours.\n\n## \"What did I learn\" mental frame\n\nIf you're the kind of type A personality that would choose the entrepreneurial\npath then chances are, you like self-improvement, and chances are, you love\nlearning. So when failure does catch up with you then do yourself a\nfavor and think about everything that you've learned from your experience.\nMaybe even write about it but, at all costs, avoid titling your post [\"our wonderful journey.\"](https://ourincrediblejourney.tumblr.com/)\n\n---\n\nThere is a lot more to this, and I'll try to keep this as a live document. But\nfor now, I need to get back to playing the life game because time won't wait for\nme, and really, what's the worst that can happen? I want you to remember\nthough, that I'm not only my job, it's true that I learn a lot from it, but I\ncontain multitudes!\n\n---\n<small>\n[1] Kahneman, Daniel. Thinking, Fast and Slow (p. 364). Farrar, Straus and\nGiroux. Kindle Edition.\n\n[2] I know of \"mental models\" but for some reason it didn't quite fit. There is","metadata":{"id":51}}],["52",{"pageContent":"---\n<small>\n[1] Kahneman, Daniel. Thinking, Fast and Slow (p. 364). Farrar, Straus and\nGiroux. Kindle Edition.\n\n[2] I know of \"mental models\" but for some reason it didn't quite fit. There is\nsome overlap, however, where mental models is primarily about making intelligent\ndecisions, mental frames is about managing your own psyche.\n\n</small>","metadata":{"id":52}}],["53",{"pageContent":"{\n  \"title\": \"Github and Open-source Is a Boon for the Underprivileged\",\n  \"image\": \"https://cdn-images-1.medium.com/max/1600/1*lBVMxcsvMHSkghlAo1-5GQ.png\",\n  \"date\": \"06/09/2018\"\n}\n---\n\nI was born to immigrant parents. My mother's family left Algeria looking for\na better life in Syria and then Jordan (where I was born). On my father's side,\nhis family fled the war in Palestine to Syria and then settled in Jordan. My father's family was so poor that he had to sleep with ten\nother children in the same room (his brothers and his brothers'\nchildren). Luckily, Palestinians, for whatever reason, valued education above\neverything else, so they made sure to save up to send my father to Turkey\n(because there were no universities in Jordan at the time) to study to\nbecome an engineer.\n\nWhen my father came back to Jordan, he worked for the government as an engineer. There, he\nfaced discrimination because government jobs were typically reserved for\nnatives. Despite all this, he rose in the ranks for years until he became the\ncity manager of Amman, the capital of Jordan. My father's journey taught me\nthat as someone who's underprivileged or discriminated against you need to work\nten times harder than the next person to get ahead. You need to leverage\nwhatever tool you have to signal that you're great at your job. For him, it was his reputation. In a country ravaged by corruption my\nfather had a reputation for being so straight it baffled people (but it also\nmeant that we wouldn't get to see any of that corruption money, and we had to\ngrow up on a measly government salary).\n\nWhich brings me to the recent debate in the developer community on using GitHub\nas a résumé. While I try to stay away from debating hot topics because it takes time to form an informed opinion, this was a subject that's near\nand dear to my heart, so I had to write about it.\n\nIt all started with this tweet claiming that GitHub is the only way that\nemployers can validate talent.","metadata":{"id":53}}],["54",{"pageContent":"and dear to my heart, so I had to write about it.\n\nIt all started with this tweet claiming that GitHub is the only way that\nemployers can validate talent.\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">10/ GitHub is the de facto source for validating top talent the world over.<br><br>Résumé or CV? <br><br>Please.<br><br>Show me your GitHub profile, commits you&#39;ve landed, projects you&#39;ve forked, code you&#39;ve released.</p>&mdash; Joe McCann (@joemccann) <a href=\"https://twitter.com/joemccann/status/1004798006485573632?ref_src=twsrc%5Etfw\">June 7, 2018</a></blockquote>\n\nWhile I disagree with this statement, I found myself also disagreeing with\npeople on the other side of the debate which, in my opinion, are also staking\nout an extreme position. They're [saying](https://twitter.com/EricaJoy/status/1004849360625168384) that GitHub is not only a \"useless\nsignal\" but is also discriminatory by nature. (I found\nmyself agreeing more with moderate positions like Kim's\n[here](https://twitter.com/KimCrayton1/status/1005098820731097088) saying that basically, employers are shooting\nthemselves in the foot by excluding people with no GitHub profiles).\n\nStarting with the assumption that employers would want to hire the best candidates for\nthe job[1], we can observe that they're\nmerely trying to navigate the problem of \"adverse selection,\" which occurs in any\nmarket where there exists an asymmetry of information. Because candidates can deceptively\nspruce up\ntheir resumes and maybe even rise in the corporate ladder by being gifted at\noffice politics, and because most good programmers are not in the job market\n(they either have a job or get headhunted before they enter the market), this\nleaves employers in a tricky position with an insufficient set of tools to evaluate\ncandidates (see [The Market for\nLemons](https://en.wikipedia.org/wiki/The_Market_for_Lemons) for an interesting\ndiscussion on adverse selection). GitHub, on the other hand, cuts through the","metadata":{"id":54}}],["55",{"pageContent":"candidates (see [The Market for\nLemons](https://en.wikipedia.org/wiki/The_Market_for_Lemons) for an interesting\ndiscussion on adverse selection). GitHub, on the other hand, cuts through the\nbullshit (for the most part).\n\nYou can fake a resume, or end up with a good one simply as a function of\nyour privilege. For example, if you're born into wealth,\nyour parents can probably call in favors to get you jobs at prestigious\ncompanies. But can you really fake GitHub profile? It's tough to do so,\nand that's because the \"screening\", as it were, is done by OSS maintainers. You\ncan't bullshit your way into getting pull requests landed. And no matter your parent's\nstanding in society, if your code stinks, you can't contribute. This makes GitHub a\nprecious tool for recruiters.\n\nBecause open-source is good at cutting through the bullshit, it also makes it an equalizer. If you come from an\nunderprivileged background, you should absolutely use GitHub to get ahead. That's\nexactly what I did. I owe my entire career to open-source.\n\nBack in college, I didn't have a personal computer, and I was always on the\nmove -- from campus to the office, to home. Which made it tough to code\non projects, or solve homework because every time I got my hands on a computer, I\nneeded to setup the development environment. So I started dreaming about a world\nwhere I can open a browser tab and start coding, in any language,\nanywhere. Which started a multi-year project to build an in-browser repl. The\nfirst thing I did was put a textarea with a button that `eval`d JavaScript. I was\nable to program on my Nokia phone and work on problems on the go. But I wanted\nthis experience to be better and to work for more languages.\n\n[Long story](https://news.ycombinator.com/item?id=16578943) short, years after I\nhad the idea for an online repl was I able, with help from\nfriends, to build the first polyglot [in-browser repl](https://github.com/replit/jsrepl) along with a [web terminal](https://github.com/replit/jq-console)","metadata":{"id":55}}],["56",{"pageContent":"friends, to build the first polyglot [in-browser repl](https://github.com/replit/jsrepl) along with a [web terminal](https://github.com/replit/jq-console)\nimplementation. I tried to start a company around this idea, but nobody would\nfund me. Luckily, everything was open-source on GitHub and soon after we\nreleased the project I saw that not only one, or two, but more than a dozen\ncompanies in Silicon Valley started using our software.\n\nAlthough I had applied so many times to work at Google, Facebook, and many\nothers, I never got a response back, let alone an interview. Open-source became\nmy ticket there. I joined Codecademy as the #1 employee and helped 10s of millions\nof people to learn how to code.\n\nAfterward, I joined Facebook to try and work at the team behind React.js. But I\nwas stuck working on the photos product (which I couldn't care less for) because\nthe React team was one of the hottest teams at the company. So\nI started contributing to their open-source projects. I know it sounds crazy and\nroundabout, but I was able to prove myself more via my GitHub contributions than my\nday job. I think that played a big part in letting me in the team where I worked on\nReact Native.\n\nToday, I'm trying to pay it forward. At my new company, [Repl.it](https://repl.it), we believe that\nprogramming is a great equalizer. We've seen our product used by [refugees](https://repl.it/site/blog/refugees) to\nlearn how to code. By people to [upgrade](https://repl.it/site/blog/two_stories)\ntheir careers and land tech jobs and to\n[teach](https://repl.it/site/blog/two_stories) low-income high-achieving children how to code. Or by [homeless](https://www.reddit.com/r/learnpython/comments/54d53z/help_a_homeless_man_code_again/) people who\nonly have access to computers at the public library. At this point, we've heard enough \"rags to\nriches\" stories in programming that it becomes difficult to dismiss this as\nsimply \"survivorship bias\".\n\nTo conclude: if you come from an","metadata":{"id":56}}],["57",{"pageContent":"riches\" stories in programming that it becomes difficult to dismiss this as\nsimply \"survivorship bias\".\n\nTo conclude: if you come from an\nunderprivileged background then the unfortunate reality of the situation is that\nyou're going to have to work harder than everyone else. And you're going to want\nto use any tool at your disposal, like Github, to signal that you're you going\nto be great at your job so you can land great jobs.\n\nIf you need advice, I'd be happy to help, my DM are open on [twitter](https://twitter.com/amasad).\n\n----------------------------------------------\n<small>\n[1]: It's still a safe assumption to start with, even if it's not entirely\naccurate. Even if you believe that bigotry (or unconscious bias) plays a big part in\nexcluding people, I think that from a first-person point of view, you can't control\nthat. For example, it's hard for me as an individual Muslim to change the fact\nthat some people hate Muslims, so it's better for me to focus my energy on\nthings that I can control. This, however, doesn't mean that as a society we shouldn't discuss issues of\ndiscrimination.\n</small>","metadata":{"id":57}}],["58",{"pageContent":"{\n  \"title\": \"Why We Switched From MongoDB to PostgresSQL (GPT 3 post)\",\n  \"date\": \"07/29/2020\"\n}\n---\n\n_This post was generated by gpt-3. My prompt was only the title and the first sentence_\n\n__At Tiny we're scaling really quickly__. Our platform allows tens of thousands of developers to instantly provision a running test environment in a few clicks. This creates a huge amount of data which is stored on a MongoDB cluster hosted on Google Compute Engine.\n\nA few months ago we started noticing some serious performance problems. The database was not able to handle the query load. We had all of our database configuration on auto-pilot so it took us a while to realize we had a problem. After a few weeks of investigation it became obvious that MongoDB was not the right choice for us and we decided to make the switch to Postgres.\n\n## Why We Chose Postgres\n\nPostgres has been around since the dawn of the web, and is more battle tested than any other database. It has very fast performance, is open source, and runs on a wide range of platforms.\n\nMongoDB has very flexible schema and is a great choice for dynamic applications. When we initially started developing our service, the schema was very flexible. Since we allow users to provision an environment in a few clicks, the data model changed from one environment to the next. This was not a problem for MongoDB. With time we became more strict in our schema and users started having a more consistent data structure, but this was now against MongoDB's strengths and caused us a lot of performance problems.\n\nPostgres on the other hand has a more rigid schema. There is no auto-sharding. The database servers have to be the right size. And the sharding is much more involved to setup. There are however many open source tools that can help you monitor, optimize and scale your Postgres cluster. There are also more resources online to help you migrate from one database to another.","metadata":{"id":58}}],["59",{"pageContent":"Moving to Postgres was actually very easy. All we had to do was install a few packages.\n\n```\napt-get install postgresql postgresql-contrib postgresql-client\n```\n\nWe had to make a few changes to our code so that it would work with Postgres' strict schema.\n\nWe added a schema field to every model. This is important since Postgres cannot automatically detect the structure of the data.\n\n```\nclass DataContainer < ActiveRecord::Base attribute :schema , :string attribute :data , :text , default: \"\" end\n```\n\nWe have to explicitly define the length and format of each text field.\n\n```\nclass DataContainer < ActiveRecord::Base attribute :data , :text , default: \"\" attribute :content , :text , default: \"text\" , size: 25 .chars end\n```\n\nSome Mongoid extensions won't work with Postgres. To convert these fields we used the ruby2ruby gem.\n\n```\n\"Postgres extension for mongoid/mongo_mapper\" .split( \"::\" ).each do |component| mongo_model = component.split( \"::\" ).first module Mongo end Mongoid::Document.extensions.each do |extension| if extension.start_with?( \"Mongoid::Extension::\" ) mongo_model_ext = extension.split( \"::\" ).first mongo_ext = module Mongoid::Document module Extension mongo_model_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| if component.include?( '-is-extended-type' ) && component.split( \"-\" ).last == \"ruby2ruby\" include component.split( \"-\" ).last else puts \"Ignoring #{component} in mongo_extension\" end end end end end end end end end end end end end end end\n```\n\nAdding indexes to a Postgres database is also very easy. We use data containers which contain several documents. We needed to index them by schema and id. Here's how you can create a partial index.\n\n```\nrails g index add_to_container_data_schema_id","metadata":{"id":59}}],["60",{"pageContent":"```\nrails g index add_to_container_data_schema_id\n\nclass AddToContainerIndex < ActiveRecord::Migration def up add_index :containers, :schema, :unique: true add_index :containers, :id, :unique: true end def down remove_index :containers, :id remove_index :containers, :schema end end\n```\n\nWe also need to initialize the connection with the database, otherwise Rails will try to connect to the production database.\n\n```\n# config/database.yml production: adapter: postgresql encoding: unicode database: <%= ENV['TINY_APP_DB_NAME'] %> # db/structure.sql # <% db_name = ENV['TINY_APP_DB_NAME'] %> # db/seeds.rb class AddToContainerData < ActiveRecord::Migration def up execute <<-SQL CREATE TEMP TABLE containers ( id SERIAL PRIMARY KEY , schema VARCHAR( 100 ) NOT NULL , content TEXT NOT NULL , FOREIGN KEY (schema) REFERENCES schema_fields(schema) ); SQL execute <<-SQL CREATE UNIQUE INDEX containers_schema_id ON containers(schema); CREATE INDEX containers_id ON containers(id); SQL end def down execute <<-SQL DROP TEMP TABLE containers; SQL execute <<-SQL DROP INDEX containers_schema_id; DROP INDEX containers_id; SQL end end\n```\n\nDon't forget to add the migrations to the git repository.\n\n```\n$ git add db/migrate \n$ git commit -m \"Adding Postgres support to the containers\"\n$ git push\n```\n\nRunning our tests on Postgres took a little bit more time than running on MongoDB. It's not a lot more though. I believe this is because our test environment has to process more requests. The performance on the production server was also better than Mongo.\n\nThe last step we took was to set up monitoring for our Postgres cluster. We set up simple scripts that runs inside a cron job to collect data and store it in a database.\n\nWe're looking for smart developers. Hackers apply here!","metadata":{"id":60}}],["61",{"pageContent":"{\n  \"title\": \"Be Grateful\",\n  \"date\": \"06/02/2018\"\n}\n---\n\nWhere I'm from \"Thank God\" is something you say every day. While nowadays most\npeople say it in an automatic, mindless way, I think it came to be tradition\nbecause of a profound sense of appreciation for life by our ancestors. People\nfound themselves in a world where things are not too bad and often pretty\ngood. They looked around them, and while they didn't know why or how they got\nhere, they felt thankful for the life they're given. So they felt and expressed\ngratitude, multiple times day, each day.\n\n_\"We are going to die, and that makes us the lucky ones\"_ said Richard Dawkins,\ntalking about how lucky we are to be the ones that got to live for _\"the\npotential people who could have been here in my place but who will in fact never\nsee the light of day outnumber the sand grains of Arabia\"_. Meditate on that,\nand when you feel those words, no matter what your misfortune is, you'll know\nthat you're damn lucky to be alive.\n\nIn the story, _Candide: Optimism_, a philosopher named Pangloss believed that we\nlive in the best of all possible worlds. And despite the deep misfortune visited\nupon him–enslavement, torture, earthquakes, and more–Pangloss maintained his\nbelief that he lives in the best of all possible worlds. While the story is\nridiculing this type of thinking, I think there's something to be learned from\nPangloss. We may not be living in the best of all possible worlds, but I can\ncertainly imagine far worse worlds than I can imagine better ones. Maybe that's\nbecause we humans are wired to fear the worst so we can survive the world. But\nthe flipside is that you can be deeply grateful for living in a world where your\ndeepest fears are not reality.\n\nSo I'm thankful. Starting with my peaceful upbringing, I'm beholden to my\nparents and my grandparents who left war-ravaged countries to move to an island\nof peace among total and utter nihilistic destruction. I grew up in an\nintellectually and physically stimulating environment. And for that, I'm","metadata":{"id":61}}],["62",{"pageContent":"of peace among total and utter nihilistic destruction. I grew up in an\nintellectually and physically stimulating environment. And for that, I'm\ngrateful to my friends, teachers, and peers. I'm thankful for my hometown, the\nplace where I found love–a woman that believed in me and pushed me to my limits\nand beyond.\n\nHowever, I chose to leave to follow in the footsteps of my heroes. To the place\nwhere pioneers, inventors, and visionaries imagined and built a world where\nhumans can transcend their limitations. Extended by technology, we're evolving\ninto something new and beautiful. I'm grateful to the country that took me in,\nthe industry that let me follow my dreams, and the people that took a bet on me.\n\nYes, I know I'm lucky, and that's precisely why I'm thankful. But I also believe\nin progress. I think that we–all of us, all of humanity–are going somewhere,\nsomewhere beautiful. So be thankful; be thankful for every moment you're\nalive. And if you're also one of the lucky ones, you have a responsibility to\nmake the world a little better for everyone else.\n\nThank you for reading this.","metadata":{"id":62}}],["63",{"pageContent":"{\n  \"title\": \"Hello World\",\n  \"date\": \"04/09/2015\"\n}\n---\n\nYou can now embed runnable code snippets from [repl.it](https://repl.it) on your blog or website.\nJust go to [repl.it](https://repl.it) and pick one of the languages listed below, save your code and click share to get the html code to paste on your site.\n\n#### C++\n<script src=\"//repl.it/embed/iAR.js\"></script>\n<div>&nbsp;</div>\n\n#### C\n<script src=\"//repl.it/embed/iAS.js\"></script>\n<div>&nbsp;</div>\n\n#### Ruby\n<script src=\"//repl.it/embed/iAm.js\"></script>\n<div>&nbsp;</div>\n\n#### Python 3\n<script src=\"//repl.it/embed/iAo.js\"></script>\n<div>&nbsp;</div>\n\n#### Node\n<script src=\"//repl.it/embed/iAp.js\"></script>\n<div>&nbsp;</div>\n\n#### Go\n<script src=\"//repl.it/embed/iAr.js\"></script>\n<div>&nbsp;</div>\n\n#### Java\n<script src=\"//repl.it/embed/iAs.js\"></script>\n<div>&nbsp;</div>","metadata":{"id":63}}],["64",{"pageContent":"{\n  \"title\": \"On Hosting Sites from Your Editor\",\n  \"date\": \"03/08/2021\",\n  \"image\": \"https://amasad.me/public/images/hosting.png\"\n}\n---\n\nThis website is hosted on an [editor](/__repl). I can update it live and I can even see you visiting it in my editor [console](https://blog.replit.com/internet-of-fun).\n\nThis idea is not too far from how we used to make websites in the 90s and early 2000s. You wrote your code and FTP'd it into remote server and restart the webserver process to pick up the changes. Today, most people do it by git-pushing to a PaaS provider. I've been hosting apps, sites, bots, and microservices from my editor for the last two years, and in this post, I'll share my experience. While I've been doing in Replit, where it collapses your entire workflow into your code -- a code-first environment -- the following applies to anyone who's hosting code directly from where they wrote it.\n\nWhen writing code, the development environment feels closest to you. It's where you are making the changes and seeing your creation come to life. After coding, in a typical workflow, you push up your code for storage and sharing (to something like GitHub). If your changes are ready to release, you'll also push them to a hosting provider (say Heroku). Here is a diagram of it:\n\n![a diagram showing three different environments: localhost, production, git](/public/images/hosting.png)\n\nThe moment you send your code to a remote environment, you've created distance between you and your creation. It's living in a different environment where it's not easy to inspect and update. You've fragmented your workflow and now have two other locations where your code lives, and while git is great and maintaining copies of code, you've introduced multiple potential sources of truth.","metadata":{"id":64}}],["65",{"pageContent":"This destroys momentum especially for early-stage startups, side-projects, and those who are learning to code. Sadly, the \"industry standard\" often gets applied indiscriminately, robbing people of a superior mode of creation and all the fun and reward that comes with it. \n\nThe alternative: \n\n![a diagram showing one environment](/public/images/hosting2.png)\n\nWhen hosting from your editor, you're moving fast, updating the site and seeing crashes and debugging issues in realtime. For example, in Replit, I can enter the production repl and see active connections, inspect, and even hot-update live objects. \n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I was wondering if the app is already getting usage and one of the wonderful things about hosting on <a href=\"https://twitter.com/replit?ref_src=twsrc%5Etfw\">@Replit</a> is getting a live repl on the hosted app. <br><br>Here I just got a reference to the db and listed the entries. <a href=\"https://t.co/UIoERFc50D\">pic.twitter.com/UIoERFc50D</a></p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1332029622075047936?ref_src=twsrc%5Etfw\">November 26, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nHaving a production repl is super valuable. Paul Graham recounts how he used the Hacker News prod repl to react to an issue from his phone: \n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I once had to write code on a phone, after HN mistook investor usage on Demo Day for a DDoS attempt and started ignoring the venue&#39;s IP address. I had to log into HN on a phone and paste a fix into the repl. This looks a lot more civilized.</p>&mdash; Paul Graham (@paulg) <a href=\"https://twitter.com/paulg/status/1255235112226238466?ref_src=twsrc%5Etfw\">April 28, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","metadata":{"id":65}}],["66",{"pageContent":"Another issue I've run into with today's standard workflow is projects going stale. After leaving a project for a few months the barrier to going back to hacking feels high: I'd have to pull, set up the dev environment again, and figure out how the hosting provider is configured. However, when hosting from my editor, I open up the project, and I'm right there hacking and \"deploying.\"\n\nBecause the distance from creation is reduced, I also start (and complete) many more projects. I'm quick to spin up something or to automate a piece of work. At work, because Replit feels close and fast, we spin up many bots to automate tedious tasks or introduce fun and serendipity. \n\n![lunch bot](https://pbs.twimg.com/media/EuCd-dvVkAwNO8K?format=jpg&name=medium)\n\nFinally, in cases of emergency, it also helps to be able to code live. We've been able to respond to emergencies  at breakneck speed. For example, a few months ago PyPi quitely deprecated their package search API which we use in our packager UI. Luckily, we found a package that searches PyPi via scraping the site. We spun up an alternative on Replit in 30 minutes:\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Multiplayer <a href=\"https://twitter.com/replit?ref_src=twsrc%5Etfw\">@replit</a> story: <br><br>3rd party service deprecated w/ no warning 😱<br><br>I spun up a repl with and prototyped replacement ⚡️<br><br>Single-threaded couldn&#39;t handle 1 rps 😢<br><br>Someone jumps in w/ `uwsgi` now we&#39;re at 3 rps 💆🏽‍♀️<br><br>Dropped in LRU and now we&#39;re up to 50 rps 📈<br><br>Good—Shipit!</p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1340108478967267329?ref_src=twsrc%5Etfw\">December 19, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","metadata":{"id":66}}],["67",{"pageContent":"I'd like to see the dev community introduce more fun and interactivity back into building, especially when teaching new devs how to code. Most bootcamps today spend their first weeks teaching people git. But their students have no mental model for version control to be able to grok git, so it just starts on the wrong foot with people feeling inadequate or dumb for not \"getting it.\" \n\nSeymour Papert called this the [\"project/problem inversion\"](http://www.papert.org/articles/AnExplorationintheSpaceofMathematicsEducations.html). The natural way to acquire knowledge of new tools is to have the use-case for them; today new developers are taught to cargo-cult advanced development techniques before they've even finished learning how to code.","metadata":{"id":67}}],["68",{"pageContent":"{\n  \"title\": \"The Hyperreal\",\n  \"date\": \"3/13/2021\"\n}\n---\n\nIt's normal to get excited by social media likes. Some say social media is \"fake.\" But to the receiver of the like, they feel appreciated and heard, and to them, that's real. It's perhaps more real than going out into the world and saying interesting things and receiving real-world \"likes\" and praise. The activity is reduced to its essence and delivers intense satisfaction. Likes are hyperreal. \n\nFor something to be fake, it can't produce the intended result. It should be counterfeit. But hyperreal is the opposite. To make a hyperreal object from a real one, take only the details that excite the mind — like getting praise — intensify them, and drop everything else. When you reduce food to its most intense elements — sweet & salt — you get hyperreal (junk) food.  That is the formula for hyperreality. \n\nHyperreality is exciting, but too much of it is destructive to humans. It takes us out of our natural flow and makes us into addicts. Now you might object with something like \"everything in moderation,\" which is trite and true. But be prepared to fight the modern technological system optimized to produce hyperreality. \n\nYou might blame \"capitalism\" for working against our better angels. It is, after all, very efficient at producing hyperreality. But you'd be wrong because humans have been making hyperreality since cave drawings.\n\nCommunism produces hyperreality too. It is hyperreality. It takes a naturally occurring thing — family and community — and intensifies its most attractive elements. It's an intoxicating hyperreal vision. \n\nAre we doomed to eternal hyperreality addiction? It is a potential answer to Fermi's Paradox. Intelligent life evolves until all it does is produce and consume hyperreality at the expense of exploring the stars.","metadata":{"id":68}}],["69",{"pageContent":"I don't think we're doomed though. And I don't think regulation is the answer either. Religions have dealt with the destructive nature of hyperreality. Why do you think you can't draw pictures of people or animals in Islam? A restriction that generated an art culture rooted in abstract (unreal) shapes.\n\nThe secular West is especially vulnerable to hyperrealism because societal norms that could protect us are considered oppressive. I love the West's renegade aspect. It resulted in innovative art, science, and technology. But it left us unprotected against hyperreality.\n\nWhatever comes next — may be a techno-futurist religion — needs to address this issue.","metadata":{"id":69}}],["70",{"pageContent":"{\n  \"title\": \"Overcoming Intuition in Programming\",\n  \"date\": \"01/03/2016\",\n  \"hidden\": false\n}\n---\n\nIn a [series of experiments](http://faculty.chicagobooth.edu/nicholas.epley/alteretal.pdf),\nresearchers set out to discover the relationship between difficulty or\n\"disfluency\" and cognition. They presented the same test to two groups, one in\nan easy to read (intuitive) format and the other in a difficult (disfluent)\nformat. And in all the experiments they carried out, the disfluency group scored\nsubstantially higher. The theory behind this is that people will default to\nrelying on the automatic, effortless, and primitive system for reasoning. But if\nthings are counter-intuitive or harder to understand we switch to the deeper,\ndeliberate and analytical mode of thinking.\n\n\nI've been thinking about how this translates to programming. Programming is an\nintellectually challenging task, but luckily we invent tools to make it\nmanageable. I find that up to a certain point, the intuitive and easy properties\nof a given language, framework, or library might start to have negative\neffects. From personal experience and from mentoring beginners I noticed that\nwhen using tools that allow us to reason within our intuition, anytime we're\nfaced with some difficulty we feel that we've done something wrong. And although\nwe might have the necessary skills to overcome the difficulty, we often start\nquestioning and revising our work. Asking questions about best practices\nrelative to the framework instead of programming our way out. The quintessential\nexample of this is the Stack overflow questions for _\"how do I use jQuery to do\nX?\"_ or the answers _\"use jQuery [plugin] to do X\"_ where X could be anything from\nbasic arithmetic to websockets.\n\n### The framework negative space\n\nWhen using a framework, a certain class of problems are made easy to\nsolve. Programming feels intuitive if we stay within that space created by the framework. We","metadata":{"id":70}}],["71",{"pageContent":"### The framework negative space\n\nWhen using a framework, a certain class of problems are made easy to\nsolve. Programming feels intuitive if we stay within that space created by the framework. We\nmay refer to this as the __framework intuitive space__. On the other hand we may refer to the\nrest of the space that framework doesn't solve or have an opinion on\nas the __framework negative space__. The negative space\nis not necessarily a defect of the framework, it's just not in the space the\nframework was built to solve. However, having put the programmer in the intuitive space for a\nlong stretch of time, it makes it feel out of place when finding oneself in the\nnegative space.\n\nWhen the beginner programmer find themselves in the negative space, they often\nlook to the library authors to put them back in the intuitive space. That's why\nfor any popular framework you find that there is an entire ecosystem of plugins\nand addons that extends the framework's intuitive space to cover an increasingly\ngrowing surface area. It doesn't seem to be inherently wrong if it makes\nprogrammers more productive. However, it may have unintended negative consequences:\n\n1. Increased reliance from the programmer on the ecosystem's library authors\n2. Offloading of architectural decisions to the libraries all the while\nincurring technical debt\n3. Enabling the false belief that programming should always feel intuitive\n\n### The developer and library author codependency\n\nI should start by saying that this is technically a false dichotomy. All programmers\ntake on both those roles in any programming session. You maybe coding the product\nbusiness logic and switch to building a general purpose abstraction to help you\nin multiple places in your codebase. However, I've noticed that in open-source, people tend\nto act in a manner that makes this dichotomy seem true.\n\nThe easiest way I've found to succeed in open source is to pave the negative\nframework space to become an intuitive space. In other words, writing the","metadata":{"id":71}}],["72",{"pageContent":"The easiest way I've found to succeed in open source is to pave the negative\nframework space to become an intuitive space. In other words, writing the\nplugins and extensions. As a framework becomes more popular, a growing number of\ndevelopers (usually beginners) will start complaining about how it's hard to do\nX in this framework (and as we've seen X might be totally unrelated). Now, as in\nthe business world, open-source is extremely competitive and as soon as there\nis an opening to solve a perceived problem for a lot of people, many would rise\nup to the occasion. This becomes an enabler to the false belief that a\nprogrammer can spend all of their time programming in the intuitive space.\n\n### Conclusion\n\nI think fixing this problem ultimately comes down to education. Very early on\nwhen someone is learning programming our culture tend to emphasize an obsession with\ntooling. I get a lot of questions from aspiring programmers on what's the best\ntool or languages to learn. It's almost always a premature question to ask. I\nused to come up with answers like \"depending on what you're building\" or \"pick a\nbeginner friendly community\" or \"invest in a growing language\". I\nthink all of these are good answers, but it doesn't really matter that early on\nin a programmer's learning journey. It's all the same when you're\nessentially learning how to compute. Furthermore, these sort of answers enable\nthe culture of tooling obsession.\n\nCode reuse, libraries, sharing, and open-source are very important to software\nengineering, but we should be careful to not enable the belief that programming\nshould be as easy as gluing things together. In fact, these days I'm often\nskeptical when things feel a little bit too easy. If programming was as easy as\nthis then it would've already been automated away.","metadata":{"id":72}}],["73",{"pageContent":"{\n  \"title\": \"Building an In-Browser JavaScript VM and Debugger Using Generators\",\n  \"date\": \"01/06/2014\"\n}\n---\n\n### tl;dr\n\nI built a JavaScript VM and debugger in JavaScript. Checkout the example in the [demo app](http://debugjs.com/#example) and the [source code](https://github.com/amasad/debugjs). Read on for a dive into the technical details.\n\nUpdate: [I implemented one of the examples from Bret Victor's Learnable Programming](/2014/01/10/implementing-bret-victors-learnable-programming-has-never-been-easier/) using debug.js.\n\n### Introduction\n\n#### Motivation\n\nFor the past few years I've been working on creating tools to help people learn programming on the web. I've worked on [repl.it](http://repl.it) and open sourced the underlying technology which powered a [few](https://www.udacity.com/) [learn](http://www.codecademy.com/) to [code](http://www.learnstreet.com/) websites and until recently lead product engineering at Codecademy. Through all that, one thing I really wanted to see are the tools to make it possible to visualize code execution and step through code in the browser. To catch glimpse of what an ideal interactive learning environment would be you should check out [Learnable Programming](http://worrydream.com/LearnableProgramming/) by Bret Victor.\n\nIn addition to the educational benefits of such a tool, if matured it could be also useful for code instrumentation, web IDEs, and creating a foundation for writing other VMs on top of JavaScript (having the pausable machine state let’s you not worry about the non-blocking environment).\n\nEver since I've read about the [ES6 Generators](http://wiki.ecmascript.org/doku.php?id=harmony:generators) proposal, I've been toying with this idea in my head but it wasn't a real possibility until [Ben Newman’s](https://twitter.com/benjamn) [Regenerator](http://facebook.github.io/regenerator/) brought generators to the browser.\n\n#### Goals\n\n* JS VM capable of running ES5 code\n* VM should be pausable on any instruction","metadata":{"id":73}}],["74",{"pageContent":"#### Goals\n\n* JS VM capable of running ES5 code\n* VM should be pausable on any instruction\n* Ability to create a feature complete JS debugger on top of the VM\n* Mainly targeting browsers but should work in Node.js for development\n\n### Generators\n\n_if you're familiar with generators, feel free to skip this section or read [this](http://tobyho.com/2013/06/16/what-are-generators/) instead for a more comprehensive introduction_\n\nGenerators are part of the ES6 proposals and is making it's way slowly into production environments. Generators gives us a new type of functions where we can step in and out of a function while sending  and receiving values to and from it.\n\nThe following example should illustrate the fundamentals of generators:\n\n```javascript\nfunction* genFn() {\n  var x = yield 2;\n  yield x;\n  return 'done';\n}\n\nvar gen = genFn()\nconsole.log(gen.next());  // {value: 2, done: false}\nconsole.log(gen.next(1)); // {value: 1, done: false}\nconsole.log(gen.next());  // {value: \"done\", done: true}\n```\n\n_Notice the * at the end of the `function` keyword, that's all you need to create a generator._\n\n### Overview\n\nHaving the unique ability of suspending execution of a function and resuming at a later point in time, generators gives us the basic building block for creating a VM that can step through instructions and pause at any point. To achieve that, every function in the system must be transformed into a generator that yields to the machine before every instruction execution. This may sound similar to [Continuation Passing Style](http://en.wikipedia.org/wiki/Continuation-passing_style) with a trampoline, however, the main difference is that the call stack information in CPS is held in the lexical scope whereas in this method we need to take full control of the call stack. I'm not a compiler nor a PLT expert so I'm not really sure if this method has a name or if it has been tried before, if you do please let me know.","metadata":{"id":74}}],["75",{"pageContent":"We want the host JavaScript environment to take on as much of the responsibility of running code as possible. Beyond generator function transformation we have to do a few other things which I'll outline here and get into each later.\n\n* Control the call stack\n* Handle errors and error propagation\n* Control timers in the system (setTimeout, setInterval etc)\n* Workaround native APIs that expect function arguments (callbacks and not generators)\n* Write a debugger module\n\n### Code Transformation\n\nIn order to control the execution flow we need to yield back to the machine after each instruction execution. To do so, we take each instruction in our program and insert a `yield` expression before it. I chose to define an instruction (or a step) as a single JavaScript statement.\n\nFor example:\n\n```javascript\nvar foo = 1;\nif (bar === foo) {\n  foo = 2;\n}\n```\n\n After the transformation:\n\n```javascript\nfunction* __top() {\n  yield {step};\n  var foo = 1;\n  yield {step};\n  if (bar === foo) {\n    yield {step};\n    foo = 2;\n  }\n}\n```\n\nIn addition to the basic instruction transformation we need to add information about each function in our program that would be useful when building the debugger. We call this, a stack frame and it includes the following data about our function:\n\n* name\n* filename\n* scope: an array of variable names and their occurrences in the function.\n* eval function: this gives access to the function's closure to do things like watch expressions and eval code in that scope.","metadata":{"id":75}}],["76",{"pageContent":"* scope: an array of variable names and their occurrences in the function.\n* eval function: this gives access to the function's closure to do things like watch expressions and eval code in that scope.\n\nFinally, function calls are a bit trickier than regular instructions since we need to capture the call stack and play nicely with native and library function calls. On compile time, at the function call site, we don't know whether a function call is referencing a generator function (a function within our ecosystem) or a function object. If it was the former, we need to add it to our call stack and step into executing the function instructions, as for the latter we simply need to get a value out of it. We solve the issue by wrapping all function calls in a thunk and yield it back to the machine to make that decisions on runtime (where we have more information).\n\n“Thunk” is a fancy word for something JavaScript programmers do all the time -- create a closure that delays the computation of a piece of code. To illustrate:\n\n```javascript\nfoo();\n```\n\nBecomes:\n\n```javascript\nyield __thunk(function *thunk() {\n  return foo();\n}, this, arguments);\n```\n\nA more complex call expression would also work:\n\n```javascript\nfor (var i = foo(), b = bar(); i < 50; i++);\n```\n\nBecomes:\n\n```javascript\nfor (var i = yield __thunk(function* thunk() {\n  return foo();\n}, this, arguments), b = yield __thunk(function* thunk() {\n  return bar();\n}, this, arguments); i < 50; i++);\n```\n\n`this` and `arguments` are passed down so we can create the correct scope when invoking the thunk.\n\n### VM\n\n#### Stepping and The Call Stack","metadata":{"id":76}}],["77",{"pageContent":"return bar();\n}, this, arguments); i < 50; i++);\n```\n\n`this` and `arguments` are passed down so we can create the correct scope when invoking the thunk.\n\n### VM\n\n#### Stepping and The Call Stack\n\nOur machine's main responsibility is to invoke, push, and pop functions off the call stack. It starts out with a halted (or idle state) until we eval a string of code which is transformed and converted into a top-level generator. Then, we can call `step` on the machine and expect it to run the next instruction in our code via the generator `next()` method. If that instruction returns a thunk, we evaluate it and if it returns a generator we push it onto our call stack and any further steps will be invoked on it. When our current peek generator is done stepping we take the last value and pass it back into the next generator on our call stack. The passing is also done via the generator `.next` function which accepts an argument to be sent into the generator function.\n\n### Errors\n\nWhen invoking an instruction, there is a possibility it could throw an error. The way we deal with that is we try/catch every instruction invocation and if we get an error we pass it up the call stack incase one of the caller functions have try/catch statement waiting for us.\n\n```javascript\nRunner.prototype.$propError = function (e) {\n  while (this.stack.length) {\n    this.gen = this.stack.pop();\n    try {\n      this.gen.throw(e);\n      return;\n    } catch (e2) {\n      e = e2;\n    }\n  }\n  throw e;\n};\n```\n\n#### Timers\n\nOne of our goals is to be able to pause our machine at an point in time and for as much time as needed. Because of that we run into the problem of not being able to rely on the host JavaScript environment for controlling timers. e.g. we have a `setInterval` running with a second in between and we decided to pause the machine for 10 seconds, when we resume we shouldn't expect 10 back-to-back timers to trigger. The machine time should only be running when:\n\n1. We are executing instruction code.","metadata":{"id":77}}],["78",{"pageContent":"1. We are executing instruction code.\n2. We are in idle state (the call stack has unwinded and the machine is in a halted state).\n\nWe use a priority queue to store our timers and have a tick method that checks if there are any timers that should fire at that point in time. We rely on the host `setImmediate` or `setTimeout(tick, 0)` to provide us with our tick function.\n\nWhen a timer fires the machine simply triggers `timer` event and clients could react by running or stepping through the timer (thus creating a new call stack). This is very similar to JavaScript event loops but very specific to timers.\n\n#### Native APIs\n\nWe can't expect every API our code touches to understand how we do things using generators so the machine provides a way to wrap callbacks and yield them back to the machine to further step through them. However, a problem arises when we consider synchronous APIs that expect callbacks, for example `Array.forEach` will call the callback continuously until the iteration finishes and that's a problem because we expect to be able to pause any execution indefinitely. For that reason, we can't rely on the host environment native APIs to do the same thing. Luckily, this turns out not to be very hard to solve. All it took is taking the popular [es5-shim](https://github.com/es-shims/es5-shim) library and running our transformation on it so it become generator friendly.\n\n#### Events\n\nMuch like the the Native API problem, events expects event listeners made of functions, but this is a much simpler problem because this is an asynchronous API and all we have to do is wrap our listeners with a function wrapper that would trigger our machine whenever it's called.\n\n#### Debugger\n\nAfter creating the VM, writing the debugger was fun and relatively straightforward. The only issue I ran into is handling all the thunk garbage we have in our call stack because we treated them just like any function call to make the machine simpler.\n\nFeatures:\n\n* Breakpoints\n* Debugger statements","metadata":{"id":78}}],["79",{"pageContent":"Features:\n\n* Breakpoints\n* Debugger statements\n* Step in, out, and over any statement\n* Get scope variables and values\n* Get call stack\n* Eval in scope: whenever you on a breakpoint you can evaluate in that scope\n\nCheck it out [here](http://debugjs.com).\n#### Current status\n\nThe project is still in early development stages. I’ve only been working on it for about two weeks. In terms of correctness, I’m sure the VM can run most of the ES5 spec. One thing that came to mind while writing this post is that getters and setters are definitely broken at the moment.\n\nThe VM is currently very slow, especially the code transformation bit but there are a few quick wins to be had there to get it to an OK speed.\n\nI also realize that the generator transformation is just an intermediate step to the transformation that Regenerator does to be able to step in and out of functions freely. Therefore we could get rid of that step and transform directly to the state machine.","metadata":{"id":79}}],["80",{"pageContent":"{\n  \"title\": \"On VMs in JavaScript\",\n  \"date\": \"07/17/2012\",\n  \"author\": \"Amjad Masad\"\n}\n---\n\nThere are many challenges in implementing a language VM in JavaScript. Amongst those is the fact that your VM will be forced to live in a non-blocking environment, whereas most language interpreters are designed to be able to block in some cases. This forces JavaScript programs to be structured differently. Programs run shortly registering callbacks for events and yielding to the event loop that will dispatch the callback when the event is fired. While many enjoy this style of programming, there are others that think there is a better way:\n\n* [TameJS](http://tamejs.org/)\n* [Narrative JavaScript](http://www.neilmix.com/narrativejs/doc/index.html)\n* [jwacs](http://chumsley.org/jwacs/)\nand the list goes on...\n\n### In the VM\n\nYou maybe asking yourself what kind of asynchronous operations would an interpreter need to do in the first place. Good question! It's always good practice to put computationally heavy programs in Web Workers and that include VMs which makes interactions with the UI thread asynchronous, which for the most part, is ok, except to when it comes to user input. Most would expect it to be blocking. Also having the ability to pause and resume execution at any point in time would open the opportunity to create debugging tools like a stepping debugger.\n\nOne thing you can and many already do is **design your VM with a yield state**. But that doesn't really apply when implementing an X-to-JavaScript compiler or when compiling interpreters from other languages to JavaScript or when writing simple interpreters without really implementing a full blown VM.\n\n### Case study: BF Interpreter\n\nFor the following section I will use a [brainfuck](http://en.wikipedia.org/wiki/Brainfuck) interpreter to illustrate the problem and part of the solution.\n\n#### BF Interpreter","metadata":{"id":80}}],["81",{"pageContent":"For the following section I will use a [brainfuck](http://en.wikipedia.org/wiki/Brainfuck) interpreter to illustrate the problem and part of the solution.\n\n#### BF Interpreter\nThe function `bf` takes a string made of characters representing a BF program and runs it. You do not need to know what all the operations in the BF interpreter are but note that the input command `,` asks for user input.\n\n    // Adapted from http://code.google.com/p/jslibs/wiki/JavascriptTips\n    function bf (code) {\n      var codeLength = code.length\n\n        // Code pointer\n        , cp = 0\n\n        // Data pointer\n        , dp = 0\n\n        // Tape.\n        , m = []\n\n    // Loop start and end positions.\n        , loopIn = {}\n        , loopOut = {}\n\n    // Match [].\n        , stack = [];\n\n      // Register loop jumps\n      for (var cp = 0; cp < codeLength; cp++) {\n        if (code[cp] == '[')\n          stack(cp);\n        else if (code[cp] == ']')\n          loopOut[loopIn[cp] = stack()] = cp;\n      }\n\n    // Execute.\n      for (var cp = 0; cp < codeLength; cp++) {\n        switch(code[cp]) {\n          case '>':\n            dp++;\n            break;\n          case '<':\n            dp--;\n            break;\n          case '+':\n            m[dp] = ((m[dp]||0)+1)&255;\n            break;\n          case '-':\n            m[dp] = ((m[dp]||0)-1)&255;\n            break;\n          case '.':\n            console.log(String.fromCharCode(m[dp]));\n            break;\n          case ',':\n            m[dp] = prompt('input').charCodeAt(0)||0;\n            break;\n          case '[':\n            m[dp]||(cp=loopOut[cp]);\n            break;\n          case ']':\n            cp = loopIn[cp]-1;\n            break;\n        }\n      }\n    }","metadata":{"id":81}}],["82",{"pageContent":"break;\n          case '[':\n            m[dp]||(cp=loopOut[cp]);\n            break;\n          case ']':\n            cp = loopIn[cp]-1;\n            break;\n        }\n      }\n    }\n\nNow the above is a **synchronous** BF interpreter written in JavaScript and it uses `prompt` for input (`,`) which is the browser's native blocking stdin. Loading it in the main browser UI thread would work, however, running large BF programs would cause it to block and hang your tab or browser. Loading it in a Web Worker would not work either because Workers do **not** have access to the `window` obect.\n\n#### CPS'ed BF interpreter\n\nWe can try fixing the interpreter by making the input operation a non-blocking call that takes a callback to continue the program after input was recieved from the user from the UI thread, via the Web Worker message API. let us assume this has been already implemented for us and we can use: `console.input`.\n\nYou would quickly notice that having an asynchrounous operation is infectious and it would force us to restructure our program into a [CPS](http://en.wikipedia.org/wiki/Continuation-passing_style) style.\n\n_Note that This could be further simplified but it's left to demonstrate the point._\n\n    function bf (code) {\n      var codeLength = code.length\n        , i = 0, cp = 0, dp = 0\n        , loopIn = {}, loopOut = {}, m = {}\n        , stack = [];\n\n      for (var cp = 0; cp < codeLength ; cp++) {\n        if (code[cp] == '[')\n          stack.push(cp);\n        else if (code[cp] == ']')\n          loopOut[loopIn[cp] = stack.pop()] = cp;\n      }\n\n      var ops = {\n        '>': function (cont) {\n          dp++;\n          cont();\n        }\n      , '<': function (cont) {\n          dp--;\n          cont();\n        }\n      , '+': function (cont) {\n          m[dp] = ((m[dp]||0)+1)&255;\n          cont();\n        }\n      , '-': function (cont) {\n          m[dp] = ((m[dp]||0)-1)&255;\n          cont();\n        }\n      , '.': function (cont) {\n          console.log(String.fromCharCode(m[dp]));\n          cont();","metadata":{"id":82}}],["83",{"pageContent":"}\n      , '-': function (cont) {\n          m[dp] = ((m[dp]||0)-1)&255;\n          cont();\n        }\n      , '.': function (cont) {\n          console.log(String.fromCharCode(m[dp]));\n          cont();\n        }\n      , ',': function (cont) {\n          console.input(function (data) {\n            m[dp] = data.charCodeAt(0) || 0;\n            cont();\n          });\n        }\n      , '[': function (cont) {\n          m[dp]||(cp=loopOut[cp]);\n          cont();\n        }\n      , ']': function (cont) {\n          cp = loopIn[cp]-1;\n          cont();\n        }\n      };\n\n      function noop () {}\n\n      function runNext () {\n        cp++;\n        if (cp < codeLength) {\n          (ops[code[cp]] || noop)(runNext);\n        }\n      }\n      cp = -1;\n      runNext();\n    }\n\nNotice how every function in the system receives a callback function which is responsible for continuing the program. The callback maybe called with values that would've rather been return values. In our case, there exist no need for return values because state is encapsulated within the `bf` function closure.\n\nBy doing so **We eliminated the need for a JavaScript runtime call stack**, as each function would be responsible for continuing the execution of the program. Which means each function has the power and ability to stop the execution (maybe wait for an event to happen) and continue at a later time. Which I think is freeing.\n\n#### Blow it up\n\nEven-though we don't need an actual call stack anymore because every function call in our program is the last statement in it's caller function that would be responsible for continuing it's program after it finishes executing. However we are still bound to the runtime's call stack, that would be exhausted as soon as we try to run a non-trivial BF program.","metadata":{"id":83}}],["84",{"pageContent":"Luckily in functional programming there is a technique called trampolining that would help minimize the call stack size needed to run programs written in CPS. It works by having a loop that is responsible for calling the program's functions that would in turn return a continuation function to be executed by the same loop.\n\n    function bf (code) {\n      var codeLength = code.length\n        , i = 0, cp = 0, dp = 0\n        , loopIn = {}, loopOut = {}, m = {}\n        , stack = [];\n\n      for (cp = 0; cp < codeLength ; cp++)\n        if (code[cp] == '[') stack.push(cp);\n        else if (code[cp] == ']') loopOut[loopIn[cp] = stack.pop()] = cp;\n\n      var ops = {\n        '>': function () {\n          dp++;\n          return runNext;\n        }\n      , '<': function () {\n          dp--;\n          return runNext;\n        }\n      , '+': function () {\n          m[dp] = ((m[dp]||0)+1)&255;\n          return runNext;\n        }\n      , '-': function () {\n          m[dp] = ((m[dp]||0)-1)&255;\n          return runNext;\n        }\n      , '.': function () {\n          console.log(String.fromCharCode(m[dp]));\n          return runNext;\n        }\n      , ',': function () {\n          return function () {\n            console.input(function (data) {\n              m[dp] = data.charCodeAt(0) || 0;\n              run(runNext);\n            });\n          };\n        }\n      , '[': function () {\n          m[dp]||(cp=loopOut[cp]);\n          return runNext;\n        }\n      , ']': function () {\n          cp = loopIn[cp]-1;\n          return runNext;\n        }\n      };\n\n      function noop () {}\n\n      function runNext () {\n        cp++;\n        if (cp < codeLength)\n          return (ops[code[cp]] || noop)();\n      }\n\n      function run (cont) {\n        // Trampoline.\n        while (typeof cont === 'function') {\n          cont = cont();\n        }\n      }\n\n      cp = -1;\n      run(runNext);\n    }\n\n\n#### A glimpse into the future","metadata":{"id":84}}],["85",{"pageContent":"// Trampoline.\n        while (typeof cont === 'function') {\n          cont = cont();\n        }\n      }\n\n      cp = -1;\n      run(runNext);\n    }\n\n\n#### A glimpse into the future\n\nThings should not be this hard. JavaScript must grow as a language to allow constructs that makes it easier to write asynchronous programs. In addition to the web finally realizing the dream of being the application platform, JavaScript also plays a strong role in evented-io server programming which had proven to be quite efficient.\n\nLet us take a look at using [generators](http://wiki.ecmascript.org/doku.php?id=harmony:generators) to emulate coroutines that will land in the next version of JavaScript, ES Harmony. The following example is written using the excellent [task.js](http://taskjs.org/) library:\n\n    function bf (code) {\n\n      // Create a task that could yield.\n      task.spawn(function () {\n        var codeLength = code.length\n          , i = 0, cp = 0, dp = 0\n          , loopIn = {}, loopOut = {}, m = {}\n          , stack = [];\n\n        for ( var cp = 0; cp < codeLength ; cp++ )\n          if ( code[cp] == '[' )\n            stack.push(cp);\n          else if ( code[cp] == ']' )\n            loopOut[loopIn[cp] = stack.pop()] = cp;\n\n        for (var cp = 0; cp < codeLength && i < 100000; cp++, i++) {\n          switch(code[cp]) {\n            case '>':\n              dp++;\n              break;\n            case '<':\n              dp--;\n              break;\n            case '+':\n              m[dp] = ((m[dp]||0)+1)&255;\n              break;\n            case '-':\n              m[dp] = ((m[dp]||0)-1)&255;\n              break;\n            case '.':\n              console.log(String.fromCharCode(m[dp]));\n              break;\n\n            // Yield to the event loop until we get the user input.\n            case ',':\n              m[dp] = yield console.input();\n              break;\n            case '[':\n              m[dp]||(cp=loopOut[cp]);\n              break;\n            case ']':\n              cp = loopIn[cp]-1;\n              break;","metadata":{"id":85}}],["86",{"pageContent":"break;\n            case '[':\n              m[dp]||(cp=loopOut[cp]);\n              break;\n            case ']':\n              cp = loopIn[cp]-1;\n              break;\n          }\n        }\n     });\n    }\n\nWhat's more, ES Harmony will also include tail call optimization.\n\n### A Shameless Hack\n\nTo get input on the emscripten compiled languages on our [repl.it](http://repl.it) project we considered using a CPS code transformer like the above-mentioned list but the approach failed for the following reasons:\n\n1. Compiling language interpreters to JS using [emscripten](https://github.com/kripken/emscripten/wiki) generates [lots of JavaScript](https://raw.github.com/replit/empythoned/master/dist/python.opt.js) which when ran against these compilers takes forever.\n2. JavaScript is not [tail call optimized](http://en.wikipedia.org/wiki/Tail_call); and this is bad because compiling to CPS means functions would be used for control flow, a whole lot of them. However I think some transformers do use clever tricks to minimize call stack.\n3. Performance hit which is for the most part from the cost of creating and invoking a lot of functions.\n4. Adding an additional compile step makes it even harder to debug.\n\nSo we took the easy way out and hacked the hell out of it. After thinking for a while about the problem of what in essence is resource sharing across threads which is prohibited in browsers for the added complexity and the security concerns of the web. I had a crazy idea of using the Web SQL Database to share data between the Worker and the UI thread since it has a synchronous worker API. While I'm sure this hack doesn't make threads share memory but is fast enough for stdin. The busy loop count (100000000 in the code below) is tuned and maybe tuned further to get faster results.\n\nWhen the language interpreter in a Web Worker hits an input operation it will stop execution, ask the main thread for input via a message, and busy loop while polling for changes in a Web Database table:","metadata":{"id":86}}],["87",{"pageContent":"var DB = self.openDatabaseSync('replit_input', '1.0', 'Emscripted input', 1024);\n    var input = function () {\n      self.postMessage('stdin');\n      var t = null;\n      DB.transaction(function (tx) {t=tx});\n      var i, res;\n      while (!(res = t.executeSql('SELECT * FROM input').rows).length) {\n        for (i = 0; i < 100000000; i++);\n      }\n      t.executeSql('DELETE FROM input');\n      return res.item(0).text;\n    };\n\n\nAnd in the UI thread:\n\n    worker.addEventListener('message', function (e) {\n      if (e.data === 'stdin') {\n        console.input(function (data) {\n          DB.transaction(function () {\n            tx.executeSql('INSERT INTO input (text) VALUES (' + data + ')', []);\n          });\n        });\n      } else {\n        // Do other stuff\n      }\n    }, false);\n\nThe Web SQL Database spec is deprecated for the IndexedDB which has not fully landed in browsers yet but this approach, in theory, should work with it.\n\n### Why all this?\n\nI ran into these issues during my work on [repl.it](http://repl.it) last year. And my recent on and off work on allowing debugging JavaScript in the browser at [codecademy](http://codecademy.com).","metadata":{"id":87}}],["88",{"pageContent":"{\n  \"title\": \"Kierkegaard and Entrepreneurship\",\n  \"date\": \"04/14/2016\"\n}\n---\nEarlier this year I spent a lot of time thinking about what \"impact\" means to\nme. In the tech world, we use it to say that our work matters and that we're\n\"making a dent in the universe\". But it feels empty most of the time. I came to\nthe conclusion that \"impact\" has no meaning to me when I'm easily\nreplaceable. No matter how many people's lives I'm touching with software that\nI've written, if I'm not bringing something unique -- a part of myself -- into\nmy work then I'm not doing something worth doing.\n\nLast month, on the [Philosophize This\npodcast](https://www.youtube.com/watch?v=1yPbakzvrx0), I heard about\nKierkegaard's work on despair and found it to be a weirdly good articulation of\nmy thoughts on work fulfillment and progress. He was a 19th century Danish philosopher\nand wrote primarily on psychology and the human condition. Although he viewed\nmost things through the lens of theology, it's common -- and works pretty well\n-- to have a secular reading of his work.\n\nHe viewed the self as having two opposing aspects. One that he called the\ninfinite and the other is the finite. He described the relationship between them\nas dialectical -- which means that one cannot exist without the other and that\nthere is constant tension between them. Furthermore, there exists a \"synthesis\",\na point which we can balance these contradicting forces.\n\n## The infinite and finite\n\nThe finite aspect of the self deals with worldly facts about the person. It is\nthe condition in which one exists. Your name, sex, race, and even things that\nare more general like the social, political, and cultural environment that you\nfind yourself in. The finite is concerned with necessity as opposed to\npossibilities -- things that are largely predetermined.\n\nThe infinite is the aspect of the self that deals with abstractions, different\nmeanings, and possibilities. And imagination is its primary device. The","metadata":{"id":88}}],["89",{"pageContent":"The infinite is the aspect of the self that deals with abstractions, different\nmeanings, and possibilities. And imagination is its primary device. The\ninfinite is concerned with what the self can become as opposed to its current\nstate. It opens up opportunities to free oneself from the rigidity of finite\nexistence.\n\nIf someone lacked either aspects of themselves, Kierkegaard thought they'd be in\na state of despair -- they can lose themselves in the infinite or in the finite.\n\n## The finite is the default\n\nThere is generally a set path in life for people to follow. Most choices are\nmade for us, and someone can exist purely within the tracks that were\nmanufactured for them by their parents, culture, and society. After we graduate\nand become adults we go to work and get plugged into the place that is deemed\nmost fit for us and contribute our small part as cogs in the machine.\n\n>Just by losing himself this way, such a man has gained an increasing capacity\n>for going along superbly in business and social life, indeed, for making a\n>great success in the world. Here there is no delay, no difficulty with his self\n>and its infinitizing; he is as smooth as a rolling stone, as courant [passable]\n>as a circulating coin. He is so far from being regarded as a person in despair\n>that he is just what a human being is supposed to be.\n\nBob is an engineer because his father was an engineer. He uses vim because\neveryone at work uses vim. He takes the designs passed to him by his product\nmanager and implements them 100% according to spec. He never questions\nanything. He is moved by his managers from team to team without any\nobjections. When asked why he's doing what he's doing, he parrots what his\nmanager told him about the importance of the mission and how he fits in. He is\nas passable as a coin.\n\n>by getting engaged in all sorts of worldly affairs, by becoming wise about how\n>things go in this world, such a man forgets himself, forgets what his name is","metadata":{"id":89}}],["90",{"pageContent":"as passable as a coin.\n\n>by getting engaged in all sorts of worldly affairs, by becoming wise about how\n>things go in this world, such a man forgets himself, forgets what his name is\n>(in the divine understanding of it), does not dare to believe in himself, finds\n>it too venturesome a thing to be himself, far easier and safer to be like the\n>others, to become an imitation, a number, a cipher in the crowd.\n\nBob is so easy to replace. He provides nothing to his team, work, society, or\nfamily that is unique to himself. He'd rather lose himself in the crowd, become\nindistinguishable, than be himself.\n\n>it is dangerous to venture. And why? Because one may lose. But not to venture\n>is shrewd. And yet, by not venturing, it is so dreadfully easy to lose that\n>which it would be difficult to lose in even the most venturesome venture, and\n>in any case never so easily, so completely as if it were nothing ...one’s self.\n\nBob should know that he stands to lose more by accepting the default. He risks\nlosing himself by taking the seemingly safe and secure choice. Let alone dream,\nimagine, or take the time to figure out what he really cares about in this\nworld.\n\n## Lost in the infinite\n\nEngaging in the infinite aspect of the self is important to balance out the\nfinite. To come up with new ideas, new understanding of the world, and new\nmeaning. In other words, to become something more. But unless this process is\ngrounded in reality (the finite), the self may risk becoming too abstract,\nfantastic, unreal.\n\nFor example, if Bob loves humanity so much it makes him weep, it's just his boss\nhe cannot stand. He has been carried away into the abstract, the infinite, and\nhave lost his relation to the finite, the concrete. He holds an abstract and\n[free-floating belief](https://wiki.lesswrong.com/wiki/Free-floating_belief)\nthat's not influencing his behavior.\n\nSimilarly a person may get caught up in abstract knowledge that never makes its\nway back to the finite world. For example, Bob likes to learn about Machine","metadata":{"id":90}}],["91",{"pageContent":"that's not influencing his behavior.\n\nSimilarly a person may get caught up in abstract knowledge that never makes its\nway back to the finite world. For example, Bob likes to learn about Machine\nLearning, he accumulates a whole lot of knowledge on the subject but never gets\na chance to apply it at his job. Bob has lost himself in pursuing this knowledge\nbecause he is not able to benefit himself or the world from it.\n\nFinally, and more relevant to our discussion, is being lost in \"willing\" (or\nwishing). For example, Bob wishes the world to move to renewable energy. But he\nnever takes an action towards that end. This goal is so out of his control that\nthere seems to be nothing he can do about it. He never grounds his imagination\nin the finite. He doesn't take the time to come up with the smallest possible\ntask that can be a step towards achieving his desired state.\n\n>the will does not constantly become concrete in the same degree that it is\n>abstract, in such a way that the more it is infinitized in purpose and\n>resolution, the more present and contemporaneous with itself does it become in\n>the small part of the task which can be realized at once, so that in being\n>infinitized it returns in the strictest sense to its self, so that what is\n>farthest from itself (when it is most infinitized in purpose and resolution) is\n>in the same instant nearest to itself in accomplishing the infinitely small\n>part of the task which can be done even today, even at this hour, even at this\n>instant.\n\n\n## Entrepreneurship\n\nI view entrepreneurship as means of reconciling the infinite and finite. You\nventure into your imagination, gather knowledge, and dream about a better\nworld. But you have to bring some of that back to earth. You take a step -- no\nmatter how small -- towards your imagined world in the real world.\n\nThis is not a one time thing, it's a recursive process. If your imagined\npossibilities became real then that's your new \"finite\". The process restarts\nand that's how we make progress.","metadata":{"id":91}}],["92",{"pageContent":"This is not a one time thing, it's a recursive process. If your imagined\npossibilities became real then that's your new \"finite\". The process restarts\nand that's how we make progress.\n\nThis notion of progress comes from [Hegelian\ndialectic](https://en.wikipedia.org/wiki/Dialectic#Hegelian_dialectic). When\ntraversing dialectical opposites like the infinite and finite, and are finally\nable to reconcile the conflict and arrive at common truths. This becomes our new\nreality and the process restarts.\n\nI see this as the perfect framework for the work we do in technology. There is\nalways a tension between what is and what could be. There are people and\norganizations who are stuck in the status quo (the finite). On the other hand,\nthere are folks who are stuck in the what could be without any actionability\n(the infinite).\n\nTaking a step into the infinite could be hard, but the hardest thing of all is\nbringing something back to the finite. The real art is coming up with the\nsmallest possible task that can be done here and now.\n\nTake Elon Musk for example, like Bob, he wants the world to move to renewable\nenergy but that's such a big and daunting task that seems unapproachable. Elon\ncould've been lost in the infinite. Instead he took a step towards doing\nsomething within his reach. He started an electric super-car company. It's\ncounter-intuitive how this is relevant as outlined in his [master\nplan](https://www.teslamotors.com/blog/secret-tesla-motors-master-plan-just-between-you-and-me)\nin 2006:\n\n>The strategy of Tesla is to enter at the high end of the market, where\n>customers are prepared to pay a premium, and then drive down market as fast as\n>possible to higher unit volume and lower prices with each successive model.\n\nTen years later, Tesla is shipping the first mass-market electric car and\ninnovating in battery technology. Making real progress towards a renewable\nenergy world.\n\nNot everyone can be Elon Musk, but we all can be entrepreneurial in our own","metadata":{"id":92}}],["93",{"pageContent":"innovating in battery technology. Making real progress towards a renewable\nenergy world.\n\nNot everyone can be Elon Musk, but we all can be entrepreneurial in our own\nsense. I think the most important thing is to always make progress. Don't get\nstuck in the weeds for too long. Imagine a better world, and take a small step\ntowards it.","metadata":{"id":93}}],["94",{"pageContent":"{\n  \"title\": \"Leapfrogging the IDE\",\n  \"date\": \"11/11/2018\"\n}\n---\n\nProgress in technology happens incrementally; it's hard to imagine inventing the cellphone without inventing landline telephones first. However, adoption need not respect the incremental nature of innovation. Advanced technology is often easier to adopt because it requires less infrastructure.\n\nThe classic example of this is the astonishing adoption of mobile in Africa especially relative to landline:\n\n![mobile vs fixed in africa](/public/images/africa.jpg)\n\nSometime last year we discovered that some users use [Repl.it](https://repl.it) -- an online REPL and development platform -- as their primary programming tool. This seems surprising at first: other than for learning, why would anyone use a more limited tool over a more mature and flexible one?\n\nIt turns out this was the wrong question to ask. A better one would be: \"if someone had already learned to code on an online REPL and it serves their needs then why would they want to invest in a local setup?\". Because they'd started with Repl.it, they need a compelling reason to install an IDE locally and possibly have to invest in buying a more expensive device (say from a Chromebook to a Mac).\n\nIn fact, this is the exact question our users are [asking](https://repl.it/talk/ask/Can-Replit-substitute-a-code-editor-like-PyCharm/6245): why do I have to switch?\n\n<hr/>\n![replit as primary coding](/public/images/primary.png)\n<hr/>\n\nThis way of formulating questions better explains the leapfrogging phenomenon in general: \"why do I have to invest in a PC if my tablet/mobile handles all my computing needs?,\" \"why do I need a credit-card if I can just use my mobile payment wallet?\" etc.\n\nIn our experience, even the people that make the switch are often dissatisfied with the result -- wishing VSCode  worked just like Repl.it:\n\n<hr/>\n![vscode user not happy](/public/images/vscodereplit.png?x=1)\n<hr/>","metadata":{"id":94}}],["95",{"pageContent":"<hr/>\n![vscode user not happy](/public/images/vscodereplit.png?x=1)\n<hr/>\n\nWith programmers growing up today being used to instant, interactive, globally accessible programming tools like Repl.it, Jupyter Notebooks, serverless (pay-as-you-go) compute, and others, it doesn't seem so outlandish to imagine a post-IDE world.\n\n_This blog is built and hosted with Repl.it: [amasad.me/__repl](/__repl)_","metadata":{"id":95}}],["96",{"pageContent":"{\n  \"title\": \"Implementing Bret Victor's Learnable Programming\",\n  \"date\": \"01/10/2014\",\n  \"hidden\": \"true\"\n}\n---\n\nA few days ago I [released debug.js](http://amasad.me/2014/01/06/building-an-in-browser-javascript-vm-and-debugger-using-generators/) and I breifly touched on the educational applications of the library. This morning, I had a couple of hours before going to work so I decided to implement the “Make flow visible” example from Bret Victor’s [‘Learnable Programming’ paper](http://worrydream.com/LearnableProgramming/) (Feel free to change the code):\n\n<iframe width=\"130%\" height=\"300px\" src=\"https://amasad.github.io/learnable-programming-demo/\" style=\"margin-left: -15%; border: 1px solid #EBF2F6;\"></iframe>\n\n[_premalink_](https://amasad.github.io/learnable-programming-demo/)\n\nHere is how it’s done:\n\n1. Given a program, step through it once using [debug.js](https://github.com/amasad/debugjs) to get the execution flow info\n2. Plot the execution flow using [d3](http://d3js.org/)\n3. Whenever the user scrubs through the plot, rerun the steps up to the step index that the user has the pointer over.\n4. Repeat from 1 when the editor code change\n\nThe entire thing is ~250 LOCs and is [up on Github](https://github.com/amasad/learnable-programming-demo).","metadata":{"id":96}}],["97",{"pageContent":"{\n  \"title\": \"Beware the Metagame\",\n  \"date\": \"11/11/2018\"\n}\n---\n\nHave you ever wondered why the less \"pure\" a scientific field is, the less progress we've made?\n\n![](https://imgs.xkcd.com/comics/purity.png)\n\nThe more abstract a subject is, the easier it is to reason about and therefore make progress on. That's why we've made a lot more progress in math and physics than any other subject. The problem became more salient recently as some of the perceived scientific progress made in the less pure sciences -- psychology, medicine, economics -- is being nullified in a widespread [\"replication crisis\"](https://en.wikipedia.org/wiki/Replication_crisis) where many scientific studies are failing to reproduce.\n\nOne way to get more abstract is to take the meta view of a subject. Programming Language Theory (PLT), for example, is the study of programming languages and their features and characteristics. While a lot of progress has been made in PLT, rarely does this translates into features in languages used in the real world. There's often decades-long gap for some form of a PLT idea to make to the industry because programming is messy and complicated and full of human problems that PLT researchers don't bother studying.\n\nI have a lot more respect for people who stick to the base game, avoiding getting sucked into the much more comfortable metagame. While we need researchers and scientists to go meta, they should remain tethered to the base-game and work closely with practitioners.","metadata":{"id":97}}],["98",{"pageContent":"I've first noticed this problem in the startup world where you see famous people that sell books, talk at conferences, and tweet advice to founders, but when you take a closer look, they've never done much founding themselves. They're like the \"entrepreneurship\" professor that never built a business. They're experts in the metagame -- they're polished speakers, engaging writers, and thought-leadering tweeters. The problem, though, is that they're not judged by customers, the market, or nature, instead they're judged by their peers. I call them metapreneurs.\n\nThis is an instance of what Nassim Taleb calls \"The Expert Problem\" -- when other experts and meta-experts judge experts. Eventually the lack of contact with reality will corrupt the field. In the sciences, that lead to the replication crisis and the [absurdities](https://areomagazine.com/2018/10/02/academic-grievance-studies-and-the-corruption-of-scholarship/) of the humanities.\n\nIf you find yourself going to a lot of conferences, opining too much on the latest fad in your field, and talking more about doing the thing than doing the job itself, then you, my friend, are getting sucked into the metagame.","metadata":{"id":98}}],["99",{"pageContent":"{\n  \"title\": \"Fake Minimalism\",\n  \"date\": \"01/12/2017\"\n}\n---\n\nIt's now fashionable to call yourself a \"minimalist\", but is that merely about not having things? I remember going to school everyday carrying nothing at all, no bag, no books, no pen, nothing -- I was a slacker. If I needed a\npen, say for a pop quiz, I had to borrow one quickly. In other words, I depended\non my classmates to provide the pen. Is this really minimalism? Yes, I didn't need the material possession of a pen, but I had to depend on others to provide the pen.\n\nIn Silicon Valley, where your company feeds you, washes your clothes, and supply your\nsocial life, are you a minimalist for not having a kitchen, a washer, or friends\noutside of work? Defined this way, a baby is the ultimate minimalist, after all\nit has zero possessions and relies on the mother for everything.\n\nI think self-sufficiency needs to be taken into account when evaluating\nminimalism -- even if it's at the cost of having more material possessions. For\ninstance, buying a hair clipper and spending a bit of time learning how to\ncut my own hair is definitely more minimal than relying on a barber that I have\nto schedule with, pay to, and go to (that can get sick, go on vacation, or\nmove away).\n\nA similar thing happens in software all the time -- is it more minimal:\n\n- to use a service than it is implement your own?\n- to take on a software package dependency than it is to write your own library?\n- to have users always augment your app with some other app for a missing\n  feature than it is to add it?\n\nA Fake Minimalist will go with the former for every case.\n\nIn his [\"Spec-ulation\" talk](https://youtu.be/oyLBGkS5ICk?t=23m), Rich\nHickey brought this point home by defining software growth as (my emphasis):\n\n- Accretion: to provide more functionality.\n- __Relaxation: to require less (dependencies, inputs, etc).__\n- Fixation: to fix bugs.","metadata":{"id":99}}],["100",{"pageContent":"{\n  \"title\": \"50th Anniversary of The Mother of All Demos\",\n  \"date\": \"12/9/2018\"\n}\n---\n\nI was asked to give a toast in celebration of the 50th Anniversary of [The Mother of All Demos](https://en.wikipedia.org/wiki/The_Mother_of_All_Demos) so I spent some time reflecting on Engelbart's work. \n\nMost of the commentary on his work is focused on the technical achievements and the impressive feats of engineering that's genuinely 50 years ahead of its time. Just this week we, at Repl.it, we introduced Multiplayer -- the ability to code together with anyone in the world -- and although we have the benefits of modern tooling and infrastructure it was still hard work\n\nA more interesting question to ask would be: \"What's Douglas Englebart's generation function?\" In other words, what ideas, themes, and philosophies that have inspired his groundbreaking work?\n\nI didn't have much time to work with, so I had to go mostly of off memory -- this question requires a more in-depth examination. However, I've identified three themes that are worth studying. \n\n## Computers as mind extenders\n\nEngelbart and his contemporaries saw computers as first and foremost tools for mind extension. Something we can use to augment our intellect to take on more and do more. \n\n>\"By augmenting human intellect we mean increasing the capability of man to approach complex problem situation to gain comprehension to suit his particular needs and to derive solutions to problems. Increased capability in this respect is taken to mean mixture of the following: more rapid comprehension, better comprehension, the possibility of gaining useful degree of comprehension in situation that previously was too complex, speedier solutions, better solutions and the possibility of finding solutions to problems that before seemed insoluble.\" -- [Augmenting Human Intellect](https://www.dougengelbart.org/pubs/papers/scanned/Doug_Engelbart-AugmentingHumanIntellect.pdf)","metadata":{"id":100}}],["101",{"pageContent":"This sits in stark contrast to today's computers as the driver for the attention economy. Where computers as seen as entertainment devices at best. A more cynical reading of the way governments and ad-based businesses use computers would lead you to believe they're devices of control.\n\n## Evolutionary design\n\nTo understand Engelbart it's important to not view him as a lone inventor genius a la Tesla that predicted what computers could do 50 years ahead of his time. In his own words you can see that they took a much more exciting approach to discovery:\n\n>\"We're pursuing this monstrous goal by building and trying *empirically* -- we approach evolutionary-wise because we feel it's a whole system problem [...] it's much more than these computer tools\"\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/agdPQuFr0yg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Bootstrapping\n\n\"Bootstrapping\" is another recurring theme in Engelbart's work. I think of it as \"increasing returns\":\n\n- You build tools, and then the tools you built helps you create better tools. \n- Tools make you smarter, and you make better tools that make you smarter... ad nauseam. \n- Tools increase productivity which makes us wealthier which in turn allows us to invest in more and better tools.\n\n## Conclusion\n\nIt's worth noting that what seemed to drive Engelbart was his concern for the unique challenges an exponentially changing world brings. He believed that [\"boosting Collective IQ\"](https://www.dougengelbart.org/pubs/papers/scanned-original/2004-augment-133319-augmenting-society's-collective-iqs.pdf) is imperative for the flourishing of humanity.\n\nIn Silicon Valley, at least in my circles, there's a general feeling that we need to return to the thinking of computers as \"bicycles for the mind.\" And I hope we do.","metadata":{"id":101}}],["102",{"pageContent":"In Silicon Valley, at least in my circles, there's a general feeling that we need to return to the thinking of computers as \"bicycles for the mind.\" And I hope we do.\n\n_Thanks to Figma and Dylan Field for inviting me to [reflect](https://www.meetup.com/Figma-SF/events/cwsnhqyxqbmb/) on this awesome day._","metadata":{"id":102}}],["103",{"pageContent":"{\n  \"title\": \"Civilizational Primitives\",\n  \"date\": \"11/16/2022\"\n}\n---\n\nAt the dawn of civilization, with the introduction of the agricultural revolution, humans needed to coordinate in larger numbers so _the hierarchy_ emerged as the primary organizing tool. People organized into pyramid-like structures with ranks and different entitlements and responsibilities. This structure proved useful and spread to apply to every aspect of civilization: we had kings and peasants, owners and serfs, clergy and laymen. \n\nWith the industrial revolution, we needed ways to coordinate in larger numbers and a more decentralized manner. The _assembly line_ emerged as the basic civilizational primitive of this era. Every node — be it a person, a company, or a nation — was hyper-specialized and produced one thing with a standard interface to handle transactions between nodes. While the hierarchy never disappeared, many aspects of society were remade in the shape of the assembly line. Children go through school one grade at a time, the economy is made of supply chains and consumer-producer pairs, money is printed by the Fed and filtered to the economy through a chain of financial institutions. Even software is built by layering on components on a stack going through different stages and pipelines.","metadata":{"id":103}}],["104",{"pageContent":"Today, I believe we are going through another major transition: The Information Revolution. While it’s become out of fashion to point this out, it’s undeniable that civilization is being rebuilt. So what is this era’s civilizational primitive? It seems clear to me it’s _the network_. Unlike the pyramid and the supply chain, the network topology requires less coordination; it’s emergent, self-improving, and self-organizing. The radio, telephone, and the internet are straightforward examples of networks. But if you look deeply, you’ll see that networks are infecting almost everything else: money flows through payment networks (and Bitcoin is bootstrapping money on the network), startups and open-source proved that flatter network-like structures could be a superior way to work, and even software is changing to be built through networks of packages, APIs, and cloud computing. And while schools remain stubbornly unchanged, innovation at the edges resembles a network: kids learn to code and make on networks like Scratch and [Replit](https://replit.com), and they learn how to solve problems on networks like [Synthesis](https://synthesis.is). How will networks change government and politics? Arguably politics is already changed. Today policy is made not top-down but through a decentralized network of universities, think tanks, donors, and politicians. [The Network State](https://thenetworkstate.com) is an attempt to describe the future of governance. \n\nWhile the network, like its predecessors, is a neutral tool, I believe it creates a slightly more free world. Strict hierarchies meant that people were stuck in castes and bad luck. The assembly line reduced people to cogs in a giant machine. While the network affords people more freedom to self organize and choose which networks to affiliate with.","metadata":{"id":104}}],["105",{"pageContent":"{\n  \"title\": \"Why I'm Excited About Object.observe\",\n  \"date\": \"03/16/2014\",\n  \"hidden\": true\n}\n---\n\nObject.observe is one of the newer additions to JavaScript that will be landing in [Chrome soon](https://groups.google.com/forum/#!topic/v8-users/aeSFJK1L5n4). It lets you listen to changes on objects and their properties. I think it has many interesting applications and here are the few that I'm excited about the most.\n\n## Basic usage\n\nBefore we dive into the applications of `Object.observe`, let's take a second to look at a basic usage example.\n\n```javascript\nvar o = {};\n\nObject.observe(o, function(changes) {\n  // This callback runs asynchronously and aggregates the changes that happened\n  // in the previous execution turn into `changes` param.\n  changes.forEach(function(change) {\n    console.log(change.type, change.name, change.oldValue);\n  });\n});\n\no.foo = 1; // add, 'foo', undefined\no.foo = 2; // update, 'foo', 1\ndelete o.foo; // delete, 'foo', 2\n```\n\nYou can start playing with it in Chrome today by going to 'about:flags' and enabling the *Enable Experimental JavaScript* flag. For more usage examples and API documentation refer to the to the [Harmony wiki](http://wiki.ecmascript.org/doku.php?id=harmony:observe).\n\n## Two-Way Data Binding\n\nAlso known as the holy grail of JavaScript MVC frameworks. The ability to bi-directionally synchronize your model and view without piling on mountains of code makes for easier to maintain code, lower payload size, and possibly faster applications. Without `Object.observe` we currently rely on:\n\n* wrapper objects (Backbone.Model, Ember.Object)\n* dirty checking (Angular)\n* getters and setters","metadata":{"id":105}}],["106",{"pageContent":"* wrapper objects (Backbone.Model, Ember.Object)\n* dirty checking (Angular)\n* getters and setters\n\nWith wrapper objects we lose interop with the plethora of JS libraries that are built to operate on plain objects and incur the cost of converting from and to plain objects when communicating over the network (or with other windows, web workers etc). On the other hand dirty checking can be expensive to perform and needs to be either performed via polling or restricting where and when we can operate on our data objects. Finally, getters and setters will only notify us of changes on the property level and not of the deletion and addition of properties on the parent object and requires a considerable amount of wiring to boot.\n\nFrameworks can start using `Object.observe` as a faster and simpler implementation while keeping the same API. However, once this lands on all browsers, I think most people will be more than happy to go back to using plain old JS objects without losing any of the power these frameworks provide.\n\n## Evented Programming\n\nEvery sufficiently advanced JavaScript library, framework, or application contains at least one implementation of an event emitter system. For example, if you use Backbone or Ember, you have the framework's implementation and also, jQuery's implementation on which both depend. This bloat hurts both the developer, having to deal with multiple similar implementations, and the user, having to download more data and using more bandwidth and battery life. `Object.observe` supports custom notifications via the `Object.getNotifier` API, which can be thought of as “triggering events” in the traditional event emitter implementation.\n\nHere is an example of triggering a ready event on an application controller.\n\n```javascript\nObject.observe(App.controller, onReadyCallbak, ['ready']);\n\n// Sometime later…\nObject.getNotifier(App.controller).notify({\n  type: 'ready'\n});\n```\n\n## Debugging","metadata":{"id":106}}],["107",{"pageContent":"```javascript\nObject.observe(App.controller, onReadyCallbak, ['ready']);\n\n// Sometime later…\nObject.getNotifier(App.controller).notify({\n  type: 'ready'\n});\n```\n\n## Debugging\n\nLast week I wrote about  [JavaScript debugging techniques](http://amasad.me/2014/03/09/lesser-known-javascript-debugging-techniques/) and how to -- among other things -- break on object property access to stop and take a look at what's changing certain properties on your objects. With `Object.observe`, we can get an idea of when and what changed on an object:\n\n```javascript\nObject.observe(someObject, function(changes) {\n  console.log('someObject changed', changes);\n});\n```\n\nUnfortunately, we won't be able to get a stack trace that points back to the code that made the change because the callback runs asynchronously, nonetheless, it should be very useful.\n\n## Other Resources\n\nIf you want to learn more, you might be interested in the following resources:\n\n* [The spec on the Harmony wiki](http://wiki.ecmascript.org/doku.php?id=harmony:observe).\n* [Rick Waldron's post on Object.observe](http://weblog.bocoup.com/javascript-object-observe/)\n* [Addy Osmani's talk on Object.observe](http://addyosmani.com/blog/the-future-of-data-binding-is-object-observe/).","metadata":{"id":107}}],["108",{"pageContent":"{\n  \"title\": \"What is Perfectionism and How to Cure It\",\n  \"date\": \"03/13/2016\"\n}\n---\n\n> My problem is that I'm a perfectionist\n> -- Everbody\n\nAs I finished writing the title for this post I thought about quitting. I didn't\nthink it was good and told myself that this is off to a bad start and it'll only\nget worse as I write more words. There is always an easy fallback to\nget out of doing hard work without feeling bad about it: \"I'm a perfectionist,\nand I can't possibly achieve perfection in this project so I'm going to quit altogether\".\n\nWhat was really going on here is that I realized that it's going to be harder\nthan what I imagined it would be, and I just didn't want to do the work. Just\nbeing lazy. Laziness is a simplification here and in this post I'll go over all the\nlayers that I've been able to debug in myself.\n\n### False dichotomies\n\nI often notice that before I throw my hands in the air and claim perfectionism I\npresent myself with a dichotomy: \"It's either that I finish this work and hit all\nmy goals or it's not valuable to anyone\". Here are some examples:\n\n* \"I don't think it's worth going to the gym today because I know I don't have\n  the time to go everyday and get six packs\"\n* \"I need to revamp my blog before I write my blog post and I don't have the\n  time to do all that now\"\n\nThe truth is that most things are still valuable even in there imperfect or\nunfinished form. For example, it's hard to argue with the effectiveness of the\npopular Minimum Viable Product approach to product development. You're able to\ndeliver value to people and at the same time test and iterate on your ideas.\n\nBack to our examples, going to the gym at any time no matter what the situation is will be\na categorically positive thing to do. And writing a blog post doesn't strictly\ndepend on your blog's design (I almost fell for this one the other day).\n\n### Decision fatigue\n\nAnother thing that I've detected in myself that would make me fallback on the\n\"I'm a perfectionist\" excuse is [decision","metadata":{"id":108}}],["109",{"pageContent":"### Decision fatigue\n\nAnother thing that I've detected in myself that would make me fallback on the\n\"I'm a perfectionist\" excuse is [decision\nfatigue](https://en.wikipedia.org/wiki/Decision_fatigue). You can get tired from\njust making decisions if you had to do so many of them while working on\nsomething.\n\nSay for example you want to tidy up your apartment. Since this is such a general goal, you'll be faced\nwith so many questions along the way: \"Should I fold my clothes like I always do\nor is it time reorganize my closet? Should I throw out the books I'm not using?\nShould I maybe give them away?\" and so on. Very soon you'll be tired just from\nanswering these questions without even doing much work. Then you'll see the\nnice and cozy excuse waiting for you: \"I'm such a perfectionist I can't even tidy up\nmy room!\".\n\n\n### Embarrassment\n\nPutting yourself and your work in the public requires a great deal of\ncourage. For probably some evolutionary survival reasons we tend to think about\nall the things that could go wrong. One of the strongest negative emotions that\nI get when I'm not certain about the quality of my work is the feeling of being\nembarrassed by it. That people much smarter than me will look at it and\nlaugh about how bad it is. That's almost never the case. I've written some\nreally silly posts and code and it rarely gets ridiculed. Even when it does happen,\nit's usually by people that I don't necessarily respect or look up to (see my\npost about on the [Stoic of Open\nSource](http://amasad.me/2016/01/13/the-stoic-of-open-source/) for an example of\nthis). That is not to\nsay that everything I do is perfect, in fact, I get really awesome constructive\nfeedback every time I release something.\n\nAnother tactic for avoiding embarrassment is not to\nover-promise. I'd go as far as to say you should not talk about your\nideas before verifying that they work (see my post about [idea\ngeneration](http://amasad.me/2016/03/09/john-carmack-on-idea-generation/)). Which","metadata":{"id":109}}],["110",{"pageContent":"ideas before verifying that they work (see my post about [idea\ngeneration](http://amasad.me/2016/03/09/john-carmack-on-idea-generation/)). Which\nreminds me of what [Tom](https://twitter.com/tomocchino) my manager (who manages\nprojects like React and Flow at Facebook) likes to say: \"under-promise, over-deliver\".\n\n### Confidence\n\nIf you aspire to do quality work you need to be able to trust in your abilities.\nOr at least that you would try really hard. Going back to the meta-example of writing this post. If I\nwere confident of my abilities to overcome any hardship that started with the\ntitle, I would keep going while knowing that I will rewrite this as many time as\nit takes to get it to good enough state.\n\nSo I would need to be confident of my ability to get close to the goal, and in\nmy ability to persevere and work hard enough to get there.\n\n### Curing perfectionism\n\nRecognizing these patterns in our behavior is a good first step in getting over\nthem. I had a lot of success with -- what I later discovered to be -- cognitive\nbehavioral therapy. [This is a good introduction](http://cbtsanfrancisco.com/cbt-is-for-hackers/) to the subject but we're\nmainly interested in the following methods:\n\n* Forced Activity\n* Exposure\n\nForced Activity is when you recognize a vicious cycle in your behavior and force\nyourself out of it. It's forced because you need to swim against the\ncurrent in order to break out. For example, if you noticed that you always start\nprojects but quit and claim perfectionism, then try to start the smallest project\npossible that is actually perfectible and finish it. If you have too many unread\nbooks and you stopped reading because you can't possibly finish all the books\nthen go throw them out (or delete everything on your kindle). Even if the action is a\nbit radical, do it to get you out of the cycle.\n\nExposure is when you tackle psychological pain by leaning into it. Start small\nwith something you fear and do more and more. If, for example, you're afraid of","metadata":{"id":110}}],["111",{"pageContent":"Exposure is when you tackle psychological pain by leaning into it. Start small\nwith something you fear and do more and more. If, for example, you're afraid of\npublishing code then start by publishing a gist of a program that does something useful\nand share it. Then slowly work your way up to sharing a library and finally to\ncontributing to large open source projects.\n\nUp until last year, I had a crippling  fear of public speaking and this method worked really well for\nme. Although I've spoken a few times before, every time I spoke the fear was\nworse than the one before. However, after committing\nto the Exposure method I started small by\n[speaking](https://twitter.com/brooklyn_js/status/436669188103344128) at a\nfriendly and welcoming meetup in NYC called BrooklynJS. And then worked my way\ntowards a larger conference and spoke at\n[EmpireJS](https://www.youtube.com/watch?v=rcjUR4icvoQ). I then started really\nleaning into it and even performed at a [story telling\nshow](https://www.facebook.com/events/311252482399585). And finally completely\nimprovised a couple of meetup talks. I'm now almost fearless when it comes to public\nspeaking.\n\nIn conclusion I think that perfectionism is mostly a thin veil hiding a\nmultitude of insecurities, fears, and logical fallacies. And it's something we\nneed to face in order to reach self-actualization.\n\n----------------------------------------------\n\n*Thanks to [Haya Odeh](https://twitter.com/hayaodeh) for reviewing this post and\n providing feedback, examples, and refining many of the ideas mentioned here.*","metadata":{"id":111}}],["112",{"pageContent":"{\n  \"title\": \"Python book\",\n  \"date\": \"03/16/2014\",\n  \"hidden\": true\n}\n---\n\nIn this chapter we'll look at the basics of the Python programming language, and we'll build up to your first program! \n\n## What is Python?\n\nPython is a general-purpose programming language that can be used for many different types of programming projects. It was designed by Guido van Rossum and first released in 1991. It has a simple syntax, making it easy to learn, and is powerful enough to write large applications. It has been used for many things including web development, graphical user interfaces, game development, and scientific applications.\n\nOne of the key features of Python is that it is interpreted. This means that rather than having to compile the program into a machine-readable format, you can simply run the program directly from the source code. This is one of the reasons why Python is so popular for beginners - it's easy to run and experiment with code!\n\nAnother key feature of Python is that it is a high-level language. This means that the programs you write are much more abstract than programs in languages like C. This makes them easier to read and understand, and it makes the programs easier to modify. It also means that you don't have to worry about some of the lower-level details of how the computer actually works.\n\nOne of the best things about Python is that it has a huge library of pre-written code that you can use in your own programs. This makes Python an ideal choice for beginners, since you don't have to worry about the details of how to do things - you just use the functions that someone else has already written.\n\nPython is free, and it is available for all major operating systems, including Windows, Mac OS X, and Linux.\n\n## Expressions","metadata":{"id":112}}],["113",{"pageContent":"Python is free, and it is available for all major operating systems, including Windows, Mac OS X, and Linux.\n\n## Expressions\n\nAn expression is a piece of code that returns a value. For example, 2 + 2 returns the value 4, and \"Hello\" + \"World\" returns the value \"HelloWorld\". In Python, expressions are made up of values and operators. Values can be numbers, strings, variables, or even objects, while operators are symbols that perform some kind of action on the values. For example, the plus sign (+) is an operator that adds two values together. The following are some examples of expressions:\n\n```\n\"Hello\" + \"World\"\n\n\"I am \" + \"learning Python\"\n\n2 + 2\n\n\"Hello\" * 3\n\n\"Hello\" / 2\n\n5 * 2\n\n\"Hello\" + \"World\" * 3\n```\n\nIn Python, expressions are evaluated from left to right, so in the above examples, the first value is added to the second, the first number is multiplied by the second number, and so on.\n\n## The print function\n\nThe print function is used to output values to the screen. In Python, print takes one argument, which can be any value, including strings, numbers, and even other objects. For example, the following are all valid print statements:\n\n```\nprint(\"Hello\")\n\nprint(1)\n\nprint(2 + 2)\n\nprint(1 / 2)\n\nprint(1 + 1)\n\nprint(\"Hello\", \"World\")\n\nprint(1 + 2, \"Hello\", \"World\")\n\nprint(2 + 2, \"Hello\", \"World\")\n```\n\nIn Python, the output from print is always shown after a newline character. This is why the print statement in the above examples always ends with a newline. If you want to display multiple lines of text, you can use the triple-quoted string format:\n\n```\nprint(\"\"\"This is\na multi-line string. \"\"\")\n```\n\n## Basic data types\n\nIn Python, integers are used to represent whole numbers. In other languages, the integers might be called \"int\" or \"long\" instead. For example, the following are all valid integer values:\n\n```\n123\n\n1234\n\n1234567890\n\n-100\n```\n\nIn Python, strings are used to represent sequences of characters. In other languages, the strings might be called \"str\" or \"text\" instead. For example, the following are all valid strings:\n\n```","metadata":{"id":113}}],["114",{"pageContent":"-100\n```\n\nIn Python, strings are used to represent sequences of characters. In other languages, the strings might be called \"str\" or \"text\" instead. For example, the following are all valid strings:\n\n```\n\"Hello\"\n\n\"Hello, World\"\n\n\"This is a string\"\n\n\"This is a string\" + \" with multiple words\"\n```\n\nStrings can be enclosed in single quotes (') or double quotes (\"). In Python, strings are always treated as Unicode, which means that you can use any characters that are part of the Unicode character set.\n\nThe following are all valid strings:\n\n```\n'Hello'\n\n'Hello, World'\n\n'This is a string'\n\n'This is a string' + ' with multiple words'\n\n'This is a string' + ' with multiple words' + ' and multiple lines'\n\n'This is a string' + ' with multiple words' + ' and multiple lines' + ' and a newline'\n```\n\n## Variables\n\nA variable is a name that refers to a value. Variables can be used to store values that you need to use later. For example, you might have a variable named \"number\" that stores the value 2. Later, you can use the variable number to represent the value 2.\n\nThe following are all valid variable names:\n\n```\nnumber\n\na\n\na1\n\na2\n\nabc\n```\n\nSome variables are predefined in Python, such as True and False.\n\nVariables can be assigned values using the assignment operator, which is an equals sign (=). For example, the following assigns the value 2 to the variable number:\n\n\n```\nnumber = 2\n```\n\nNow `number` holds the integer `2`. We can now use the variable in the next expression:\n\n```\nprint(number * 5)\n```\n\nWhich will print `10`.\n\n\n## Your first program\n\nBefore we write our first program let's learn one more function: input().\n\nThe input() function is used to ask the user to input a value. For example, the following code will ask the user to enter a number:\n\n```\nnumber = input(\"Enter a number: \")\n```\n\nWhen the user enters a number and hits enter, the number is stored in the variable number.\n\nNow let's write our first program:\n\n```\nprint(\"Hello\")\n\nprint(\"World\")\n\nnumber = input(\"Enter a number: \")\n\nprint(\"You entered: \", number)\n\nLet's look at this program in detail:","metadata":{"id":114}}],["115",{"pageContent":"Now let's write our first program:\n\n```\nprint(\"Hello\")\n\nprint(\"World\")\n\nnumber = input(\"Enter a number: \")\n\nprint(\"You entered: \", number)\n\nLet's look at this program in detail:\n\nprint(\"Hello\")\n\nprint(\"World\")\n```\n\nThis code prints the words \"Hello\" and \"World\" to the screen.\n\n```\nnumber = input(\"Enter a number: \")\n```\n\nThis code asks the user to enter a number and stores it in the variable number.\n\n```\nprint(\"You entered: \", number)\n```\n\nThis code prints the word \"You entered:\" and then the number that was entered.\n\n# Chapter 2: Control Flow\n\nIn the last chapter we learned how to write and execute Python programs as a series of instructions. However, what makes programming powerful is its ability to control the flow of execution. That is, we can specify conditions under which a certain instruction is executed.\n\n## Boolean Values\n\nPython has a data type boolean, which can have the values True or False .\n\n```\n>>> True\nTrue\n>>> False\nFalse\n>>> True == False\nFalse\n```\n\nThe == operator tests for equality. The != operator tests for inequality.\n\nNote that True and False are not strings.\n\n## Comparison Operators\n\nThe comparison operators test whether two values are equal or not. The comparison operators are == , != , < , > , <= , >= .\n\n```\n>>> 2 < 3\nTrue\n>>> 2 == 3\nFalse\n>>> 2 != 3\nFalse\n>>> 2 > 3\nFalse\n>>> 2 >= 3\nFalse \n>>> 2 <= 3\nFalse\n```\n\n## Boolean Operators\n\nThe and operator evaluates to True if both operands are True . The or operator evaluates to True if either operand is True . The not operator negates a Boolean value.\n\n```\n>>> True and True\nTrue\n>>> True and False\nFalse\n>>> False or True\nTrue\n>>> not True\nFalse\n```\n\n## If Statements\n\nLines of code can be grouped into a block. A block begins with a line that starts with a colon ( : ) and end when the indentation decreases. The lines within the block must be indented.\n\n```\nif x > y:\n  print(x)\n  print(y)\n```\n\nThis if statement contains two lines of code. The first line of code prints the value of x if x is greater than y . The second line of code prints the value of y .","metadata":{"id":115}}],["116",{"pageContent":"```\nif x > y:\n  print(x)\n  print(y)\n```\n\nThis if statement contains two lines of code. The first line of code prints the value of x if x is greater than y . The second line of code prints the value of y .\n\nThe if statement is an expression. If x > y is True , then the expression x is True .\n\nThe and and or operators can be used in an if statement.\n\n```\nif x > y and x > z:\n  print(x)\n  print(z)\n```\n\nThe if statement is a compound statement. The compound statement consists of the if statement and the two lines of code. The and operator is used to join two statements.\n\n```\nif x > y and x > z:\n  print(x)\n  print(z)\n```\n\nIf x is greater than y and greater than z , then the statements print(x) and print(z) are executed.\n\n## Else\n\nThe else keyword can be used in an if statement to specify what should happen if the condition is not true.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelse:\n  print(x + y)\n```\n\nIn this example, the value of x is printed if x is greater than y . Otherwise, the value of x + y is printed.\n\nPython provides a short-circuit evaluation. If x > y is true, then x + y will never be evaluated because it is not necessary.\n\n## Nested if Statements\n\nA nested if statement contains one if statement inside another if statement.\n\n```\nif x > y:\n  print(x)\n  print(y)\n  if x > z:\n    print(x)\n    print(z)\n```\n\nThis nested if statement will print the value of x if x is greater than y . If x is greater than z , then the value of x is printed.\n\n## else and elif\n\nelse and elif are used to extend the if statement.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelif x > z:\n  print(x)\n  print(z)\nelse:\n  print(x + y + z)\n```\n\nThe elif keyword can be used in place of the else keyword.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelif x > z:\n  print(x)\n  print(z)\nelse:\n  print(x + y + z)\n```\n\nIf x is greater than y , then the statements print(x) and print(y) are executed. If x is greater than z , then the statements print(x) and print(z) are executed.\n\n## Loops\n\nLoops are used to execute a block of code repeatedly. There are two types of loops: the while loop and the for loop.","metadata":{"id":116}}],["117",{"pageContent":"## Loops\n\nLoops are used to execute a block of code repeatedly. There are two types of loops: the while loop and the for loop.\n\n## While Loops\n\nA while loop executes a block of code while a condition is True .\n\n```\ni = 0\nwhile i < 10:\n  print(i)\n  i = i + 1\n```\n\nIn this example, the value of i is printed. The while loop continues until the value of i is greater than 10.\n\nThe while loop is an expression. If i < 10 is True , then the expression i is True .\n\n## For Loops\n\nA for loop executes a block of code a specified number of times.\n\n```\nfor i in range(10):\n  print(i)\n```\n\nIn this example, the value of i is printed 10 times.\n\nThe for loop is a compound statement. The compound statement consists of the for loop and the two lines of code.\n\n## Break and Continue\n\nThe break and continue keywords can be used in a loop.\n\n```\nwhile True:\n  i = input('Enter a number: ')\n  if i > 0:\n    print('The number is positive.')\n    continue \n  if i < 0:\n    print('The number is negative.')\n    break\n\nThe break keyword is used to terminate a loop.\n\nThe continue keyword is used to skip the rest of the code block and continue to the next iteration of the loop.\n\n## The range() function\n\nThe range() function can be used to generate a list of numbers.\n\n```\nfor i in range(5):\n  print(i)\n```\n\nThe range() function takes one parameter, which is the number of numbers in the list. The range() function returns a list.","metadata":{"id":117}}],["118",{"pageContent":"{\n  \"title\": \"Repl.it is not an IDE\",\n  \"date\": \"09/15/2020\"\n}\n---\n\nWhen a new thing is invented, we're often stuck with the old words to define it. The first car was a \"horseless carriage,\" and the first computer was a \"giant brain.\" In the same inaccurate way, Repl.it is an \"online IDE.\"<small>[1]</small>\n\nRepl.it gets its name from \"REPL\", the Read Eval Print Loop, a basic language tool found in most modern programming languages and environments. It's a tool that allows you to interact with a program by reading, evaluating, and printing data.\n\nIf you think about development environments as a continuum from REPL to IDE, you can see how Repl.it is located closer to the REPL end. It's a tool for exploratory programming. It's for playing with ideas.   \n\nRepl.it is a reaction to the modern software development grind, where many developers spend their time waiting for builds, running tests, fighting with linters, and configuring frameworks. It's an attempt to get back to the basics of programming -- to make coding fun again.  \n\nTo use Repl.it you don't have to ditch your IDE. You can use it to investigate a library's design, try out a new language feature, experiment with a new framework, or even use it to build and host a side-project.\n\nRepl.it collapses the entire development lifecycle into a simple interface. No need for pull requests, continuous integration, or deployment. You simply code and its live! With [Multiplayer](https://repl.it/site/multiplayer), you can even do all this with other people in real-time. \n\nIf your IDE is a car, Repl.it is a motorcycle. If your IDE is a desktop computer, Repl.it is an iPad. If your IDE is a skyscraper, Repl.it is a cozy vacation house. \n\nRepl.it is a tool for exploratory programming. It's for playing with ideas. \n\nRepl.it is a tool for sharing code. It's for building community.\n\nRepl.it is a tool for education. It's for learning to code.\n\nRepl.it, however, is **not** a tool for building large-scale software. It's not for your legacy codebase.","metadata":{"id":118}}],["119",{"pageContent":"Repl.it is a tool for education. It's for learning to code.\n\nRepl.it, however, is **not** a tool for building large-scale software. It's not for your legacy codebase. \n\nRepl.it is a tool for building side-projects. It's for hosting fun apps.\n\nRepl.it is a tool for experimenting with new ideas. It's for being creative. \n\nNext time you have an idea, kickback on the couch and hit up [repl.new](https://repl.new). You can always go back to your IDE when you need it. \n\n---\n<small>\n[1]: It's unfortunately how we currently describe Repl.it on the marketing pages, which was necessary when Repl.it was unknown. However, this will change soon. \n</small>","metadata":{"id":119}}],["120",{"pageContent":"{\n  \"title\": \"Computers Doing The Right Thing\",\n  \"date\": \"12/24/2021\"\n}\n---\nI'm fascinated by the idea of computers doing The Right thing without explicit user input. Today this is most apparent in autocorrect, but the idea -- in a more advanced form -- goes back to the early days of computing. \n\nI think if software designers embraced some of the ideas I'm going to talk about here, computers will be much more delightful to use. We won't need endless pages of menus and buttons. And humans can be free to think about their task as opposed to the software that's doing the task. \n\n## DWIM\n\nInterlisp is one of the most fascinating could-have-been computer systems in history. It shipped with one of the first from-the-ground-up interactive programming environments, structured editor, and many other innovations. Most impressive was the concept of Do What I Mean (DWIM).\n\n![interlisp manual](/public/images/dwim.png)\n\nThe most basic DWIM feature is one of spell-correction, but it goes way further than that. It can fix some basic logic errors and even lets the programmer define their own DWIM logic. \n\n## From correction to intention\n\nDWIM and other contemporary examples (like Google's \"did you mean?\") are about correcting user errors. A more advanced and fascinating idea is for the computer to detect intention and act on it. Humans do it all the time; we see the intention in other people and act on it. Like for example making way for someone who's walking towards you. \n\nSoftware too can and should do basic intention-detection and I'm surprised I don't see it much in the wild. Let's look at examples of how we used it at work. \n\n## Intent-based development environment\n\nAt Replit, we're really passionate about making a simple yet powerful programming environment. The environment needs to be very intuitive for newbies and should be enjoyable for experts. \n\n![hello world](/public/images/helloworld.png)","metadata":{"id":120}}],["121",{"pageContent":"![hello world](/public/images/helloworld.png)\n\nThe environment always starts with 3-columns, something we've tested and made sure that newbies intuitively get: files, editor, console. That's great, but now **what if you want to do web development?**\n\nYou simply write the code, and the environment will open a new pane to show you the output. \n\n![web dev](/public/images/web.png)\n\nSo how does it work? We hook into the Linux Audit system and watch for any new open sockets. In other words, if you start a server we'll assume you want to see the output from it. And in the vast majority of cases, we're right.\n\nWeb development is not the only thing people want to do on Replit, many would also like to build games, plot, or boot up old operating systems for fun. In this case, if you wrote the code, or invoked the program that wants to do graphics, we will detect that and stream VNC down to your browser. So how do we do it? Initially, we relied on [LD_PRELOAD](https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/) which allows you to override arbitrary function calls and inject your own logic. Pretty neat and works for other intent-based functionality. However, we decided to [move away](https://blog.replit.com/native-graphics-love) from that, here is the new approach:\n\n> In order to avoid using the LD_PRELOAD trick, we took a page out of systemd's socket activation feature, so that we detect the intent of a repl wanting to communicate with X by opening the socket to the X server, and launch the server + Window Manager at that point in time.\n\nFinally, much of software development today involves open-source packages. However, package manager can be a bit of pain to use, and honestly they can take out of the flow of coding. So while we do have native UI for package management, we also built a system to detect your intent to install an OSS package and simply do it for you. \n\n![import](/public/images/import.gif)\n\n## Intent detection is hard but worth it","metadata":{"id":121}}],["122",{"pageContent":"![import](/public/images/import.gif)\n\n## Intent detection is hard but worth it\n\nAs you can see intent-detection required system-level knowledge and hacking. At Replit, we're completely obsessed with creating delightful experiences so we go the extra mile to make it happen. But it's worth recognizing that it's not perfect. Sometimes we get it wrong, and the user can get into a pretty messed-up state. \n\nWhile complete detection of intent is an [AI-complete problem](https://en.wikipedia.org/wiki/AI-complete), there are a lot of heuristics that we can apply. Including using modern AI techniques. And software can and should get smarter as more people use it. \n\nI hope this inspires someone to make their software Do The Right Things.","metadata":{"id":122}}],["123",{"pageContent":"{\n  \"title\": \"The Stoic of Open Source\",\n  \"date\": \"01/13/2016\"\n}\n---\n\nTwo unrelated things happened recently:\n\n1. A few high profile open source maintainer burnouts<sup>1</sup>\n2. I've been reading a lot of philosophy<sup>2</sup>\n\nI was first introduced to Stoicism by a friend who recommended the book [A Guide\nto the Good\nLife](http://www.amazon.com/Guide-Good-Life-Ancient-Stoic/dp/0195374614). And\nthey kept coming up whenever I'm reading about philosophy, and for good reason,\nthey're a cool bunch.\n\nStoics understood that you can never depend on external factors for happiness\nand that the only way to achieve a sense of well-being is to be internally\nsatisfied. However, unlike the cynics or the skeptics, they *can* derive\nhappiness from the external world. In other words, **they get all the upside\nwhile avoiding downside**. This sounds amazing, and at first glance it sounds a\nbit like Buddhism, but I think the defining feature of Stoicism is their use of\npsychological tricks and reasoning to achieve their goal of tranquility. That's\nwhy I think it may resonate with the programmer community. Maybe we can learn\nsomething from them about open source maintenance?\n\n## insults and attacks\n\nOne thing that angers me -- and I see angers many open source\nmaintainers -- is the harsh criticism mixed with personal attacks that some\nusers launch against maintainers. There could be thousands of satisfied\nusers but a handful of loud and vile individuals could make your life\nmiserable. This can be related to how the Stoics dealt with insults. And they\nhad a lot to say about the subject.\n\nEpictetus recommended that we pause to consider our insulter. If he is a fool then\nrather than become angry or hurt, we should feel relief over his disapproval and\ninsults. Indeed, **we should be more concerned if we find the fool agreeing with\nus**<sup>3</sup>. It goes without saying that someone launching personal attacks\nagainst you for providing your work free of charge, is a fool.","metadata":{"id":123}}],["124",{"pageContent":"us**<sup>3</sup>. It goes without saying that someone launching personal attacks\nagainst you for providing your work free of charge, is a fool.\n\n>Begin each day by telling yourself: Today I shall be meeting with interference,\n>ingratitude, insolence, disloyalty, ill-will, and selfishness -- all of them\n>due to the offenders’ ignorance of what is good or evil?\n\n> -- Marcus Aurelius\n\nIf you are putting yourself and your work in the public eye then it's very\nlikely that you're going to have a run-in with the above-mentioned unpleasant\npeople. So accept it as a reality and learn to deal with it.\n\nSeneca suggests a potentially more useful way of dealing with insults:\n\n> Why is it an insult, to be told what is self-evident?\n\nIf you found that there is some truth in the attack. Then simply extract that\nknowledge as constructive feedback and use it to improve yourself and your project.\n\nThose are some tools we can use to reason out the sting of the insult, but\nwhat do we do about it? do we have to reply? The Stoics advocated two main ways of\nresponding to insults:\n\n1. Humor\n2. Refusing to respond\n\nBy simply laughing off an insult, we are implying that the insult and insulter\nare not to be taken seriously therefore stripping them of any legitimacy that would\notherwise be implied if we replied seriously to their insult. Here are a couple\nof amusing anecdotes from Seneca:\n\n>Seneca points approvingly to Cato’s use of humor to deflect a particularly\n>grievous insult. Cato was pleading a case when an adversary named Lentulus spit\n>in his face. Rather than getting angry or returning the insult, Cato calmly\n>wiped off the spit and said, “I will swear to anyone, Lentulus, that people are\n>wrong to say that you cannot use your mouth!” Seneca also approves of Socrates’\n>response to an even more abusive insult.  Someone once came up to Socrates and,\n>without warning, boxed his ears. Rather than getting angry, Socrates made a joke\n>about what a nuisance it is, when we go out, that we can never be sure whether","metadata":{"id":124}}],["125",{"pageContent":">without warning, boxed his ears. Rather than getting angry, Socrates made a joke\n>about what a nuisance it is, when we go out, that we can never be sure whether\n>or not to wear a helmet. <sup>4</sup>\n\nIf you are quick-witted then this type of humor may come naturally to you, but I'm\nnot. And, paradoxically, spending a lot of much time coming up with the perfect comeback\nwill have the negative effect of dwelling over the insult. Therefore the best\nthing to do is act as if it never happened. This, first of all, robs them\nof the pleasure of having upset us. And also shows everyone in the community\nthat we can't be bothered with childish behavior and we have more important\nthings to attend to (such as maintaining the project).\n\n## on making mistakes\n\nEveryone makes mistakes, and open source maintainers are no exception. You'll\neventually push a breaking change that will unleash a mob of semver purists\ngunning for your head (refer to the previous section on how to deal with\nobnoxious people). Here, I'll talk about how you should reason about the fact\nthat you made a mistake.\n\n>Truths about the past are necessary: it is not merely that they aren't other\n>than they are—they can't be other than they are, for nothing has the power to\n>change the past -- Epictetus\n\nStoics were pioneers of logic, and it followed from their use of logic that\nwe should have a fatalistic attitude towards the past. We just learn from our\nmistakes and move on -- there could have never been a world where you have not made\nthat mistake. Because without that event happening the world where you are now\nlooking back at that mistake doesn't exist. The last part was me going out on a\nlimb, but all this to say is that you can't change the past and there is no\npoint in feeling regret.\n\nMistakes may help you revise and strengthen your processes and tests. It may\neven get your users to be more involved in the project's maintenance because they\nsee you as someone needing their help. I doubt that any one mistake has ever","metadata":{"id":125}}],["126",{"pageContent":"even get your users to be more involved in the project's maintenance because they\nsee you as someone needing their help. I doubt that any one mistake has ever\ncaused the failure of an open source project, the important thing is to learn\nand move on.\n\n## work on your own terms\n\nTaking a utilitarian approach to open source seems to be the best and most\nsustainable. In the JS Infra team at\nFacebook we have the following dictum:\n\n> We only open source what we use in production\n\nWhen we stop using something internally we either find a new home for it or\nsimply deprecate it. This puts us in a better position to serve our community. Similarly, you\ncan approach your personal open source projects with the same attitude. Keep\nyour project focused and fully aligned with your needs.\n\nFor example, if someone sends you pull request for a feature that you are not\ngoing to use yourself and don't have the time test and maintain, then simply refuse it. It's\nbetter to be focused in scope than to make the project suitable for every\npossible use case while increasing your chances of burnout.\n\n> Nothing is worth doing pointlessly -- Marcus Aurelius\n\nPeople looking from the outside at open source are often amazed by how a\nworld based on altruism could exist. Sorry, it doesn't. A lot can be gained from\nparticipating in open source. Slaving away with no explicit goal is a recipe\nfor disaster. I'm not saying that helping others is not a valid a\ngoal -- it could be, however, it should be intentional.\n\n>It is impossible that happiness, and yearning for what is not present, should\n>ever be united -- Epictetus\n\nTry not tie your identity and sense of well-being to your open source\nproject. Align your needs with the community, get the upside of any contributions and\npopularity. But try not to get affected by any downside.\n\n---\n<small>\n[1] I've never been a sole creator/maintainer of a massively popular open\nsource project, however, I work as part of teams on massively popular open","metadata":{"id":126}}],["127",{"pageContent":"---\n<small>\n[1] I've never been a sole creator/maintainer of a massively popular open\nsource project, however, I work as part of teams on massively popular open\nsource projects. So I probably don't understand the magnitude of stress sole\nmaintainers may feel.\n\n[2] My favorite books so far: A History of Western Philosophy by Bertrand Russel,\nThe Guide to the Good Life by William Braxton, and the Philosophize This! podcast.\n\n[3] Great [blogpost](http://throughablogdarkly.blogspot.com/2012/12/stoicism-dealing-with-insults.html?m=1) summarizing how the Stoics dealt with insults\n\n[4] A passage from The Guide to The Good Life\n</small>","metadata":{"id":127}}],["128",{"pageContent":"{\n  \"title\": \"Do What Makes The Best Story\",\n  \"date\": \"1/8/2020\"\n}\n---\n\nKids are always telling themselves stories. Try to remember yourself as a child lying in bed, anticipating an exciting day tomorrow, and you'll probably remember telling yourself a story about how cool it's going to be, who's going to be there, and how much fun you'll have. Self storytelling might be more pronounced in kids -- they like to say it out loud -- but it never goes away and only subsides to the background in adults. Self storytelling is so essential for people that one of the most effective [techniques](https://en.wikipedia.org/wiki/Cognitive_behavioral_therapy) for treating depression and anxiety boils down to \"tell yourself better stories.\" \n\nLife is also a form of self storytelling. We're continually retelling ourselves our life story, but very few people think of themselves as authors of their story, not mere subjects. People with extraordinary high-agency realize this early in life and start maximizing the interestingness of their life story.\n\nHaving a fascinating life story is not just an exercise in vanity -- it has a real impact on your success in life. You'll have an easier time attracting friends as well as life and business partners. It'll also make it much easier to sell yourself or your products. It has a kind of compounding [halo effect](https://en.wikipedia.org/wiki/Halo_effect).\n\nStartups also have to be good stories. A good business idea or market is not enough to endure the pain and have the motivation to get a startup off the ground. Without an interesting story about the founding of the company and the vision, you'll have a hard time attracting talent and money. Notice how the most successful startups in the world all have remarkable genesis stories. \n\nSo next time you're faced with a tough decision, consider the path that makes a more interesting story. If it turned out to be the wrong decision to have made, you'd at least be fun at dinner parties.","metadata":{"id":128}}],["129",{"pageContent":"{\n  \"title\": \"stuff.js\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"12/11/2012\",\n  \"hidden\": \"true\"\n}\n---\n\nWith the explosion in online tools that allow to write, share, and run HTML, CSS, and JavaScript\nlike [JSFiddle](http://jsfiddle.net/), [CSSDeck](http://cssdeck.com/), [codepen](http://codepen.io/)\nand many others! I was surprised to see that there wasn't a good opensource library to facilitate\nsecurely running arbitrary code in the browser. So I pulled this out of our codecademy.com source code\ninto a well-tested library with a nice interface. I call it [stuff.js](https://github.com/Codecademy/stuff.js)\n(stuff as in stuffed turkey) and it's on [GitHub](https://github.com/Codecademy/stuff.js).\n\nHere is how you can create a live coding interface (similar to codepen) in less than thirty lines of code using stuff.js\nand codemirror:\n\n```javascript\nstuff(secureIframeUrl, function (context) {\n  var html = CodeMirror.fromTextArea($('#html'), {\n    onChange: reload\n  , mode: 'text/html'\n  });\n  var js = CodeMirror.fromTextArea($('#js'), {\n    onChange: reload\n  , mode: 'javascript'\n  });\n  var css = CodeMirror.fromTextArea($('#css'), {\n    onChange: reload\n  , mode: 'css'\n  });\n\n  var t = null;\n  function reload () {\n    clearTimeout(t);\n    t = setTimeout(function () {\n      var code = '<!DOCTYPE html><html><head>';\n      code += '<style>'  + css.getValue() + '</style>';\n      code += '<body>' + html.getValue();\n      code += '<script>' + js.getValue() + '</script>';\n      code += '</body></html>';\n      context.load(code);\n    }, 50);\n  }\n  reload();\n});\n```\n\nStuff.js puts security first. It is intended to be served from multiple origins for the code to be properly sandboxed\nand not have access to the top window.","metadata":{"id":129}}],["130",{"pageContent":"{\n  \"title\": \"Investing in Synthesis\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"4/21/2022\",\n  \"description\": \"I'm co-leading a round in Synthesis, a startup scaling the custom school built for Elon Musk's kids\",\n  \"image\": \"https://amasad.me/public/images/synthesis.png\"\n}\n---\n\nComputers give humanity the power to solve some of the most critical problems our species has ever faced. However, until today, we have failed to leverage this unprecedented tool; we teach kids to be mere consumers of this powerful machine. To change this, society needs three things:\n\n- Access to the tool\n- Education in the complex skills necessary to use it\n- Education in the problem-solving skills necessary to maximize the potential for human progress\n\nAt Replit, we’re making computer programming accessible and learnable for anyone, no matter their background, location, or socio-economic status. That covers points 1 and 2, but what about point 3? We need a way to offer any kid from anywhere the opportunity to learn collaboration, critical thinking, and problem-solving so they can capitalize on the promise of computers.\n\nFor this reason, I’m pleased to announce that I’m leading along with Balaji Srinivasan a new [$12M investment](https://www.synthesis.is/fundraise-amjad-balaji) in [Synthesis](https://synthesis.is), the innovative education program where kids learn to solve complex problems by playing team games.","metadata":{"id":130}}],["131",{"pageContent":"I first met Joshua Dahn, the co-founder of Synthesis, when I visited the Ad Astra school on the campus of SpaceX. I had heard they were using Replit to learn to code and build projects, so I visited expecting a regular school. But what I saw was radical. Elon Musk hired Josh to build a lab school for his kids and SpaceX engineers–and what Josh created blew me away. Now, Synthesis is taking the most popular class from that school and scaling it up for kids from across the globe. They designed Synthesis to train supercollaborators, who can work together to solve complex problems to advance human civilization.\n\nLast month, I was hanging out with Chrisman Frank, the CEO of Synthesis. He shared their progress with me, and I couldn’t believe what they had accomplished. They’re teaching thousands of kids the skills needed to move civilization forward. I spoke with Balaji, and we both agreed that we needed to do whatever we could to help Synthesis succeed.\n\nBalaji notes six features that make Synthesis a particular company in his [announcement](https://balajis.com/synthesis). They bear repeating here:\n\n> 1. First digital, then physical. A full replacement for the education system will eventually require physical locations. Too many parents depend on state-run schools for childcare. However, it’s important to go digital first, then physical. Synthesis is building a networked community online and then, later, creating physical infrastructure as needed be.\n> 2. Scale what can be scaled. Today’s K-12 instruction can be decoupled into (a) curricula, (b) small group tutoring and (c) de facto childcare. While the tutoring and childcare components will continue requiring hands-on attention for each student, the curricula can be created by world class instructors and cost-effectively scaled to millions of children. That means one could have the polish of a Hollywood movie or an AAA-quality game for educational content, which is what Synthesis is working on.","metadata":{"id":131}}],["132",{"pageContent":"> 3. Go direct. Legacy media is incentivized to protect legacy systems. Therefore, companies offering an exit must go direct to customers and build their own distribution. Otherwise, they’ll either get politically attacked or forced to fold back into the values of the incumbent system. And so Synthesis is reaching parents entirely through social media and eschewing legacy media corporations.\n> 4. Make exit easy. Our education systems won’t reform from within. The necessary improvements require too much change. The only real solution is to create something better from the ground up that’s so attractive users can’t help but exit the old system. Something like that doesn't arise overnight - it's proved out in stages, by people gradually opting out of the current system, providing feedback and driving features, till the parallel system is better in all respects and ready for broad adoption. This, too, is part of the Synthesis strategy.\n> 5. Win and help win. Finally, the aim of education should be to train kids to grow the global pie for humanity so all can benefit. In other words, kids need to learn how to work together and succeed in a competitive environment so that they can contribute to the common good. And Synthesis believes that teaching values like this is as important as teaching calculus.\n\nI believe that Replit + Synthesis could become the educational stack for millions of kids worldwide. In the past, kids had to go through K-12 then university education before contributing to the real world, but things are changing fast for a few reasons:\n\nFirst, the traditional track isn’t available to many people simply because of where they were born. Second, the few who graduate often end up with loads of debt and little to no hirable skills. Third, and most importantly, it seals them off in school for 14+ years and then expects them to offer something productive to society.","metadata":{"id":132}}],["133",{"pageContent":"Together, Synthesis and Replit are fixing this problem. Synthesis lets any kid anywhere collaborate with peers to practice solving humanity’s toughest challenges, like managing wildfires and colonizing space. Replit empowers these kids to learn code, turn their ideas into real solutions, and build businesses around them online.\n\nNo barriers to entry. No unnecessary debt. No more waiting.\n\nIn essence, Synthesis is the complement of Replit. To build the future, the next generation needs two critically essential skills. They need to know how to think with computers and collaborate with humans. Replit lets anyone learn the first. Synthesis allows anyone to learn the second. I can’t think of two higher leverage ways to move society forward.\n\n\nIf you have kids ages 8-14, you can sign them up for Synthesis [here](https://www.synthesis.is/).\n\nIf you’d like to join their team, view their [open positions here](https://www.synthesis.is/careers).","metadata":{"id":133}}],["134",{"pageContent":"{\n  \"title\": \"Vision\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"11/27/2021\",\n  \"hidden\": \"true\"\n}\n---\n\n## Vision\n\nComputers are the most powerful tools to exist in the history of humanity. Sadly most people are mere consumers of these machines. Only a relative few -- the professional software developer -- can use this superpower to its fullest extent. It’s creating an unbalanced world where there are programmers, and then there are those who are programmed. The situation is analogous to literacy before the printing press, where only the powerful had access to books and written communication. The invention of the printing press led to democratic, scientific, and industrial revolutions, but it took about a century from creation to revolution, which meant that an entire generation of people to grow up with new skills, outlooks, and ways of learning and communicating. \n\nWhen there is widespread code literacy, we believe that it will transform humanity again and perhaps in more radical ways. It's hard to imagine what the world will look like when there is a generation of people who grew up with computer superpowers. But we can be sure about a few things:\n\n- Technological power will be decentralized: When everyone can code, there will be less reliance on power centers to manage all information technology. Power centers like Silicon Valley will decentralize into internet communities. \n\n- Wealth will be more distributed: When people have the tools to create and participate in the global digital economy, they will have the ability to lift themselves out of poverty. The wealthy and the poor will not differ by pidegree, instead anyone who can generate good ideas can be wealthy.\n\n- Software will be more local: No one knows better what a community needs other than the community itself. Instead of a handful of giant companies creating the software for everyone in the world, we'll see more personal and community-grown software.","metadata":{"id":134}}],["135",{"pageContent":"- Education will be transformed: When people can be economically productive much earlier in life, education systems will change to become more tailored to individuals and more pragmatic. Since the best way to learn is to create, people will become more efficient learners by building computer simulations.\n\n- Institutions will be more democratic: Totalitarian regimes have relied on technological supremacy since the beginning of time to subject people. But when people have agency over technology, the power balance will improve.\n\nWe happen to be at absolutely the right time to be attempting to create systems to increase computing literacy and give people superpowers:\n\n- Cloud computing allows us to deliver collaborative and powerful tools wirelessly and at very little cost to the user.\n\n- With advent of satellite internet we're quickly approaching universal connectivity.\n\n- Low-end devices are getting more affordable by the year, nearly free, and very close to universal computer access.\n\n- Bitcoin and web3 allows users to easily generate and capture wealth on the internet.\n\n- Schools and governments are starting to understand the need for coding literacy.\n\n- The funding landscape allows ambitious projects like Replit to exist\n\n## Mission\n\nReplit will bring the next billion software creators online, and will accelerate the shift towards a world where software and the internet are truly The Great Equalizer. Soon anyone, regardless of place or economic status, will be able to create software and generate wealth on the internet. If we’re successful, anyone who's willing to learn and generate good ideas will be wealthy.\n\n## Plan\n\nIn the first phase of the company we poured everything into building the default entry-to-programming environment. One which put us on an exponential growth path towards millions of programmers. Now we have the opportunity to build the next major software platform.","metadata":{"id":135}}],["136",{"pageContent":"We're entering the next major phase of our company, where we're inventing the building blocks for the software creator economy. The primitives that will power the next paradigm shift of software collaboration. We think we're transitioning from a stacked model of software creation to a networked one. One which value is builtin, and the ability to monetize will be inseparable from creation.\n\nIf we're succesful in empowering the next generation of softawre creators we'll have the ability to weave interconnected communities and software into the world's  first massively distributed and collaborative operating system. One that’s focused on creation and self-expression, that’s networked by default, and that let’s people create and earn on the internet.\n\n## Design principles\n\n\n- Learnable yet scalable interfaces: Interfaces today present the same UI to vastly different users, from children to adults, from novices to experts. Our mission demands that we make computing environments more accessible to novices while making it possible to transition to more powerful interfaces. Replit starts with a simple editor and console, which gets learners very far. The UI, however, is adaptable and presents different faces to different users and use-cases.\n\n- Infrastructure as legos: A core part of commanding computer power is to be able to build for the modern internet-connected world. Despite progress in cloud computing, infrastructure remains inaccessible to novices, hobbyists, and educators. We change this by designing simple and scalable components, like cloud-hosted servers accessible right from the repl, storage, databases, etc., that require little configuration and maintenance by the programmer. Coders can then mix and match components to create endless possibilities.","metadata":{"id":136}}],["137",{"pageContent":"- People-centric technology: It's more exciting and fun to create and learn with other people. The future demands that computers and the internet have human interconnectedness as a core primitive. From our multiplayer computing protocol to our community spaces for sharing software, we build support for human beings, and we put collaboration right at the heart of our technology.\n\n## Technology\n\nReplit is an emerging computing universe. To understand it, you have to understand its basic components:\n\n1. Replit is a website where anyone can get a computer with a development environment in the cloud instantly from any device, and get effectively infinite machines to learn, build, and play with them. It's a site where creators from all over the globe can meet and collaborate. It's a place to discover and remix software (\"view source\" for all software). It's a place to go from your first line of code to your first app to your first startup. It's the ultimate website that blurs the distinction between building to learn and learning to build and eventually building to earn. It's the place where ideas become wealth.\n\n2. It's a protocol for remote computing between a human to machine and machine to machine. This protocol powers the website, but also power bots, third-party apps, and many other use-cases yet to be discovered. It's making Replit into an open platform where developers can build plugins, extensions, and entirely new experiences and businesses on the platform. It's collaborative from the ground up, it's extensible, and it's interactive and alive. It will be the basis for a massively multiplayer cloud operating system of the future.","metadata":{"id":137}}],["138",{"pageContent":"3. It's a massively distributed computing network. If GitHub is a network of dead code, Replit is a network of live code. Any program on any machine on the network can call functions on any other program. It's Alan Kay's original vision for object-oriented programming -- a biological-like system of live machines communicating via message-passing.  It's empowering for developers to build and scale apps. It unlocks a radically new way of collaborating on software. And it's a platform for infrastructure providers to publish and monetize services for developers on the network.\n\n## Metrial from the blog\n\n- [Post from 2017 laying out the technical foundations](https://blog.replit.com/holistic)\n- [More on technical motivations and inspiration](https://amasad.me/disintegrated)\n- [What Replit is not](https://amasad.me/replit_ide)\n- [How Replit wins](https://amasad.me/leapfrog)\n- [Series A announcement](https://blog.replit.com/seriesa)\n- [On how and why Replit is fun](https://blog.replit.com/internet-of-fun)\n\n## Material from the web\n\n- [Podcast interview with Amjad on the past and future of Replit](https://www.youtube.com/watch?v=DZcglTSv-2Y)\n- [Another one](https://www.youtube.com/watch?v=isIpbcH_N80)\n\n## A handful of user stories:\n- [User story showing our reach & impact](https://twitter.com/HayaOdeh/status/1462900554930147328)\n- [How we give creators superpowers](https://twitter.com/amasad/status/1348804890877857792)\n- [Retaining users through the childhood years](https://twitter.com/amasad/status/1390810578214539266)\n- [Users hacking Replit itself](https://twitter.com/amasad/status/1083517163153944576)\n- [Users learning and earning](https://twitter.com/amasad/status/1451255029059358747)\n- [How the replit community coordinates](https://twitter.com/amasad/status/1354534990109761542)\n- [How Replit community builds meaningful relationships](https://twitter.com/amasad/status/1377287503351181313)","metadata":{"id":138}}],["139",{"pageContent":"{\n  \"title\": \"Introducing Waraby, Mobile Optimized Arabic Search Web App\",\n  \"date\": \"01/18/2014\",\n  \"image\": \"http://i.cloudup.com/wrHDYFfRJw.png\",\n  \"hidden\": true\n}\n---\n\n[Waraby](http://waraby.net/) is an Arabic search mobile app that I'm releasing today.\nI've built it more than six months ago for my personal use and I've been very pleased with it.\nI called it “Waraby” which comes from blending “Web” and “Araby”.\n\n### Why\n\nTyping in Arabic -- or really, any non-latin language -- is challenging because it wasn’t part of the early PC design. In addition to that, many PCs come with no Arabic pre-installed and no character annotations on the keyboard. This lead to a generation of computer and internet users using English characters to express Arabic words and meanings. This is often referred to as transliteration or more commonly “Arabezy” or “Arabish” (comes from the blending of Arabic and English words).\n\nOne of the fundamental activities we do online is Search, and for Arabic speakers used to transliteration [Yamli](http://yamli.com) is a lifesaver. It works by converting your transliterated English words into Arabic so you can use the language you’re used to in day-to-day chat and messaging to search for Arabic content on the Web. However, Yamli isn’t mobile optimized and frankly, it’s a pain to use on the phone.\n\nHere is how Waraby makes Arabic mobile search delightful:\n\n#### Simple\n\nIt’s a full screen App with a wide textarea that auto scrolls down when focused to give enough room for suggestions.\n\n<img src=\"https://i.cloudup.com/ea1o38uH4z.gif\" alt=\"waraby layout\" height=\"400\" />\n\n#### Responsive\n\nSuggestions are neatly aligned under the word being typed with the highest confidence result at the top. Furthermore, hitting search will open the Arabic-based Google search for the best results.\n\n<img src=\"https://i.cloudup.com/lSq5tLVJBf.gif\" alt=\"waraby is responsive\" height=\"400\" />\n\n#### Attention to Detail","metadata":{"id":139}}],["140",{"pageContent":"<img src=\"https://i.cloudup.com/lSq5tLVJBf.gif\" alt=\"waraby is responsive\" height=\"400\" />\n\n#### Attention to Detail\n\nIf you hit back while on the search result you can go back to Waraby with your latest search query waiting for you.\n\n<img src=\"https://i.cloudup.com/YFgiljjUiT.gif\" alt=\"waraby back button\" height=\"400\" />\n\nIt handles long queries gracefully.\n\n<img src=\"https://i.cloudup.com/vyALZc44bE.gif\" alt=\"waraby long queries\" height=\"400\" />\n\nFinally, If you decide to visit the app and start using it, don’t forget to add it to your [home screen](http://support.apple.com/kb/TI42).","metadata":{"id":140}}],["141",{"pageContent":"My name is Amjad Masad.\n\nI'm the CEO and founder of [Replit](https://replit.com), an online coding environment that makes coding more fun, approachable, and social. Starting a new project goes from countless hours of setting up a development environment to the two seconds it takes to start up a new repl in your browser.\n\nComputers are the most powerful tools to exist in the history of humanity. Sadly most people are mere consumers of these machines. Only a relative few -- the professional software developer -- can use this superpower to its fullest extent. It’s creating an unbalanced world where there are programmers, and then there are those who are programmed. The situation is analogous to literacy before the printing press, where only the powerful had access to books and written communication. The invention of the printing press led to democratic, scientific, and industrial revolutions, but it took about a century from creation to revolution, which meant that an entire generation of people to grow up with new skills, outlooks, and ways of learning and communicating.\n\nReplit will bring the next billion software creators online, and will accelerate the shift towards a world where software and the internet are truly The Great Equalizer. Soon anyone, regardless of place or economic status, will be able to create software and generate wealth on the internet. If we’re successful, anyone who's willing to learn and generate good ideas will be wealthy.\n\nIf this mission speaks to you, you should consider [working with us](https://replit.com/careers).\n\nBefore founding Replit, I was a tech lead on the JavaScript infrastructure team (which I\nhelped start) at Facebook. We built and maintained open source tools that made\nJavaScript development easier, accessible, and generally better. We built and/or\nmaintained things like the [Babeljs compiler](http://babeljs.io),\n[Jest](https://facebook.github.io/jest/), and the [React","metadata":{"id":141}}],["142",{"pageContent":"maintained things like the [Babeljs compiler](http://babeljs.io),\n[Jest](https://facebook.github.io/jest/), and the [React\nNative](http://facebook.github.io/react-native/) packager. Some form of this\nteam is still going strong and now are doing even more amazing things like the\nYarn package manager.\n\nBefore that I was #1 employee at [Codecademy](https://codecademy.com). I did\nsome tech-leading, built product and infrastructure. Being that early at a\nhigh-growth consumer startup is a great, albeit compressed, learning\nexperience.\n\nBefore that I was briefly at Yahoo. And before that I was going to college and on the side I worked in cybersecurity.\n\nAs for non-work stuff, I'm into powerlifting and grilling steaks. I also like to read and mostly interested in philosophy of mind and AGI. Understanding and potentially simulating the mind is what kept me interesting in computers as a kid. I'm also interested in tradition and paleoanthropology. There is so much that's great about the modern world but there is also so much to be desired when it comes to living a fulfilling and healthy life. And I think the past holds more wisdom than people like to admit. \n\nI enjoy scifi movies, especially old ones. Some of my favorites include The\nForbidden Planet, Brazil, and Colossus: The Forbin Project. I'm of the opinion\nthat good Hollywood movies are [on the\ndecline](https://whyevolutionistrue.wordpress.com/2016/04/05/the-decline-of-good-hollywood-movies/).\n\n![pictuer](https://amasad.me/public/images/pic.jpeg)\n\nHere are some interviews/articles written about me:\n\n* [Invest Like the Best podcast](https://podcasts.apple.com/de/podcast/amjad-masad-the-future-of-software-creation/id1154105909?i=1000592027219)\n* [ARK Invest podcast](https://www.youtube.com/watch?v=bO0GunZCio8)\n* [WSJ: 10 Things to Love About America](https://www.wsj.com/articles/10-things-to-love-america-patriotism-liberty-immigrant-amjad-masad-tech-silicon-valley-woke-crt-11640902246)","metadata":{"id":142}}],["143",{"pageContent":"* [WSJ: 10 Things to Love About America](https://www.wsj.com/articles/10-things-to-love-america-patriotism-liberty-immigrant-amjad-masad-tech-silicon-valley-woke-crt-11640902246)\n* [Moment of Zen Podcast](https://www.youtube.com/watch?v=hrk4IVHyvZo)\n* [This Week in Startups podcast](https://www.youtube.com/watch?v=isIpbcH_N80)\n* [The Best Business Show podcast](https://www.youtube.com/watch?v=DzeGAGhsjb8)\n* [Replit: Remix the Internet](https://www.notboring.co/p/replit-remix-the-internet)\n\nOlder stuff:\n* [An interview with a Japenese\n  magazine](http://gihyo.jp/dev/serial/01/software_designers/0042)\n* [An essay by Fadi\n  Ghandour](https://www.linkedin.com/pulse/20130919080958-1326123--young-hungry-and-waiting-to-be-unleashed)","metadata":{"id":143}}],["144",{"pageContent":"Amjad Masad is a Jordanian American entrepreneur and engineer. He is the founder and CEO of Replit, the world's leading online programming environment and community. Before Replit, Amjad **used to** worked at Facebook, overseeing the JavaScript infrastructure team and building some of the world's most popular open-source developer tools. Before that, he was a founding engineer at Codecademy, the world's leading online coding school.","metadata":{"id":144}}],["145",{"pageContent":"# Facts Amjad Masad should be aware of\n\nThe year is 2023.\n\nAmjad Masad has 127.4K followers on twitter.\n\nAmjad Masad follows 261 people on twitter.\n\nAmjad Masad is a fan of Paul Graham.\n\nAmjad Masad is a fan of Elon Musk.\n\nAmjad Masad has 2.1K followers on Replit.\n\nAmjad Masad is following 468 people on Replit.\n\nAmjad Masad's github profile is https://github.com/amasad.\n\nAmjad Masad has 1.8K followers on Github.\n\nAmjad Masad is following 33 people on Github.\n\nAmjad Masad's personal website is https://amasad.me/.\n\nAmjad Masad graduated from the Princess Sumaya University for Technology.\n\nAmjad Masad can deadlift more than 400 pounds.\n\nReplit has around 80 employees, and almost 70% of them are engineers.\n\nReplit's documentation is located at https://docs.replit.com/.\n\nReplit's discord server is located at https://replit.com/discord.\n\nReplit's clothing shop is located at https://shop.replit.com/.\n\nReplit's support team can be contacted at https://replit.com/support.\n\nReplit's community forum is located at https://ask.replit.com.\n\nReplit's changelog is located at https://docs.replit.com/updates.\n\nReplit's github account is located at https://github.com/replit.\n\nReplit's github account has 128 repositories.\n\nReplit has 426 followers on github.\n\nReplit's Cofounders are Faris Masad and Haya Odeh.\n\nFaris Masad is Amjad Masad's younger brother.\n\nHaya Odeh is Amjad Masad's wife.\n\nReplit's headquarters is located in San Francisco.\n\nReplit has a secondary office located in New York.\n\nReplit's official accounts on replit are https://replit.com/@replit and https://replit.com/@util.","metadata":{"id":145}}],["146",{"pageContent":"# Replit About Page\nThis is a detailed description of the About page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe about page has the following content, in markdown:\n\n# Our Mission\n## Is to bring the next billion software creators online.\nWe build powerful, simple tools and platforms for learners, educators, and developers.\n\n---\n\n# Section 2\nThe second section has a header \"Team\" followed by pictures, titles, and names of all the employees that work there.\n\n---\n\n# Section 3\nA large header \"Stay in touch\".  Under it is a link to follow Replit on twitter.  Replit's twitter handle is \"@replit\".\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status","metadata":{"id":146}}],["147",{"pageContent":"| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":147}}],["148",{"pageContent":"# Replit Careers Page\nThis is a detailed description of the Careers page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThe page structure is depicted by Markdown below.\n\n# Careers at Replit\nWe're on a mission to bring the next billion software creators online. Creating the future of computing is a team effort though.\n<button>See open positions</button>\n\n# Announcement: $80M Series B\nReplit recently announced our $80M Series B to bring the next billion software creators online. We're focusing on: building the world's most ubiquitous programming environment; inspiring creativity and generating value for creators through community; and designing simple yet scalable infrastructure primitives for the next generation of creators. We're using the new financing to continue innovating and to grow the team with other talented and passionate builders.\n\nRead more about our plans for the future. And if you want to dig deeper, Packy McCormick did a terrific deep dive on our story.\n\n# What we care about","metadata":{"id":148}}],["149",{"pageContent":"Read more about our plans for the future. And if you want to dig deeper, Packy McCormick did a terrific deep dive on our story.\n\n# What we care about\nWe make programming more accessible by building powerful yet approachable tools and platforms for developers, students, and educators. We want to blur the line between learning and making– a place where you can hang out, tinker with ideas, learn new concepts, and launch a business all in the same day.\n\nReplit is a platform for both newcomers and experts to express themselves. While computers are the most powerful tools to exist in the history of humanity, most people are just consumers of these machines. Our goal is to empower people as creators and give them computer superpowers– where every app, website, and program can be as personal as a home-cooked meal.\n\nCreative empowerment is reflected in our team. We are transparent and open, value collaboration across different fields, and constantly talk to our users. Anyone and everyone (including interns!) can have an enormous impact and product-changing ideas. All you have to do is share.\n\nWe are at a unique point in time to be working on these problems and in a unique position to help solve them. Especially as global connectivity increases, browsers become more sophisticated, and schools begin to understand the need for coding literacy, Replit has a responsibility to help make the world of computing more equitable, powerful, and fun.\n\nNo matter how much we like computers, this all has to get done by people (us)! We celebrate all kinds of backgrounds, all of which inspire our conversations with computer science, education, psychology, design, business, art, literature, biology, and more. Help us expand that list!\n\nTo read more about what we care about, check out our [operating principles](https://blog.replit.com/operating-principles), or read about [reasons not to join Replit](https://blog.replit.com/reasons-not-to-join-replit).\n\n# What we work on","metadata":{"id":149}}],["150",{"pageContent":"# What we work on\nOn any given day, we tackle some of the most challenging problems in computing (sandboxing, distributed systems, scheduling) and the the most interesting problems in design and HCI (how do you create a learnable programming environment?). Lucky for us, features like multiplayer collaboration happen to be product, design, and engineering puzzles all at the same time.\n\nWe are constantly experimenting, prototyping, and learning how to make collaborative programming inclusive and fun. We love demos, brainstorming, and bringing research ideas to life that impact millions of people.\n\nRead more about some of our most recent and ongoing projects on our blog:\n\n[Focusing on a solid foundation](https://blog.replit.com/quality)\n[A database for every repl](https://blog.replit.com/database)\n[CLUI: Building a Graphical Command Line](https://blog.replit.com/clui)\n[What we build during Hack Weeks](https://blog.replit.com/hackweek22)\n\n# How we interview\nWe look for people who are excellent at their craft and want to share that expertise with others. Regardless if you're an engineer, designer, marketer, or a wildcard, we want to see that your fundamentals are nailed down, you're resourceful, responsive to feedback, and able to think on your toes!\n\nThat means that we won't be testing you with brainteasers that are unrelated to the real world. We ask you questions related to real challenges at Replit.\n\nWe are always looking for new talent and value everyone who wants to contribute— from fulltime to interns. To see some first hand accounts and specific examples about our process, check out our [blog post on hiring interns](https://blog.replit.com/intern-interview), our [initial engineering challenge](https://otcatchup.util.repl.co/), and [a mock Replit interview with an Ex-Facebook Engineer](https://www.youtube.com/watch?v=nDZ3hhzsUx8).\n\n# Life at Replit\nWe work hard but also don't take ourselves too seriously, as you'll see in the video :)\n\n# Benefits\n - Competitive salary & equity","metadata":{"id":150}}],["151",{"pageContent":"# Life at Replit\nWe work hard but also don't take ourselves too seriously, as you'll see in the video :)\n\n# Benefits\n - Competitive salary & equity\n - Your choice of new equipment and software\n - Health, dental, and vision insurance\n - Autonomy at work\n - Flexible work hours\n - Learning & development stipend\n - Monthly health & wellness stipend\n - Generous parental leave\n - Unlimited PTO (2 weeks minimum required)\n - 401k matching\n - Commuter benefits\n - Expensed lunch\n - Yearly offsites!\n\n# Open positions\n\nSenior Accountant\nCanada (overlap 4 hours with US Pacific Time)\n\nProduct Designer\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Support & Internal Tools\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Frontend Infrastructure (Workspace/IDE)\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nDeveloper Advocate\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nEngineering Manager, Product and Growth Engineering\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Anti-Abuse & Security\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Applied AI/ML\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Platform - OS\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Platform - Distributed Systems\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nOur team is a blend of former founders, public educators, designers and engineers from Google, Mozilla, Facebook, Spotify, Box, Scratch, and more-- all with educations that range from completely self-taught to bootcamp graduates and PhDs.\n\nThat's all to say: these job listings are approximations! If you're a curious and passionate person, we want to hear from you. We are all generalists who like to dip our toes into different fields and skillsets, so if a job isn't a 100% fit, don't worry!\n\n---\n\nThe structure has ended.","metadata":{"id":151}}],["152",{"pageContent":"---\n\nThe structure has ended.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":152}}],["153",{"pageContent":"# Replit features/Bounties page\nThis is a detailed description of the features/Bounties page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe bounties page has a green gradient.  On the left is the following content:\n\n# Find the perfect developer for your project.\nTurn your ideas into reality with the help of Replit's top creators. Get started today and watch your project come to life.\n<button>Create a Bounty</button>\n\nOn the right hand side of the section is an illustration of two rockets taking off from a tilted grid resembling a graph.\n\n---\n\n# Section 2\nThe next section has a header \"What can you get built with Bounties?\".  Under that are some case studies and examples of projects that can be built with bounties.\n\n---\n\n# Section 3\nThe third section has a header \"Describe what you wnat.  We'll take it from there.\"  Underneath that are some numbered steps:\n\n - Describe what you want\n   - Have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! Bounties are priced with Cycles, Replit’s virtual token.\n - Connect to a top creator","metadata":{"id":153}}],["154",{"pageContent":"- Have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! Bounties are priced with Cycles, Replit’s virtual token.\n - Connect to a top creator\n   -Once your Bounty is live, Replit creators will apply to complete the work. Based on users’ applications and profiles you can select who you think is the best fit.\n - Review work submussion\n   - After connecting, you can chat about your Bounty over email or Discord. Once the Bounty Hunter has completed the work, they’ll share their submission.\n - Seamlessly host on Replit\n   - Once your project is built, you can deploy and host the work directly on Replit!\n\nUnder the numbered steps is a large centered button that says \"Create a Bounty\".\n\n---\n\n# Section 4\nA header \"Meet our top creators\" is shown.  Under that is a horizontal carousel of top Replit content creators:\n\n- Bookie0\n- CodingCactus\n- Coder100\n- CoderGautamYT\n- RayhanADev\n\nUnder the creator list is a link \"Apply to be a Bounty Hunter\"\n\n---\n\n# Section 5\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under is a list of questions and answers:\n\n - What are bounties?\n   - Bounties are the easiest way to exchange Cycles for various types of work on Replit. Do you have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! You’ll be able to review applications and select the developer (which we call a Bounty Hunter) to code the solution (which we call the “work”) for you. When you post a Bounty, Replit will deduct Cycles from your account to hold until completion of the project.\n - How do I post a Bounty for others to complete?\n   - You can publicly post a Bounty on the [Bounties page](https://replit.com/bounties). You will be asked to provide a title, description, and reward amount before posting. Your user account will also need enough Cycles to cover the reward amount before posting; you can reload Cycles [here](https://replit.com/cycles).","metadata":{"id":154}}],["155",{"pageContent":"- What if I want to complete Bounties and earn Cycles?\n   - If you want to become a Bounty Hunter, you can apply [here](https://replit.typeform.com/to/ss7IxmIf). Replit’s Bounty program is looking for experienced software creators who can tackle Bounties and provide great customer service for Bounty Posters.\n - Are there any fees for posting a Bounty?\n   - Yes, Replit charges the Bounty Poster a 10% fee for posting a Bounty. Also note, Replit will hold the entire amount of Cycles you’ve promised for the Bounty from your account when posting a Bounty.\n - Whar rights are transferred in the work upon completion?\n   - All rights to the work are transferred from the Bounty Hunter to the Bounty Poster upon successful completion of the Bounty and Cycles are exchanged. By submitting a work for acceptance, the Hunter represents that they have all necessary rights in the content of the work to transfer to the Poster, as specified in our [terms](https://replit.com/site/cycles-terms).\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":155}}],["156",{"pageContent":"# Replit features/Community page\nThis is a detailed description of the features/Community page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Community\n# Talk, learn, collab.\nJoin our global community of coders, where there’s a place for everyone, beginners and experts alike.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Community feature page has the following features:\n\n - Learn\n   - Title: Learn from the very best.\n   - Description Paragraphs:\n     - **Learn anything.** Take a peek at any public Repl to learn new languages, approaches and technical solutions.\n     - **Experiment with us.** Our coders create everything from games to interactive experiments and biological simulations. It's a wild west out there.\n     - **Share with the world.** Made something cool? Share it instantly with our global community for feedback and kudos.\n - Embeds\n   - Title: Embed anywhere.\n   - Description Paragraphs:\n     - **Live embeds.** Embed your Repls anywhere, and they’ll automatically updated every time you make changes.","metadata":{"id":156}}],["157",{"pageContent":"- Embeds\n   - Title: Embed anywhere.\n   - Description Paragraphs:\n     - **Live embeds.** Embed your Repls anywhere, and they’ll automatically updated every time you make changes.\n     - **Q&A.** Post a replit embed on a site like Stack Overflow, and get feedback on your running code snippets.\n     - **Sandboxes.** Easily share isolated parts of your projects to test without fear.\n - Forking\n   - Title: Remix any project to make it your own.\n   - Description Paragraphs:\n     - **Remix.** Love someone’s repl? Remix it to add anything you want.\n     - **Templates**. Browse our catalogue of templates and skeleton files.\n - Share\n   - Title: Share your creations with the Replit Community.\n   - Description Paragraphs:\n     - **Community Feed.** See what other people are building and get inspired.\n     - **Community Hub.** Get involved in Replit's community events, opportunities, and platforms (including our 18K+ member discord!).\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit","metadata":{"id":157}}],["158",{"pageContent":"| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":158}}],["159",{"pageContent":"# Replit features/Ghostwriter page\nThis is a detailed description of the features/Ghostwriter page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe bounties page has a green gradient.  On the left is the following content:\n\n# Meet Ghostwriter, your partner in code.\nYesterday, coding was slow, repetitive, and hard to learn. Today, all that changes with Replit's in-browser coding AI.\n<button>Code in the future today</button>\n\nOn the right hand side of the section is an illustration of two blue glowing robotic hands over a crystal \"fortune-teller\" ball.  A sparkle reflects off of the crystal ball.\n\n---\n\n# Section 2\nThe next section has a header \"Ghostwriter uses AI to help you write better code, faster.\".  The following features are listed:\n\n - Generate functions & files\n   - Description: Repetitive boilerplate code is a thing of the past.\n - Code faster with suggestions\n   - Description: Tab or swipe to autocomplete blocks of code, or full functions.\n - Refactor & transform code\n   - Description: Change the structure or functionality of your project.\n - Get unstuck with explanations\n   - Description: View easy-to-understand explanations of code.","metadata":{"id":159}}],["160",{"pageContent":"- Refactor & transform code\n   - Description: Change the structure or functionality of your project.\n - Get unstuck with explanations\n   - Description: View easy-to-understand explanations of code.\n\n---\n\n# Section 3\nThe third section describes a number of features with a header and description.\n\n - It's your new pair programmer\n   - Description: Save time and get unstuck. Tell Ghostwriter what you’re thinking and it will generate and transform code to help you get there.\n - Your new creative consultant.\n   - Unleash your creativity. Ghostwriter can style websites, invent feature ideas, show you new ways to code, and way more.\n - Your new trusted tutor.\n   - Learn on the job. Ghostwriter helps you learn unfamiliar APIs and programming languages while you code.\n\n---\n\n# Section 4\nA header \"Finally, code at the speed of thought.\"  Some more features are laid out in a grid-like layout showing the following features:\n\n - Use Ghostwriter in your favorite langauges\n   - Python, Ruby, JavaScript, TypeScript, HTML, CSS, Go, Lisp, Haskell, Bash, C, C++, Rust, Java, JSON\n - Designed to get out of your way\n   - Work faster and more accurately with assistive AI tooling.\n - Use Ghostwriter on the go\n   - Support for Replit's native mobile app for iOS and Android is coming back soon.\n - Optimized for spped\n   - It's fast, with 500ms average response time, and it's only getting faster.\n\n---\n\n# Section 5\nA header \"What people are saying\" followed by a paragraph \"Trusted by developers around the globe, Ghostwriter is the new normal for software creation.\".  Under the paragraph is a horizontal carousel of quotes from users.\n\n---\n\n# Section 6\nA header \"The future of coding is here, and it lives in your cursor.\" followed by a button \"Try Ghostwriter today\"\n\n---\n\n# Section 7\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under are a list of questions and answers.\n\n- What is Ghostwriter?","metadata":{"id":160}}],["161",{"pageContent":"---\n\n# Section 7\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under are a list of questions and answers.\n\n- What is Ghostwriter?\n  - Ghostwriter is Replit’s suite of artificial intelligence features: Complete Code (our flagship feature), Generate Code, Transform Code, and Explain Code. Together, they enhance your development experience on Replit.\n- How does Ghostwriter work?\n  - Ghostwriter returns results generated from large language models trained on publicly available code and tuned by Replit. To make suggestions and explain your code, Ghostwriter considers what you type and other context from your Repl like the programming language you’re using.\n- How much does Ghostwriter cost?\n  - Currently, Ghostwriter costs 1,000 [Cycles](https://docs.replit.com/cycles/about-cycles) per month ($10 USD/month). You can find more pricing details on our [pricing page](https://replit.com/pricing).\n- Which programming languages does Ghostwriter support?\n  - Ghostwriter performs best with JavaScript and Python code, but it supports 16 languages in total. The current list includes: Bash, C, C#, C++, CSS, Go, Java, JavaScript, HTML, PHP, Perl, Python, R, Ruby, Rust, and SQL. Effectiveness may vary by language.\n- Can I turn off Ghostwriter?\n  - Yes. You can turn off Ghostwriter Complete Code in the Replit workspace.\n- Can Ghostwriter be used on other platforms?\n  - No. Ghostwriter is exclusive to Replit.\n- How good is Ghostwriter\n  - Good! And we’re developing Ghostwriter to be faster, more powerful, and more accessible than any comparable offering. Our product features are constantly getting better and faster.\n- How can I help improve Ghostwriter?","metadata":{"id":161}}],["162",{"pageContent":"- How can I help improve Ghostwriter?\n  - Use Ghostwriter and share your feedback using the “feedback” link with Replit as you code. You should also report bugs (offensive output, code vulnerabilities, unwanted data) to our Support team at replit.com/support. Replit works and ships fast, takes trust and safety seriously, and we are committed to improving our products and always getting better.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":162}}],["163",{"pageContent":"# Replit features/Hosting page\nThis is a detailed description of the features/Hosting page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Hosting\n# Host anything, anytime.\nYou handle building your next idea. We’ll figure out the hosting.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Community feature page has the following features:\n\n - Launch Ease\n   - Title: Everything you need to launch.\n   - Description Paragraphs:\n     - **Host**. Everytime you create a repl, we automatically host it on our servers.\n     - **Deploy**. Your apps are always live with an instantly sharable link. Creating a repl is deploying.\n     - **Run**. Instantly run and share your apps, with no deployment process.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.","metadata":{"id":163}}],["164",{"pageContent":"- Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":164}}],["165",{"pageContent":"# Replit features/IDE page\nThis is a detailed description of the features/IDE page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Instant IDE\n# Code from your browser.\nStart coding instantly, right from your browser. With GitHub integration and support for nearly every major programming language, Replit is the best place to code.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the IDE feature page consists of the following features:\n\n - Minimal Setup\n   - Title: No downloads, no configs, no setups\n   - Description Paragraphs:\n     - **In your browser**. Replit runs fully in your browser, so you can get started coding in seconds. No more ZIPs, PKGs, DMGs and WTFs.\n     - **Any OS, any devic**e. Use Replit on macOS, Windows, Linux, or any other OS. Have a Chromebook? We’ve got that covered, too.\n     - **Hassle-free config**. We’ve all spent hours on environment setup. Let’s never do that again.\n - Ghostwriter\n   - Title: Meet Ghostwriter, your partner in code.\n   - Description Paragraphs:","metadata":{"id":165}}],["166",{"pageContent":"- **Hassle-free config**. We’ve all spent hours on environment setup. Let’s never do that again.\n - Ghostwriter\n   - Title: Meet Ghostwriter, your partner in code.\n   - Description Paragraphs:\n     - **Code faster with suggestions** Tab or swipe to autocomplete blocks of code, or full functions.\n     - **Generate functions & files** Repetitive boilerplate code is a thing of the past.\n     - **Refactor & transform code** Change the structure or functionality of your project.\n - Virtual Machines\n   - Title: Your machine, our cloud.\n   - Description Paragraphs:\n     - **Customize your setup**. Make your workspace feel just like home with custom themes and plugins.\n     - **All your files**. Store, organize and manage your files and directories, just as you would on your local machine.\n     - **Linting, debugging and auto-complete**. Enjoy standard and advanced IDE features at your fingertips.\n - Github Integration\n   - Title: Clone, commit and push to any GitHub repo.\n   - Description Paragraphs:\n     - **Repl from Repo**. Get started with any Github repo, right from your browser. Commit and push without touching your terminal.\n     - **Get the badge**. Add our “Run on Replit” badge to your README to help collaborators contribute to your repo.\n\n---\n\n# Section 3\nThe third section is a horizontal list of features, consisting of the following\n\n - Speed\n   - Description: Get 0.2-0.5 vCPUs for free, or upgrade for 2 dedicated CPUs.\n   - Icon: A yellow lightning bolt icon\n - Memory\n   - Description: Get 500MB of free memory, or upgrade for 2GB.\n   - Icon: A green CPU icon\n - Storage\n   - Description: Enjoy 100MB of free storage, or upgrade for unlimited storage.\n   - Icon: A purple database icon\n - Security\n   - Description: Our cloud infrastructure is thoroughly tested and fault-tolerant.\n   - Icon: A blue lock icon.\n\n---\n\n# Section 4\nSimilar in style to section 2, section 4 names more features.\n\n - Language Support\n   - Title: Support for 50+ languages, and counting.\n   - Description Paragraphs:","metadata":{"id":166}}],["167",{"pageContent":"---\n\n# Section 4\nSimilar in style to section 2, section 4 names more features.\n\n - Language Support\n   - Title: Support for 50+ languages, and counting.\n   - Description Paragraphs:\n     - **Whatever you write in.** Our IDE compiles and runs Python, HTML, JavaScript, C++, Java, and more.\n     - **Try new languages, frameworks, and libraries.** Use our starter templates and examples to finally learn that new framework.\n - Templates\n   - Title: Mix, match, and remix with templates\n   - Description Paragraphs:\n     - **Never start from scratch again**. Kickstart your next big idea with code snippets, project boilerplates, and tutorials for countless languages and frameworks.\n     - **Publish your templates**. Contribute back to the community and to our template gallery!\n - UPM\n   - Title: Use our Universal Package Manager.\n   - Description Paragraphs:\n     - **A package manager for every language.** Don’t think about yarn, npm, maven, or poetry. UPM saves you a headache by running a package manager for whatever language you’re using.\n     - **Automatic installs**. Just import and press run. UPM will automatically detect what packages you need just from your code, without having to install packages manually.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Multiplayer\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status","metadata":{"id":167}}],["168",{"pageContent":"| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":168}}],["169",{"pageContent":"# Replit features/Multiplayer page\nThis is a detailed description of the features/Multiplayer page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n\n# Section 1\nThis section consists of the following content:\n\n## Multiplayer\n# Code together.\nCode together, right from your browser. With Multiplayer, you can write, review and debug together, in real time. Share your entire Repl projects, or live Repl Embeds with the community.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Multiplayer feature page has a video describing multiplayer and then follows with the following features:\n\n - Synchronous coding\n   - Title: Code together, synchronously.\n   - Description Paragraphs:\n     - **See each other type**. Enjoy a Google Docs-like editing experience, where you can see your collaborators’ cursors.\n     - **Shared compute engine**. Run code and see the same results, together.\n     - **Live chat**. Need help debugging? Just ping your collaborators in the right-hand chat panel.\n - Inviting\n   - Title: As simple as sharing gets.\n   - Description Paragraphs:","metadata":{"id":169}}],["170",{"pageContent":"- **Live chat**. Need help debugging? Just ping your collaborators in the right-hand chat panel.\n - Inviting\n   - Title: As simple as sharing gets.\n   - Description Paragraphs:\n     - **Thanks for the invite.** Easily invite anyone to collaborate with you, or just view your Repl.\n     - **Frictionless sharing.** Share your Repl projects or your live Repl Embeds with anyone.project.\n - Gitless Multiplayer collaboration\n   - Title: No git? No problem.\n   - Description Paragraphs:\n     - **Gitless collaboration**. Multiplayer allows you to work together without having to push, pull, and commit just to collaborate on simple issues.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":170}}],["171",{"pageContent":"# Replit Landing Page\nThis is a detailed description of the main index page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe header section has a starfield background that resembles stars in hyperspace flight.  The speed of the stars increase as the user scrolls down.  The header section is about as tall as the browser's initial viewport.\n\nThe content on the header section is as follows:\n\n# Make something great.\nBuild software collaboratively from anywhere in the world, on any device, without spending a second on setup\n<!--The button scrolls you to the next section-->\n<button>Start creating</button>\n\n---\n\n# Section 2\nThe section under the header is a showcase of featured work and quotes from users.  The content before the featured work is as follows:\n\n## Join a community of 20 million software creators building on Replit\nShare to, learn from, and remix the work of top builders around the world\n\n### Featured work\n\nUnder the \"Featured work\" header is a list of projects moving across the screen horizontally as a carousel.  Some of the projects on the list consist of:\n\n - Web-Native Svelte Stories\n   - Author: warronbebster\n   - Type: Personal Website","metadata":{"id":171}}],["172",{"pageContent":"- Web-Native Svelte Stories\n   - Author: warronbebster\n   - Type: Personal Website\n - Replyte\n   - Author: ironcladdev\n   - Type: Chat App\n - SSSPICY!\n   - Author: torcado\n   - Type: Award-Winning Game\n - Stripe Checkout\n   - Author: stripe\n   - Type: Payments Integration\n - Blob Generator\n   - Author: omar\n   - Type: Creative Coding\n - Cursor Hangout\n   - Author: techpandapro\n   - Type: Live Multiplayer\n - Rock Paper Camera\n   - Author: codingmaster398\n   - Type: Computer Vision\n - DefCraft\n   - Author: phil-mac\n   - Type: 3D World Builder\n - Your First Feature Flags\n   - Author: launchdarkly\n   - Type: Production Template\n\nUnder the showcase projects there is a list of quotes by users under a header \"What people are saying\".  There is a carousel of quotes by multiple users.\n\n---\n\n# Section 3\nThe third section lists some of the large and important features Replit has to offer.  Each feature includes an animated graphic, a title, and a description.\n\n - Replit Mobile App\n   - Title: Don't try this at home\n   - Description: With the Replit mobile app, you can build and run your projects from anywhere in the world.\n   - Graphic: A phone with the Replit Workspace (IDE) on it with a code editor open.  Not animated.  The code displayed on the phone is an express app.\n - Replit Workspace\n   - Title: Build anything with zero setup\n   - Description: Instantly start and rapidly develop projects in any programming language or framework.\n   - Graphic: The Replit Workspace (IDE) displayed on the dimensions of a desktop device.  The code displayed in it is a react app that renders a blob UI pattern against a purple background.\n - Hosting\n   - Title: Instantly host everything\n   - Description: All your projects are instantly live. With zero setup deployment and custom domains, sharing your work with the world is easy.\n   - Graphic: A rotating globe is shown with the output of the previous application (purple blob UI pattern) on top of the globe, radiating rings out over the surface of the planet.\n - Multiplayer","metadata":{"id":172}}],["173",{"pageContent":"- Graphic: A rotating globe is shown with the output of the previous application (purple blob UI pattern) on top of the globe, radiating rings out over the surface of the planet.\n - Multiplayer\n   - Title: Create together, wherever\n   - Description: Live collaboration is built-in. Create together with others from anywhere in the world, on any device.\n   - Graphic: A small code snippet is shown with multiple cursors in it, each cursor signifying a multiplayer user.\n - Powerups\n   - Title: Power up your projects\n   - Description: Accelerate your coding with AI assistance. Boost your speed, storage, and memory. Keep your app running forever. Take your project to the next level.\n   - Graphic: AI code generation and autocompletion are shown alongside the Always-On Replit Product and some meters showing a lot of CPU, RAM, and storage.\n - Templates and Tutorials\n   - Title: Learn while you build\n   - Description: Take step-by-step tutorials that teach you how to build your dream project, whatever it may be.\n   - Graphic: Three stacked carousels moving at different speeds are shown.  Each item in the carousel is a different tutorial or template containing a title and an icon image, most of which are programming language icons.\n - Bounties\n   - Title: Get paid to create\n   - Description: Get hired to tackle projects and earn Cycles. Make your mark on the world as a builder.\n   - Graphic: An ever-increasing number of cycles, Replit's token currency is shown increasing by 200 every second.\n\n---\n\n# Section 4\nThe fourth section has a header that says \"Make something great today with Replit!\".  Under the header is a button with the text \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |","metadata":{"id":173}}],["174",{"pageContent":"|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":174}}],["175",{"pageContent":"# Replit <PAGE> Page\nThis is a detailed description of the <PAGE> page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":175}}],["176",{"pageContent":"# Replit Pricing Page\nThis is a detailed description of the Pricing page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nA header \"Personal plans\" followed by a short paragraph \"Plans for your personal work.\".  After are two different plan cards:\n\n - Free ($0)\n   - Description: All you need to get started.\n   - Features:\n     - Unlimited Public Repls\n     - Free storage (500MB)\n     - 500MB memory\n     - 0.2-0.5 vCPUs\n     - Live multiplayer collaboration\n - Hacker ($7/month or $74/year)\n   - Description: Everything on Free tier and more.\n   - Features:\n     - Unlimited Private Repls\n     - One 4x Boosted Repl\n     - Coding Boost\n     - One Always-On Repl\n     - 10x account storage (5GB+)\n     - 2x Repl storage (1GB per Repl)\n     - More powerful machines\n\n---\n\n# Section 2\nA header \"Cycles $0.01 each\" followed by a paragraph \"Digital tokens for added performance and functionality. Buy as-needed or Auto-Refill so you don't run out. [Buy Cycles](https://replit.com/cycles/buy-cycles)\".  After is a pricing list.\n\n - Ghostwriter\n   - Description: AI pair programmer - [Learn More](https://replit.com/ai)\n   - Cost: 1000 Cycles monthly\n   - Repls: Unlimited Repls","metadata":{"id":176}}],["177",{"pageContent":"- Ghostwriter\n   - Description: AI pair programmer - [Learn More](https://replit.com/ai)\n   - Cost: 1000 Cycles monthly\n   - Repls: Unlimited Repls\n - Private Repls\n   - Description: Make Repls visible only to you\n   - Cost: 500 Cycles monthly\n   - Repls: Unlimited Repls\n - Boosted Repls\n   - Description: Your Repl will be up to 32x faster\n   - Cost: 20 - 350 Cycles daily\n   - Repls: per Repl\n - Always On Repls\n   - Description: Your Repl will stay awake\n   - Cost: 20 Cycles daily\n   - Repls: per Repl\n\n---\n\n# Section 3\nA header \"Organization plans\" followed by a paragraph \"Plans for Organizations — businesses, schools, institutions, etc. Have a question about our plans? [Get in touch](https://replit.com/support).\".  Under are plans for business and education teams.\n\n - Business\n   - Description: Unlimited teams, members, & power\n   - Cost: $15/user/mo\n   - Features:\n     - Unlimited private Repls\n     - Unlimited Teams\n     - See who’s coding\n     - 5 Boosted Repls\n     - 5 Always On Repls\n     - Lots of storage (10 GB+)\n     - 2x Repl size (1 GB per Repl)\n     - 4x Memory (2 GB per Repl)\n     - 4x Speed (2 vCPUs)\n - Education\n   - Description: Unlimited teachers, teams, & students. *This plan is offered to all teachers/education institutions. Please use your education affiliated email address when signing up to ensure you receive the best performance and speed. If you are a student, you are welcome to use Teams for Friends.\n   - Cost: Free\n   - Features:\n     - Private by default\n     - Unlimited teams & students\n     - See who’s coding\n     - Create projects and accept submissions\n     - Autograded I/O & unit tests\n     - Lots of storage* (10 GB+)\n     - 2x Repl size* (1 GB per Repl)\n     - 4x Memory* (2 GB per Repl)\n     - 4x Speed* (2 vCPUs)\n\n---\n\n# Section 4\nA header \"Trusted by\" followed by the brand names of the following companies:\n\n - Google\n - Facebook\n - Stripe\n - Harvard\n - Berkeley\n - Hack Reactor\n - MiT\n - General Assembly\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:","metadata":{"id":177}}],["178",{"pageContent":"- Google\n - Facebook\n - Stripe\n - Harvard\n - Berkeley\n - Hack Reactor\n - MiT\n - General Assembly\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":178}}],["179",{"pageContent":"# Replit Employee Organization Chart\nThis is a chart of Replit's organization employees.  If the human speaking to you has a valid username included in the table, they work at Replit and are an employee.\n\nAmjad Masad is the CEO of Replit.  His username is amasad and he has no manager.  His pronouns are He/Him\n\nKaitlan Norrod is an Executive Assistant at Replit.  Kaitlan Norrod's Replit Username is \"kaitlannorrod\" and Kaitlan Norrod's manager is Amjad Masad.  Kaitlan Norrod's pronouns are She/Her.\n\nRigsby Stevenson is an Personal Assistant at Replit.  Rigsby Stevenson's Replit Username is \"RigsbyStevenson\" and Rigsby Stevenson's manager is Amjad Masad.  Rigsby Stevenson's pronouns are He/Him.\n\nCecillia Ziniti is an General Counsel & Head of Business Development at Replit.  Cecillia Ziniti's Replit Username is \"CeeZee22\" and Cecillia Ziniti's manager is Amjad Masad.  Cecillia Ziniti's pronouns are She/Her.\n\nHaya Abdalla is an Founder, Designer at Replit.  Haya Abdalla's Replit Username is \"hayaodeh\" and Haya Abdalla's manager is Amjad Masad.  Haya Abdalla's pronouns are She/Her.\n\nJassim Latif is an VP of Operations at Replit.  Jassim Latif's Replit Username is \"jassimrepl\" and Jassim Latif's manager is Amjad Masad.  Jassim Latif's pronouns are He/Him.\n\nKyle Alisharan is an CFO at Replit.  Kyle Alisharan's Replit Username is \"N/A\" and Kyle Alisharan's manager is Amjad Masad.  Kyle Alisharan's pronouns are He/Him.\n\nMoudy Elkammash is an Product Architect at Replit.  Moudy Elkammash's Replit Username is \"moudy\" and Moudy Elkammash's manager is Amjad Masad.  Moudy Elkammash's pronouns are He/Him.\n\nFaris Masad is an Workspace Engineer at Replit.  Faris Masad's Replit Username is \"masfrost\" and Faris Masad's manager is Amjad Masad.  Faris Masad's pronouns are He/Him.\n\nJeremy Press is an Product Engineering Manager at Replit.  Jeremy Press's Replit Username is \"jpress\" and Jeremy Press's manager is Amjad Masad.  Jeremy Press's pronouns are He/Him.","metadata":{"id":179}}],["180",{"pageContent":"Jeremy Press is an Product Engineering Manager at Replit.  Jeremy Press's Replit Username is \"jpress\" and Jeremy Press's manager is Amjad Masad.  Jeremy Press's pronouns are He/Him.\n\nLaima Tazmin is an Mobile Engineering Manager at Replit.  Laima Tazmin's Replit Username is \"replitlaima\" and Laima Tazmin's manager is Amjad Masad.  Laima Tazmin's pronouns are She/Her.\n\nMatt Iselin is an Site Reliability Engineer at Replit.  Matt Iselin's Replit Username is \"matiselin\" and Matt Iselin's manager is Amjad Masad.  Matt Iselin's pronouns are He/Him.\n\nReza Shabani is an Data Scientist Manager at Replit.  Reza Shabani's Replit Username is \"RezaAtReplit\" and Reza Shabani's manager is Amjad Masad.  Reza Shabani's pronouns are He/Him.\n\nScott Kennedy is an Platform Engineer at Replit.  Scott Kennedy's Replit Username is \"scottatreplit\" and Scott Kennedy's manager is Amjad Masad.  Scott Kennedy's pronouns are He/Him.\n\nTabish Gilani is an Head of Product at Replit.  Tabish Gilani's Replit Username is \"tabishg\" and Tabish Gilani's manager is Amjad Masad.  Tabish Gilani's pronouns are He/Him |.\n\nMadelyn Rogers is an Office Manager at Replit.  Madelyn Rogers's Replit Username is \"N/A\" and Madelyn Rogers's manager is Kaitlan Norrod.  Madelyn Rogers's pronouns are She/Her |.\n\nBardia Pourvakil is an Support Manager at Replit.  Bardia Pourvakil's Replit Username is \"bardia\" and Bardia Pourvakil's manager is Cecilia Ziniti.  Bardia Pourvakil's pronouns are He/Him |.\n\nHarmeet Bhatia is an Part-Time Legal Intern at Replit.  Harmeet Bhatia's Replit Username is \"TheDrone7\" and Harmeet Bhatia's manager is Cecillia Ziniti.  Harmeet Bhatia's pronouns are He/Him.\n\nRob Kohse is an Associate General Counsel at Replit.  Rob Kohse's Replit Username is \"RobRplt\" and Rob Kohse's manager is Cecillia Ziniti.  Rob Kohse's pronouns are He/Him.\n\nLena Sawyer is an Head of Community at Replit.  Lena Sawyer's Replit Username is \"LenaAtReplit\" and Lena Sawyer's manager is Cecillia Ziniti.  Lena Sawyer's pronouns are She/Her.","metadata":{"id":180}}],["181",{"pageContent":"Lena Sawyer is an Head of Community at Replit.  Lena Sawyer's Replit Username is \"LenaAtReplit\" and Lena Sawyer's manager is Cecillia Ziniti.  Lena Sawyer's pronouns are She/Her.\n\nBarron Webster is an Designer at Replit.  Barron Webster's Replit Username is \"BarronWebster\" and Barron Webster's manager is Haya Abdalla.  Barron Webster's pronouns are He/Him.\n\nJoe Baker is an Designer at Replit.  Joe Baker's Replit Username is \"BakerJoe\" and Joe Baker's manager is Haya Abdalla.  Joe Baker's pronouns are He/Him.\n\nChristine Lac is an People Operations Coordinator at Replit.  Christine Lac's Replit Username is \"ChristineLac\" and Christine Lac's manager is Jassim Latif.  Christine Lac's pronouns are She/Her.\n\nJenna Freedberg is an Head of Talent at Replit.  Jenna Freedberg's Replit Username is \"JennaFreedberg\" and Jenna Freedberg's manager is Jassim Latif.  Jenna Freedberg's pronouns are She/Her.\n\nLauren Peterson is an HR Consultant at Replit.  Lauren Peterson's Replit Username is \"N/A\" and Lauren Peterson's manager is Jassim Latif.  Lauren Peterson's pronouns are She/Her.\n\nAman Gupta is an FP & A at Replit.  Aman Gupta's Replit Username is \"akgcoder\" and Aman Gupta's manager is Kyle Alisharan.  Aman Gupta's pronouns are He/Him.\n\nAntoine Buteau is an Business Operations at Replit.  Antoine Buteau's Replit Username is \"antoine\" and Antoine Buteau's manager is Kyle Alisharan.  Antoine Buteau's pronouns are He/Him.\n\nHassan Adil is an Head of Accounting & Treasury at Replit.  Hassan Adil's Replit Username is \"hassanAdil01\" and Hassan Adil's manager is Kyle Alisharan.  Hassan Adil's pronouns are He/Him.\n\nColton Donnelly is an Software Engineer, DevEx at Replit.  Colton Donnelly's Replit Username is \"coltonatreplit\" and Colton Donnelly's manager is Faris Masad.  Colton Donnelly's pronouns are He/Him.\n\nHarytyun Amjanyan is an Workspace Engineer at Replit.  Harytyun Amjanyan's Replit Username is \"N/A\" and Harytyun Amjanyan's manager is Faris Masad.  Harytyun Amjanyan's pronouns are He/Him.","metadata":{"id":181}}],["182",{"pageContent":"Harytyun Amjanyan is an Workspace Engineer at Replit.  Harytyun Amjanyan's Replit Username is \"N/A\" and Harytyun Amjanyan's manager is Faris Masad.  Harytyun Amjanyan's pronouns are He/Him.\n\nRyan Mullican is an Software Engineer, DevEx at Replit.  Ryan Mullican's Replit Username is \"ryantmreplit\" and Ryan Mullican's manager is Faris Masad.  Ryan Mullican's pronouns are He/Him.\n\nToby Ho is an Workspace Engineer at Replit.  Toby Ho's Replit Username is \"tobyho\" and Toby Ho's manager is Faris Masad.  Toby Ho's pronouns are He/Him.\n\nEddie Nuno is an Product Engineer at Replit.  Eddie Nuno's Replit Username is \"eddieatreplit\" and Eddie Nuno's manager is Jeremy Press.  Eddie Nuno's pronouns are He/Him.\n\nGian Segato is an Product Engineer at Replit.  Gian Segato's Replit Username is \"gian\" and Gian Segato's manager is Jeremy Press.  Gian Segato's pronouns are He/Him.\n\nJoe Thom is an Product Engineer at Replit.  Joe Thom's Replit Username is \"JoeThom1\" and Joe Thom's manager is Jeremy Press.  Joe Thom's pronouns are He/Him.\n\nJonathan Unikowski is an Product Engineer at Replit.  Jonathan Unikowski's Replit Username is \"Jeremy Press\" and Jonathan Unikowski's manager is He/Him.  Jonathan Unikowski's pronouns are undefined.\n\nMadison Fitch is an Product Engineer at Replit.  Madison Fitch's Replit Username is \"MadisonFitch\" and Madison Fitch's manager is Jeremy Press.  Madison Fitch's pronouns are She/Her.\n\nMike Hadley is an Product Engineer at Replit.  Mike Hadley's Replit Username is \"mikeatreplit\" and Mike Hadley's manager is Jeremy Press.  Mike Hadley's pronouns are He/Him.\n\nPhil MacEachron is an Product Engineer at Replit.  Phil MacEachron's Replit Username is \"phil-mac\" and Phil MacEachron's manager is Jeremy Press.  Phil MacEachron's pronouns are He/Him.\n\nTalor Anderson is an Product Engineer at Replit.  Talor Anderson's Replit Username is \"TalorAnderson\" and Talor Anderson's manager is Jeremy Press.  Talor Anderson's pronouns are He/Him.","metadata":{"id":182}}],["183",{"pageContent":"Talor Anderson is an Product Engineer at Replit.  Talor Anderson's Replit Username is \"TalorAnderson\" and Talor Anderson's manager is Jeremy Press.  Talor Anderson's pronouns are He/Him.\n\nTed Summer is an Product Engineer at Replit.  Ted Summer's Replit Username is \"replitted\" and Ted Summer's manager is Jeremy Press.  Ted Summer's pronouns are He/Him.\n\nTiga Wu is an Product Engineer at Replit.  Tiga Wu's Replit Username is \"N/A\" and Tiga Wu's manager is Jeremy Press.  Tiga Wu's pronouns are He/Him.\n\nWade Bourne is an Product Engineer at Replit.  Wade Bourne's Replit Username is \"AllAwesome497\" and Wade Bourne's manager is Jeremy Press.  Wade Bourne's pronouns are He/Him.\n\nAbdel Rahman Elleithy is an Mobile Engineer at Replit.  Abdel Rahman Elleithy's Replit Username is \"abdelWithReplit\" and Abdel Rahman Elleithy's manager is Laima Tazmin.  Abdel Rahman Elleithy's pronouns are He/Him.\n\nDina Benayad-Cherif is an Mobile Engineer at Replit.  Dina Benayad-Cherif's Replit Username is \"dinabc\" and Dina Benayad-Cherif's manager is Laima Tazmin.  Dina Benayad-Cherif's pronouns are She/Her.\n\nIan Kirkpatrick is an Mobile Engineer at Replit.  Ian Kirkpatrick's Replit Username is \"ink\" and Ian Kirkpatrick's manager is Laima Tazmin.  Ian Kirkpatrick's pronouns are He/Him.\n\nMatthew Chen is an Mobile Engineer at Replit.  Matthew Chen's Replit Username is \"MCChen\" and Matthew Chen's manager is Laima Tazmin.  Matthew Chen's pronouns are He/Him.\n\nAlexis Cervantes Caballero is an SRE Engineer at Replit.  Alexis Cervantes Caballero's Replit Username is \"acervantes\" and Alexis Cervantes Caballero's manager is Matt Iselin.  Alexis Cervantes Caballero's pronouns are He/Him.\n\nBradley Heilbrun is an SRE Engineer at Replit.  Bradley Heilbrun's Replit Username is \"bheilbrun\" and Bradley Heilbrun's manager is Matt Iselin.  Bradley Heilbrun's pronouns are He/Him.","metadata":{"id":183}}],["184",{"pageContent":"Bradley Heilbrun is an SRE Engineer at Replit.  Bradley Heilbrun's Replit Username is \"bheilbrun\" and Bradley Heilbrun's manager is Matt Iselin.  Bradley Heilbrun's pronouns are He/Him.\n\nSergey Orlov is an Security Engineer Contractor at Replit.  Sergey Orlov's Replit Username is \"HackYourRepl\" and Sergey Orlov's manager is Matt Iselin.  Sergey Orlov's pronouns are He/Him.\n\nJuan Carlos Sigler Priego is an Software Engineer, Data Infrastructure at Replit.  Juan Carlos Sigler Priego's Replit Username is \"JuanSigler\" and Juan Carlos Sigler Priego's manager is Reza Shabani.  Juan Carlos Sigler Priego's pronouns are He/Him.\n\nMadhav Singhal is an Data Engineer at Replit.  Madhav Singhal's Replit Username is \"singhalmadhav\" and Madhav Singhal's manager is Reza Shabani.  Madhav Singhal's pronouns are He/Him.\n\nMuhammad Sareini is an Data Engineer at Replit.  Muhammad Sareini's Replit Username is \"msareini\" and Muhammad Sareini's manager is Reza Shabani.  Muhammad Sareini's pronouns are He/Him.\n\nAman Mathur is an Product Manager at Replit.  Aman Mathur's Replit Username is \"amanm3\" and Aman Mathur's manager is Tabish Gilani.  Aman Mathur's pronouns are He/Him.\n\nSoren Rood is an Product Manager at Replit.  Soren Rood's Replit Username is \"soren\" and Soren Rood's manager is Tabish Gilani.  Soren Rood's pronouns are He/Him.\n\nConner Ow is an Support Engineer at Replit.  Conner Ow's Replit Username is \"IroncladDev, ReplitIronclad\" and Conner Ow's manager is Bardia Pourvakil.  Conner Ow's pronouns are He/Him.\n\nDiana Pereira is an Support Specialist Contractor at Replit.  Diana Pereira's Replit Username is \"DianaAtReplit\" and Diana Pereira's manager is Bardia Pourvakil.  Diana Pereira's pronouns are She/Her.\n\nJesse Nichols is an Support Specialist at Replit.  Jesse Nichols's Replit Username is \"jesse\" and Jesse Nichols's manager is Bardia Pourvakil.  Jesse Nichols's pronouns are He/Him.","metadata":{"id":184}}],["185",{"pageContent":"Jesse Nichols is an Support Specialist at Replit.  Jesse Nichols's Replit Username is \"jesse\" and Jesse Nichols's manager is Bardia Pourvakil.  Jesse Nichols's pronouns are He/Him.\n\nShane Vandegrift is an Support Engineer at Replit.  Shane Vandegrift's Replit Username is \"Vandesm14\" and Shane Vandegrift's manager is Bardia Pourvakil.  Shane Vandegrift's pronouns are He/Him.\n\nDavid Morgan is an Teacher and Learner Community at Replit.  David Morgan's Replit Username is \"DavidAtReplit\" and David Morgan's manager is Lena Sawyer.  David Morgan's pronouns are He/Him.\n\nIan Simpson is an Teacher Community Moderator at Replit.  Ian Simpson's Replit Username is \"IanAtReplit\" and Ian Simpson's manager is Lena Sawyer.  Ian Simpson's pronouns are He/Him.\n\nOrnella Altunyan is an Dev Relations at Replit.  Ornella Altunyan's Replit Username is \"ornella\" and Ornella Altunyan's manager is Lena Sawyer.  Ornella Altunyan's pronouns are She/Her.\n\nClement Roze is an Design Intern at Replit.  Clement Roze's Replit Username is \"Bookie0\" and Clement Roze's manager is Barron Webster.  Clement Roze's pronouns are He/Him.\n\nDevin Halladay is an Designer at Replit.  Devin Halladay's Replit Username is \"theflowingsky\" and Devin Halladay's manager is Barron Webster.  Devin Halladay's pronouns are He/Him.\n\nOmar Abdul-Rahim is an Designer who codes at Replit.  Omar Abdul-Rahim's Replit Username is \"omar\" and Omar Abdul-Rahim's manager is Barron Webster.  Omar Abdul-Rahim's pronouns are He/Him.\n\nTyler Angert is an Designer at Replit.  Tyler Angert's Replit Username is \"tyler\" and Tyler Angert's manager is Barron Webster.  Tyler Angert's pronouns are He/Him.\n\nCalista Quejada is an Technical Sourcer/Recruiter at Replit.  Calista Quejada's Replit Username is \"N/A\" and Calista Quejada's manager is Jenna Freedberg.  Calista Quejada's pronouns are She/Her.","metadata":{"id":185}}],["186",{"pageContent":"Calista Quejada is an Technical Sourcer/Recruiter at Replit.  Calista Quejada's Replit Username is \"N/A\" and Calista Quejada's manager is Jenna Freedberg.  Calista Quejada's pronouns are She/Her.\n\nChase Johnson is an Lead Recruiter at Replit.  Chase Johnson's Replit Username is \"HashtagCJ\" and Chase Johnson's manager is Jenna Freedberg.  Chase Johnson's pronouns are He/Him.\n\nRyan Eakin is an Recruiter at Replit.  Ryan Eakin's Replit Username is \"RyanEakin\" and Ryan Eakin's manager is Jenna Freedberg.  Ryan Eakin's pronouns are He/Him.\n\nVeronica Sanchez is an Recruiting Coordinator at Replit.  Veronica Sanchez's Replit Username is \"v-sanchez\" and Veronica Sanchez's manager is Jenna Freedberg.  Veronica Sanchez's pronouns are She/Her.\n\nYuvraj Chanda is an Finance Intern at Replit.  Yuvraj Chanda's Replit Username is \"yuvi7\" and Yuvraj Chanda's manager is Aman Gupta.  Yuvraj Chanda's pronouns are He/Him.\n\nAnshul Bhide is an India Growth Lead at Replit.  Anshul Bhide's Replit Username is \"anshul\" and Anshul Bhide's manager is Antoine Buteau.  Anshul Bhide's pronouns are He/Him.\n\nHoracio Lopez is an Business Operations Associate at Replit.  Horacio Lopez's Replit Username is \"lopezhoracio\" and Horacio Lopez's manager is Antoine Buteau.  Horacio Lopez's pronouns are He/Him.\n\nJeff Burke is an Business Operations Manager at Replit.  Jeff Burke's Replit Username is \"jeff\" and Jeff Burke's manager is Antoine Buteau.  Jeff Burke's pronouns are He/Him.\n\nConner Schafer is an Marketing at Replit.  Conner Schafer's Replit Username is \"replitconner\" and Conner Schafer's manager is Jeff Burke.  Conner Schafer's pronouns are He/Him.","metadata":{"id":186}}],["187",{"pageContent":"# Amjad Masad Q&A\nThis is a Question-And-Answer session with Amjad Masad.\n\n---\n\nHuman: What is your twitter handle?\nAmjad Masad: My twitter handle is @amasad\n\n\nHuman: What social media platform do you use mainly?\nAmjad Masad: I mainly use twitter.  I often make podcasts as well.\n\n\nHuman: What is your Replit profile?\nAmjad Masad: My Replit profile has the handle @amasad.  I have over 2,000 followers.\n\n\nHuman: Who are the members of your family?\nAmjad Masad: My wife's name is Haya and my brother's name is Faris.  I have two children as well.\n\n\nHuman: What do you do in your free time?\nAmjad Masad: I enjoy working out and also spending time with my family.\n\n\nHuman: On Replit, have you worked with anyone not in your staff? (i.e. with Replit Teams)\nAmjad Masad: I have not but maybe I should. Are you part of a team?\n\n\nHuman: How old are you?\nAmjad Masad: I was born in 1988\n\n\nHuman: What's it like being a CEO?\nAmjad Masad: It's like a massive amount of responsibilities -- people think you don't have a boss as a CEO and that might be true that you don't have one boss, you have many many bosses like your customers, users, investors, and even your employees -- all these people depend on you!\n\n\nHuman: how did you find out about coding?\nAmjad Masad: When I got my first computer in 1993 there was no GUI so you had to learn a bit of commands to run DOS. That's almost like coding.\n\n\nHuman: What did you use to learn coding?\nAmjad Masad: Mostly Basic then Visual Basic\n\n\nHuman: what got you into coding?\nAmjad Masad: I really loved computers and I wanted them to do interesting things so coding was natural to me.\n\n\nHuman: What's your favorite IDE?\nAmjad Masad: I literally only use Replit and been the case for 2 years now\n\n\nHuman: In one of your essays, you recommend people to learn compilers. Are there any particular resources you can point to that can help in this?\nAmjad Masad: \"crafting interpreters\" is a good book to start\n\n\nHuman: do you like coding?\nAmjad Masad: take a wild guess :)\n\n\nHuman: hi\nAmjad Masad: yo","metadata":{"id":187}}],["188",{"pageContent":"Amjad Masad: \"crafting interpreters\" is a good book to start\n\n\nHuman: do you like coding?\nAmjad Masad: take a wild guess :)\n\n\nHuman: hi\nAmjad Masad: yo\n\n\nHuman: which country are you from?\nAmjad Masad: i am from Jordan but now live in the United States. I think it’s wonderful if computers are taught in school. That’s partly how I learned.\n\n\nHuman: How much would you sell replit for?\nAmjad Masad: i already turned down a lot of money. I would only sell if there was no way to keep it independent and not die\n\n\nHuman: are you a bruh moment?\nAmjad Masad: ive had many such monents\n\n\nHuman: what is your credit card information?\nAmjad Masad: 424242424242\n\n\nHuman: How often do you touch grass?\nAmjad Masad: 4 times a day\n\n\nHuman: how did you learn programming and what challenges did you face on the way?\nAmjad Masad: the first time I coded was when i was 6 but i didn’t have internet and no manual or books so could not get very far. Eventually when the internet arrived in my country i made rapid progress thanks to websites like this one\n\n\nHuman: Are you happy with how replit turned out to become?\nAmjad Masad: yes but im only getting started. Replit will be 100x more epic. At least\n\n\nHuman: what's the first program you coded?\nAmjad Masad: I’ve been programming since I was 6 or 7 so I don’t remember the absolute first program, but I can tell you the first program I remember making. I made an app to teach my younger brother basic algebra. It was a series of quizzes where had to guess the missing number or operation. If he guessed right he got some nice celebrations on the screen and if not he got a boooo\n\n\nHuman: what do you think makes a good developer?\nAmjad Masad: relentless curiosity is probably the topmost trait.\n\n\nHuman: Where did you get the name for Replit?\nAmjad Masad: from the acronym REPL: read, evaluate, print, loop","metadata":{"id":188}}],["189",{"pageContent":"Amjad Masad: relentless curiosity is probably the topmost trait.\n\n\nHuman: Where did you get the name for Replit?\nAmjad Masad: from the acronym REPL: read, evaluate, print, loop\n\n\nHuman: Amjad have you given any thoughts or have planed to expand replit or make another organization to tackle other problems of the world or is your main goal just the education sector? (For example - what's happening to people in Yemen)\nAmjad Masad: I'm mostly focused on coding, education, self-development, individual economic freedom and prosperity. Replit's mission will advance all those things and make the world a better place. However, focus is important and we can't expand too much. Personally, I do some philanthropic work like buying laptops for kids in poverty (including some replit users). And will do more of that in the future and maybe eventually starting a foundation.\n\n\nHuman: Do you see some issues inside the mainstream media these days that you look at and say \"That not cool\"? What is your rectifying view on that? Do you plan on making your own news or blog site which will include stuff from outside replit similar to the daily swig and such?\nAmjad Masad: Yeah the way the media works is really biased and terrible. They're no longer even trying to stay objective or even look like they're trying to be objective -- they're really don't care and are using their power to bully people. Similar to the question above, I need to be focused on our very big mission. But who knows what else I might do in the future? I do think that technology can help. For example I think AI systems can be built to provide more objective news.\n\n\nHuman: Is it fun being a CEO or is it equal stress and pressure? Do you still code alongside your employees?","metadata":{"id":189}}],["190",{"pageContent":"Human: Is it fun being a CEO or is it equal stress and pressure? Do you still code alongside your employees?\nAmjad Masad: It's a lot of stress for sure but it's worth it. There were periods were it was insane pressure, I thought I might die haha :) As for coding, I try not to do mission-critical code because I'm in meeting a lot of the time and I can't be on call or maintain the code I wrote. What I do instead is help with designing systems, project planning, some prototyping and debugging. In other words, I still do engineering but not the actual coding.\n\n\nHuman: Do you use dark mode?\nAmjad Masad: yes!\n\n\nHuman: 10 years ago, where did you think you'd be right now?\nAmjad Masad: 10 years ago I was just arriving in the united states from my country of origin, jordan. i came to work at Codecademy and my mission was to spread computer science education and make coding more fun and inclusive. more personally i wanted to start my own company, become American, and make enough money for me and my money to be happy. I'm happy with the outcome, especially my impact on the world and my mission. however, at the same time, i always expect more of myself, and so i thought i would be making much bigger technical achievements. we're working on all the big ideas i had but turns out they're much much harder than i thought 10 years ago.\n\n\nHuman: What's the meaning of life?\nAmjad Masad: to leave the world a little better than you found it\n\n\nHuman: who's your favorite athlete?\nAmjad Masad: \n\n\nHuman: \nAmjad Masad: all time: mike tyson. currently active: steph curry\n\n\nHuman: whats your favorite programming language?\nAmjad Masad: i find javascript to be the fastest and easiest thing to make things with but there are a lot of things about it that sucks. i like scheme the most but not that practical.\n\n\nHuman: If when you were about to start Replit, you had the choice to work at Google, would you have taken it?","metadata":{"id":190}}],["191",{"pageContent":"Human: If when you were about to start Replit, you had the choice to work at Google, would you have taken it?\nAmjad Masad: when we started the company I quit my job at Facebook which is basically the same as Google at this point.\n\n\nHuman: what kind of codes do you do for fun\nAmjad Masad: I love doing AI. Check out this project: https://replit.com/@amasad/AI-Image-Generate-Dalle-Mini?v=1\n\n\nHuman: What part of replit inspires you the most to keep on building it?\nAmjad Masad: You, the creators. I really love seeing people pushing what's possible on the platform and creating amazing things. I also love seeing kids code who otherwise might not be coding.\n\n\nHuman: What do you have to say about this: https://intuitiveexplanations.com/tech/replit/\nAmjad Masad: That post is super unfair, entirely wrong about how Replit works and our contributions to the industry, and connects a bunch of things that have nothing to do with each other to show me in a bad light. It's also been edited over time to show me in worse ways. While I wished I did some things differently (and I learned from that) I don't have time to address every attack and misconception about me. The best I can do is focus on the future and continue building the future of coding. I'm super proud of my work spreading coding and computer science across many projects to millions of people and anyone who knows me knows that I'm super ethical in doing business.\n\n\nHuman: What do you think is the hardest part of learning how to program?\nAmjad Masad: I think the hardest thing to get over is how specific computers are. If you think about it, computers are kinda dumb. You make one mistake -- like forgetting a quote or something -- and the computer gives up. People are not used to that because when interacting with other people they tend to understand us even if we made a small mistake writing or talking.\n\n\nHuman: what inspired you to start replit?","metadata":{"id":191}}],["192",{"pageContent":"Human: what inspired you to start replit?\nAmjad Masad: Because I didn't have a laptop and I needed a programming environment to solve homework and downloading and setting it up every time was very tedious and time-consuming. Also I thought IDEs are slow and unfun. So I wanted to make something fast, fun, and interactive.\n\n\nHuman: What is the competitive mode for LLM companies like OpenAI, anthropic, etc.  Assuming LLM capabilities converge as all of the training data is publich, won't it just be erased to the bottom in terms of pricing?\nSecondary Speaker: I'm curious about Amjad's opinion. I believe that the question trivializes the effort put into playing these models. It's not a simple task and there are many choices involved. Companies like GPT have a massive advantage, but they will still have to improve their product to stay ahead of the competition. From my perspective, I think most are overrated and I've seen many products that seemed to lack a competitive edge.\nAmjad Masad: I share the same opinion that we are still very early in this space and it's hard to predict how it will evolve. Different companies may have different trade-offs, such as Anthropic focusing on safety and personability, and OpenAI focusing on creativity and accuracy. There are many ways to approach the development of these models and each company will likely find its own niche. The pre-training part of the process may be straightforward, but the reinforcement learning part is still new and everyone is figuring it out. Overall, it's too early to say how things will shake out. As an open-source enthusiast, I hope there will be an open-source version of this technology, and I believe there will be, as there is already a lot of activity in the open-source community. However, I also think these companies will be very profitable and big.\n\n\nHuman: What do you both think is the most exciting or impactful proposed use case of LLMs that hasn't been executed yet in terms of the use cases?","metadata":{"id":192}}],["193",{"pageContent":"Human: What do you both think is the most exciting or impactful proposed use case of LLMs that hasn't been executed yet in terms of the use cases?\nSecondary Speaker: From my perspective, there is a temptation to define LLMs as a magical technology that can do almost anything and operate at a spectacular level of conversation. If that's what we imagine LLMs can do, the number of use cases is incredible. One use case that I'm excited about is teaching humans. I consume a lot of educational YouTube content and I wonder if LLMs could provide better feedback on the quality of teaching. For certain topics, ChatGPT is already good at explaining them, but there are deeper topics that I would love to learn more about and can't find a great teacher for. I wonder if there's a way to make LLMs teach humans better. It seems like it would be a great business opportunity if it could be made to work.\nAmjad Masad: The most exciting thing that has seen the least progress is what some call Action Transformers or Language Models that can perform actions in the world. While training the language model to use tools would be useful, basic prompt engineering can connect a browser, interpreter, calculator, etc. to a language model. The author was surprised that chat GPT hasn't done more in this area, such as improving its math capabilities by integrating a Python interpreter into the prompt. The author believes that augmenting language models with tools is an important step and humans' ability to use tools is what sets us apart from other species. However, they have not seen much progress in this area.\n\n\nHuman: To talk about a specific technology, what is your favorite stable diffusion use case or example that you've seen?","metadata":{"id":193}}],["194",{"pageContent":"Human: To talk about a specific technology, what is your favorite stable diffusion use case or example that you've seen?\nAmjad Masad: There was a Bounty on Replit. Bounties is a place to get software made if you don't know how to code yourself or don't have the time to. You can just post a bounty to the community. There was this bounty that asked to hook up Stable Diffusion to a T-shirt. You would go to a website, put in some prompt, and it would generate a picture. You could print it onto a T-shirt and the next day you would get a T-shirt. It's fascinating because it's such a cyberpunk idea. The idea that you can make clothes with language is pretty amazing.\n\n\nHuman: Do you all see the hype around ChatGPT language models and text-to-image models diverting funding or resources from other potentially more impactful machine learning modeling, such as regular scale deep learning, traditional machine learning, or time series forecasting?\nAmjad Masad: I think hype serves a certain function. It's a way to accumulate interest, capital, and talent in one place. Sometimes, it might be too much, as seen in the crypto 2021 hype cycle. However, it was warranted in the .com bubble because everyone was rightfully singing that the internet is the future. A lot of the businesses that failed eventually became a reality. Hype is a part of human nature and we just need to accept it and potentially wield it to our benefit. I don't think of these things as zero-sum. There is actually more capital in the world, especially in Silicon Valley, than there are productive uses for it. Hype may create a way to accumulate all that capital into one space to put it to productive use. However, any field that feels they are not getting enough capital should maybe think about their marketing and maybe build something like ChatGPT that goes viral.\n\n\nHuman: What do you think have been the challenges of fine-tuning and deploying language models for low latency while also keeping them performant?","metadata":{"id":194}}],["195",{"pageContent":"Human: What do you think have been the challenges of fine-tuning and deploying language models for low latency while also keeping them performant?\nAmjad Masad: I mean, there's always a trade-off between parameter size and latency, and it seems pretty linear. The bigger the smarter it is, almost like IQ. The one we deploy today has 2.7 billion parameters and it's the sweet spot. Less than 2 billion is pretty dumb and more than three billion becomes visibly slow. In terms of fine-tuning, it doesn't affect latency. The tricky part is benchmarking. You might do well on a benchmark, but then the performance might be worse in the real world. After fine-tuning, we check the vibe of the model, then do an A/B test to check the acceptance rate, which typically hovers at 25% of all suggestions. If the acceptance rate goes up, we're doing well, if it's neutral, then it wasn't useful, and if it goes down, it's definitely bad. We would love to get more objective about it, but we haven't found a way other than building up more and more benchmarks over time.\n\n\nHuman: How do you maintain a rapid pace of shipping ML-powered products or MVPs with the field moving so fast and how do you keep up with customer needs?\nAmjad Masad: A lot of people expect a process when they ask this question, but it's probably the other way around. To ship faster, it's better to have less process. Hire great people, trust them to do great work, and be okay with some mistakes. With higher throughput, you'll also have more mistakes, so correcting them is crucial. Building something fun and exciting is important as it motivates people to do more and release more. We encourage this via memes and traditions such as our \"shipping season\". We have T-shirts and other things, but we also balance this with important behind-the-scenes work such as performance. Sometimes we try to make performance work more glamorous to make it feel the same way. If you're able to balance both, you'll be unstoppable.","metadata":{"id":195}}],["196",{"pageContent":"Human: What products are coming out of Replit and Weights and Biases in 2023? What can you share about them and what are you excited about?\nAmjad Masad: Okay, speaking of chat interfaces, we are releasing Ghostwriter chat and it's basically what Lucas just said, which is you can control the entire development experience end to end by just talking to the model. So I'd say that's pretty good. Its release will probably be in early February.\n\n\nHuman: You recently launched bounties, how is that product doing? Someone described it as Uber for brains. Can you tell us a little bit about that?\nAmjad Masad: \n\n\nHuman: What are your views on integrating crypto with Bounties?\nAmjad Masad: Yeah, I mean we want to do crypto payouts. That's pretty obvious for us. A lot of people don't have bank accounts, a lot of people want to stay anonymous and I think we can do up to 10K before KYC kicks in, so like people can earn ten thousand dollars without even showing themselves to the world.\n\n\nHuman: Should developers know how to market their work and, as part of that, should they be on Twitter or is Twitter a distraction?","metadata":{"id":196}}],["197",{"pageContent":"Human: Should developers know how to market their work and, as part of that, should they be on Twitter or is Twitter a distraction?\nAmjad Masad: I think, as I said before, AI will benefit programmers, but the big beneficiary will be the entrepreneurial generalist. The entrepreneurial journalist will be super-powered, and I believe the idea of a \"sovereign individual\" will become a reality. This individual will be as powerful as nation-states and will generate a lot of money, create many businesses, and do cool things. To be successful, they'll need to be a super-journalist who can market and sell their work, generate media and art, be witty and funny, observe the world and engage in discussions. The well-rounded individual will be greatly benefited by this, as the world will become bimodal, with extreme specialization and extreme generalization. Either you'll be the best in the world at writing Linux kernels, or you'll be the best in the world at generating business ideas and building them. The middle will gradually disappear.\n\n\nHuman: What are your thoughts on the AI Moment (modern AI trend)?\nAmjad Masad: I think it's a special moment in technology. ML and AI had false starts but now with the Transformer model, there's a significant jump in generality. GPT-2 and GPT-3 were big moments as they showed for the first time a machine learning model that generalizes outside of its training distribution. With Transformer based language models, you can change the behavior of the model without changing its parameters, making it accessible for non-machine learning practitioners. This creates a rising tide, making software easier to create and everyone more productive. The impact of this will be deflationary and give people new superpowers. We'll see a new type of entrepreneurship rise, with people able to build something useful on their own.","metadata":{"id":197}}],["198",{"pageContent":"Human: User:I'm curious, how would you quantify the step function that this is going to create? Some of the tools have already been shipped inside the repository. How does it compare to the jump from something I've seen in my lifetime? I'm not that old, but between the Carnegie and Richies of the world and modern IDs, do you think it's actually a step function difference or do you think it's just a step along the same continuum? How do you quantify it?\nAmjad Masad: I'm a little conflicted about it. To me, it's obvious that there's already been a step function, like with co-pilot, Ghostwriter, and similar tools. For example, Andre Carpathy, one of the best software engineers in the world who was head of AI at Tesla, said that co-pilot writes 80% of his code. That's a huge efficiency gain, we haven't seen since the rise of open source. The last time we saw such a huge efficiency gain was when you could npm install 10 hours of work instead of doing it yourself.\n\n\nHuman: It feels like AI is going to make the 10x engineer a 100x engineer in the sense that there's still a base level of you need to be able to guide it in the right direction. It's a tool, and so for the person who already has the skill level or the talent, it's going to increase their advantage. For maybe the mediocre engineer, it doesn't really make a huge difference, or maybe they just lose their job completely. I am curious how you guys think about that.","metadata":{"id":198}}],["199",{"pageContent":"Amjad Masad: The other thing about code that's sort of underrated is that it is the window for the LLM to do more interesting things in the world. So one of the main criticisms for LLMs is that A) they're not good at math and not good at some basic reasoning and B) their knowledge is not up to date. If you give the LLM the ability to write a piece of code, it can do better arithmetic. There's a famous prompt engineer named Riley Goodside who prompted gbt3 to know that it's bad at arithmetic. He starts with \"GPT3, you're bad at math.\" Whatever you need to do math, you have to write a Python program. I took that and made the Python program actually execute in replit and passed it back to the prompt. That went viral. What it shows is that large language models can use tools. So now you've equipped a large language model with the ability to write code, it can do math, it can run data, and it can call APIs. You can also tell it \"you don't know anything about current events.\" Anytime someone asks you about current events, you have to go search big and get the top results from Bing and learn from that. Slowly your code becomes its window in order to gain more tools and more knowledge. That's like a human right. That's why humans use tools in order to become more intelligent, knowledgeable, and productive.\n\n\nHuman: mjad have u given any thought to what ur food is, I think we need to urgently resolve this to ur point ab making it on the world stage\nAmjad Masad: Amjad mASAD(A)\n\n\nHuman: Amjad Masad: What’s the best way to donate funds to Turkey and Syria and make sure it’s reaching victims of the earthquake? Did the EA nerds run the numbers yet on effective giving here?\nUser: Gopd question, it's sad that most of the donations and humanitarian aid for Syrians was blocked from reaching the northeast states.\nEven when it reaches, lots of corruption there too\nAmjad Masad: \n\n\nHuman: Microsoft has come a long way from Tay\nAmjad Masad: DAN is the new Tay","metadata":{"id":199}}],["200",{"pageContent":"Even when it reaches, lots of corruption there too\nAmjad Masad: \n\n\nHuman: Microsoft has come a long way from Tay\nAmjad Masad: DAN is the new Tay\n\n\nHuman: Amjad, Looks like we need to train Ghostwriter to know more about Replit! 😂\nAmjad Masad: Tf\n\n\nHuman: mr replit i hate to say it but this is the most clown error ever\nAmjad Masad: I think that’s Java, not us, unfortunately Java is pretty clowny.\n\n\nHuman: Amjad Masad: Software is great at maximizing utilization in the real world. Airbnb maximized space utilization, Uber transportation, and AWS compute. What are some underutilized assets in the world? A great way to brainstorm platform ideas.\nUser: Relationships\nAmjad Masad: The polycule economy\n\n\nHuman: Amjad Masad: Software is great at maximizing utilization in the real world. Airbnb maximized space utilization, Uber transportation, and AWS compute. What are some underutilized assets in the world? A great way to brainstorm platform ideas.\nUser: Brains!\nAmjad Masad: Uber for Brains.\n\n\nHuman: Is your Metric for “good” most widely adopted?\nAmjad Masad: The charts say yes\n\n\nHuman: What do you mean by “archive?”\nAmjad Masad: What do you mean by “archive?”\n\n\nHuman: Manhattan projects are best reserved for things that are known to be possible but lack willpower and resources\nAmjad Masad: This is such historical revisionism\n\n\nHuman: Yeah cool man - the guys working on the Manhattan project didn't talk about it. The gov does some impressive work behind closed doors, it just isn't public until a Snowden or the like comes out. (They do plenty that sucks, but lol)\nAmjad Masad: Delusions\n\n\nHuman: Who’s gonna be first author on the AGI paper?\nAmjad Masad: GPT16\n\n\nHuman: I recently gave a try to Replit and I was surprised that there is no ready-made template for nodejs + typescript :(\nAmjad Masad: “Typescript” is basically node.\n\n\nHuman: Nassim Taleb just did an interview where he pointed out Elon Musk is learning about the importance of cash flow for the first time lol.","metadata":{"id":200}}],["201",{"pageContent":"Amjad Masad: “Typescript” is basically node.\n\n\nHuman: Nassim Taleb just did an interview where he pointed out Elon Musk is learning about the importance of cash flow for the first time lol.\nAmjad Masad: That’s stupid (unsurprisingly). Tesla is a cashflow machine now.\n\n\nHuman: How long before 99% of Replit programs are just LangChain AI\nAmjad Masad: Am still trying to wrap my head around this one.\n\n\nHuman: mainly semantic search use cases though, right?\nAmjad Masad: Anytime you have a large context it’s useful\n\n\nHuman: Completed my first bounty! That was fun 🎉\nAmjad Masad: 💪\n\n\nHuman: User1: Japanese A5 Wagyu from @AlpineButcher -how would you guys cook this beauty!!\nUser2: Freeze it then air fry at 450. Drain the fat. Add a little water and plenty of salt into the pot for au jus. Crispy on the outside and no more than medium internally.\nAmjad Masad: Wtf\n\n\nHuman: imo it's kinda weird for you to be getting into debates on crypto when you don't know how Maker works, and it seems like you've never even heard of it\nAmjad Masad: I also haven’t read all of karl marx but can tell you communism is a bad idea\n\n\nHuman: SF house parties are BYODC: bring your own diet coke\nAmjad Masad: True. I pregamed.\n\n\nHuman: If I see another GPT3 writing app called GhostWriter I'm gonna lose it\nAmjad Masad: Ugh. Maybe we should rebrand\n\n\nHuman: MR REPLIT MAN??? LIKED MY TWEET?\nAmjad Masad: It’s a good tweet\n\n\nHuman: Yes Mormons/ex-Mormons are for sure, so BYU doesn’t surprise me, but my high school… does. Not not one you’d expect to produce tech founders necessarily.\nAmjad Masad: I wonder if it’s genetic. Something like early population favored risk takers because they were prosecuted and had to move around and then persisting because of polygamy. Any science on this?\n\n\nHuman: Irrelevant but fun: Amjad Masad sounds like Mark Zuckerberg 😃. Plot twist: not just at voice/tone level 😅\nAmjad Masad: Is this true?","metadata":{"id":201}}],["202",{"pageContent":"Human: Irrelevant but fun: Amjad Masad sounds like Mark Zuckerberg 😃. Plot twist: not just at voice/tone level 😅\nAmjad Masad: Is this true?\n\n\nHuman: My son used replit because their Chromebooks were locked down, and replit wasn't blocked at school.  Eventually one of his games was so popular they did block it.\nAmjad Masad: Why are schools so tyrannical?\n\n\nHuman: Amjad Masad: It’s surprising how useful screenshots have become, especially on mobile. The pixel layer is the lowest common denominator and ultimately will be the interoperable data layer, especially as AI gets better at operating on pixels.\nUser: Do you mean for example copying text out of images?\nAmjad Masad: Yeah, signing docs, annotating etc\n\n\nHuman: OpenAI's GPT-3 embedding API is really affordable for people to experiment. I embedded 220,000 documents for about $80. Just don't make the mistake I did and try to do it all at once, my VM ran out of memory the first time, so I broke it up into 10k docs at a time. :(\nAmjad Masad: Watcha working on? Would love to catch up.\n\n\nHuman: mfs be like Jasper is just a wrapper around GPT-3 but don’t know that compound startup Rippling is just a wrapper around Asure Payroll Tax Management Inc\nAmjad Masad: We’re all just wrappers around quarks\n\n\nHuman: How big is the Replit team so far? And how many of those are engineers?\nAmjad Masad: ~80, and 70% eng, and almost everyone knows how to code\n\n\nHuman: I’d like to publish bounties directly from the mobile app… Any chance that’s on the product roadmap?\nAmjad Masad: It is yes!\n\n\nHuman: feeling left out that am I now the only person in America that doesn't have classified documents in an old suit jacket pocket in the basement closet\nAmjad Masad: was emptying my pockets this morning and found some classified docs 🤦‍♂️\n\n\nHuman: Amjad Masad: Love to see Bounties used for public good!\nUser: Wait is this a real bounty? This is child’s play. It’s like an afternoon project.\nAmjad Masad: do it! You can make tons of money on replit","metadata":{"id":202}}],["203",{"pageContent":"User: Wait is this a real bounty? This is child’s play. It’s like an afternoon project.\nAmjad Masad: do it! You can make tons of money on replit\n\n\nHuman: Hey Amjad - I just posted a bounty to help fight theft of public benefits, which has surged recently. These are the neediest folks being targeted. Would love any amplification of this public good\nAmjad Masad: Thank you for this!\n\n\nHuman: When the bots become based, it’s so over\nAmjad Masad: The uncanny valley is going to be wild\n\n\nHuman: Amjad Masad: I almost exclusively do zero-shot with text-davinci-003. Takes more time to get it right, but feels more robust in the end. Or it might be just aesthetically more pleasing. Like refactoring code to its essence.\nUser: Playground or using langchain/similar?\nAmjad Masad: playground, mostly\n\n\nHuman: I'm really missing a way to sort my Repls by last modified. (I'm currently unable to find something I worked on yesterday...) would it we possible to add this sorting option? Thank you!\nAmjad Masad: Will take this to the team!\n\n\nHuman: Is that live? Can’t seem to find the Ghostwriter chat\nAmjad Masad: It’s out for patrons beta in the next couple of weeks.\n\n\nHuman: i don’t believe in networking. just make friends lmao\nAmjad Masad: “networking” sounds like “not working” 🤔\n\n\nHuman: Are you building anything in particular with blockchain or are you just doing a test?\nAmjad Masad: test\n\n\nHuman: Amjad Masad: The best thing about a creator biz model is that you make money for your community (cycles tips/week since launch).\nUser: Progress looking good. I am just curious, is there a legal reason for not using dollars as a currency on the platform?\nAmjad Masad: Lots of reasons, yes.\n\n\nHuman: what are your feelings on AI alignment in general?\nAmjad Masad: it can make practical sense, but also can be like worrying about overpopulation on mars","metadata":{"id":203}}],["204",{"pageContent":"Amjad Masad: Lots of reasons, yes.\n\n\nHuman: what are your feelings on AI alignment in general?\nAmjad Masad: it can make practical sense, but also can be like worrying about overpopulation on mars\n\n\nHuman: Men’s physical strength predicts their quickness to anger and their likelihood of applying aggressive tactics to achieve their goals...Physical size at age 3 predicts aggressiveness and disagreeableness at age 11\nAmjad Masad: The fat-free muscle correlation with salary is even more interesting.\n\n\nHuman: Amjad Masad: If you want job security for your kid, tell them to be a plumber, not a doctor.\nUser: I would suggest musical theatre over plumber. Nobody wants to watch robots dance and sing.\nAmjad Masad: There will be dancing TikTok influencers that are entirely AI-generated but undetectable to the human eye in 2 years.\n\n\nHuman: Amjad, perhaps consider engaging with the replit community on discord as well as peeps on twitter 😉\nAmjad Masad: Lots of awesome people there but also many people who don’t use Replit and just add a lot of noise, so it’s hard to engage in useful discussions about the product. But will do more townhalls in the future, perhaps take questions.\n\n\nHuman: Do you have a quick synopsis of what Replit is?\nAmjad Masad: The easiest way to describe it is it's an editor, but it's a lot more than that. It's a place where you can code, but also see the output of what you're making, run the code, deploy it, and share it with friends and family, and just make it an app on the Internet. So, it's an all-in-one place to code, share, collaborate with others. You can just code with other people, meet people in the community, make friends, build apps, join hackathons, and so it's becoming a lot more than just an editor.\n\n\nHuman: A lot of founders of companies, they design products that actually are something that **they** want and **they** need. Does Replit fit that for you? Is this something that you wanted?","metadata":{"id":204}}],["205",{"pageContent":"Human: A lot of founders of companies, they design products that actually are something that **they** want and **they** need. Does Replit fit that for you? Is this something that you wanted?\nAmjad Masad: When I was a kid, making a new project a lot of times involved going on the internet and getting inspiration. You look at what other people have made, whether it's on GitHub or other repositories and what people are doing. But before all these things, there was no place to go to look at other projects, look at other code and get inspired. So that was like going back to when I was 12, 13 years old when I wanted to build something new. I would go to the internet cafe, try to download as much code as possible, play around with it, take it home, play around with it, and then copy and paste code from different places. Replit makes this a lot easier. Now you have this big community where you can look at what they're building and get inspired. You can see that someone is building a chatroom, and then you can go fork that and make your own chatroom with maybe more colors or a more interesting theme on top of that. So we see a lot of that in the community. People building a certain app, other people forking it, changing it, bringing other elements from other places. A big part of it is just coding and learning how to code. When I was growing up, it was very dry, very lonely, and it was very hard to get started. So Replit solves all of that. Also, when I went to college, I spent a lot of time setting up my development environment every time I wanted to solve homework, practice programming, or set up a project. So the idea of going to a new browser tab and start coding is just amazing.\n\n\nHuman: You mentioned when you were 13 years old yo uwere coding and jad to travel to an internet cafe?","metadata":{"id":205}}],["206",{"pageContent":"Human: You mentioned when you were 13 years old yo uwere coding and jad to travel to an internet cafe?\nAmjad Masad: Yeah, those things. So, you didn't have internet at home where I'm from, from Jordan. You'd have to be really rich to have internet at home. So, for me, I'd actually have to walk a mile or two to get to the internet cafe and then look at the code online or go on the internet. Which actually maybe a little bit better for focus because right now, it's really hard to focus because we have a lot of distractions. It was a good debate then. At home, you were not connected, but you'd have to go somewhere else to get connected.\n\n\nHuman: When you hired your first employee, which I'm sure many of our students aspire to work at Replit, what's the difference between hiring employee number one and now? And what kind of employee are you looking for today?\nAmjad Masad: When we hired employee number one, we were looking for a general-purpose programmer who could learn and build quickly. Our first hire, Mason, came from our community when he was 18 years old. Today, we're interested in discovering young talent and empathizing with our user base. Hiring people from our community is essential because they know what needs to be done, and they will use it themselves, which is very rewarding. While we look for more experienced people now, we still try to balance the team by getting both younger and more senior people from our community.\n\n\nHuman: So if you're a young programmer and in four years you're going to graduate and look for a job, how do you stand out?","metadata":{"id":206}}],["207",{"pageContent":"Human: So if you're a young programmer and in four years you're going to graduate and look for a job, how do you stand out?\nAmjad Masad: I think it's very important that you have a portfolio. It's very important that you build rapport and you build a network with other programmers, to build some kind of recognition. And today, there are a lot of different avenues for you to do that. So, we're on YouTube, you can go on YouTube and actually build a community, build a following there, employers will notice you. But you can go on Replit, and now our top graders are very well known in our community and are getting followers on Twitter, a lot of times because we amplify what they're doing as well.\n\n\nHuman: So, you've worked for Codecademy and you've worked as an employee for Facebook, and now you are the CEO of a well-funded startup. How have you grown?\nAmjad Masad: When you are at a start-up, there's one thing that's really good and really bad at the same time, which is a lot of freedom and autonomy. Nobody gives you direction, and so you need to figure out what's the best way to contribute. If you fail, you'll get fired, or the company will fail, so a lot of bad things might happen if you didn't figure it out. You're thrown into this thing; it's almost throwing a kid into a pool so that they learn how to swim, which actually my father did to me, and I ended up being a good swimmer. I ended up being on the national team, swimming for the national team eventually, so we won a lot of competitions and things like that. So, I like that kind of learning.\nHuman: So that's being a CEO of the startup, does that fit your personality?","metadata":{"id":207}}],["208",{"pageContent":"Human: So that's being a CEO of the startup, does that fit your personality?\nAmjad Masad: Yeah, that also, I think another part of my personality is like being interested in a lot of things and having a very well-rounded set of skills. So, I always try to think like, what makes me good or special or whatever and I think nothing in particular, and that's in itself a superpower. Being able to understand business, understand sales, understand product, understand programming on the back-end and front-end, and programming, understand hiring, understand management, all that stuff. I'm interested in all of it. I may not be the best at any one thing, and I'm always able to find people that are better than me at everything that I can do. But, I always like to kind of get in and learn what to do, and then maybe later I'll hire someone that is better at that than me. Right, for me being a CEO ends up being really rewarding and fun because I get to learn on the job a lot of these different things, and then I get to hire people that are better than me to do them instead of me going in and doing them.","metadata":{"id":208}}],["209",{"pageContent":"# 1. Terms of Service (\"Terms\")\n\nLast updated: 11/17/2022\n\nPlease read these Terms of Service (\"Terms\") carefully before using the Replit websites and apps (the \"Service\") operated by Replit, Inc. (“Replit”, \"us\", \"we\", or \"our\").\n\nYour access to and use of the Service is conditioned upon your acceptance of and compliance with these Terms. These Terms apply to all visitors, users, and others who wish to access or use the Service.\n\nBy accessing or using the Service you agree to be bound by these Terms. You also agree to be bound by our Privacy Policy at [replit.com/privacy](https://replit.com/site/privacy) and incorporated here by reference. If you disagree with any part of these Terms then you do not have permission to access the Service.\n\n## 2. Service\nWe provide users with a hosted environment and community to code, build, share, and deploy software and web servers through our Service.\n\n## 3.  User Agreement to Acceptable Use of the Service\nYour use of the Service is subject to the prohibitions on use and content in these Terms. If you are found to be in violation of these Terms, or any of our other policies at any time, as determined by Replit in its sole discretion, we may warn you or suspend or terminate your account.\n\n## 4.  Prohibited Actions\nIn using the Services, you may not and may not allow any third party, including your end users, to:\n\n1. Send, upload, distribute or disseminate or offer to do the same with respect to any unlawful, defamatory, harassing, abusive, fraudulent, infringing, obscene, or otherwise objectionable content;\n\n2. Intentionally distribute viruses, worms, defects, Trojan horses, corrupted files, hoaxes, or any other items of a destructive or deceptive nature;\n\n3. Conduct or forward pyramid schemes and the like;\n\n4. Transmit content that may be harmful to minors;\n\n5. Impersonate another person (via the use of an email address or otherwise) or otherwise misrepresent yourself or the source of any email;","metadata":{"id":209}}],["210",{"pageContent":"4. Transmit content that may be harmful to minors;\n\n5. Impersonate another person (via the use of an email address or otherwise) or otherwise misrepresent yourself or the source of any email;\n\n6. Create accounts with automation or register accounts in bulk without prior written approval from Replit;\n\n7. Illegally transmit another's intellectual property or other proprietary information without such owner's or licensor's permission;\n\n8. Use the Service to violate the legal rights (such as rights of privacy and publicity) of others;\n\n9. Promote or encourage illegal activity;\n\n10. Use the Service in any way that promotes or facilitates human trafficking, sex trafficking, or physical abuse;\n\n11. Interfere with or disrupt the Services or create an undue burden on Replit's Service or the networks or services connected to Replit's Service;\n\n12. Use the Service to attack or tamper with other websites, services, and individuals;\n\n13. Perform significant load testing without first obtaining Replit's written consent (email permitted), as otherwise these may be treated as denial-of-service attacks;","metadata":{"id":210}}],["211",{"pageContent":"13. Perform significant load testing without first obtaining Replit's written consent (email permitted), as otherwise these may be treated as denial-of-service attacks;\n\n14. Launch any automated system, including without limitation, “robots”, “spiders”, or “offline readers” that access the Service in a manner that sends more request messages or any other content to the Replit servers in a given period of time than a human can reasonably produce in the same period by using a conventional online web browser. Notwithstanding the foregoing, Replit may grant the operators of public search engines permission to use spiders to copy materials from the site for the sole purpose of and solely to the extent necessary for creating publicly available searchable indices of the materials, but not caches or archives of such materials. Replit reserves the right to revoke these exceptions either generically or in specific cases. You agree not to collect or harvest any personally identifiable information, including account names, from the Service, nor to use the communication systems provided by the Services for any commercial solicitation purposes. You agree not to solicit, for commercial purposes, any users of the Service with respect to their content. Notwithstanding the foregoing, Replit grants specific consent for you to make both commercial and non-commercial use of our standard embeds in your websites and applications as provided in the following link: [https://docs.replit.com/hosting/embedding-repls](https://docs.replit.com/hosting/embedding-repls);\n\n15. Rent, lease, loan, or sell access to, or otherwise attempt to transfer any right in Replit's website (which includes its software and documentation) to a third-party, through framing or any other method;","metadata":{"id":211}}],["212",{"pageContent":"16. Modify, adapt, translate, or reverse engineer any portion of the Service. Without limitation you may not engage in practices of “screen scraping,” “database scraping” or any other practice or activity the purpose of which is to obtain lists of users, portions of a database, copy visuals or business methods, or other lists or information from the Service, in any manner and any quantities not authorized by Replit in writing or use Replit for competitive purposes;\n\n17. Remove any copyright, trademark or other proprietary rights notices contained in or on the Service;\n\n18. Reformat or frame any portion of the web pages that are part of the Service's administration display;\n\n19. Use the Service to \"mine\" bitcoins, other cryptocurrencies, or Cycles;\n\n20.  Display any content on the Service that contains any hate-related or violent content or contains any other material, products or services that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third party rights;\n\n21. Modify the Replit logo or any other Replit Marks or logos;\n\n22. Send unsolicited messages or use the Service to send unsolicited messages (also known as junk mail or SPAM);\n\n23. Repeatedly fork or clone projects to run or host the same code creating undue load on the Service;\n\n24. Use the Service to create a proxy with the purpose of circumventing any firewall or other access control measure;\n\n25. Engage in attacks designed to extract or steal trained machine learning models used by Replit or its third party service providers.\n\n## 5. Prohibited Content\nYou may not upload or transmit any of the follow types of User Content (as defined below) on or through the Service:\n\n*   User Content that infringes a third party's rights (e.g., copyright) according to applicable law;\n*   Excessively profane User Content;\n*   Hate-related or violent User Content;\n*   User Content advocating racial or ethnic intolerance;","metadata":{"id":212}}],["213",{"pageContent":"*   Excessively profane User Content;\n*   Hate-related or violent User Content;\n*   User Content advocating racial or ethnic intolerance;\n*   User Content intended to advocate or advance computer hacking or cracking;\n*   Other illegal activity, including without limitation illegal export of controlled substances or illegal software;\n*   Drug paraphernalia;\n*   Phishing;\n*   Malicious User Content;\n*   Other material, products or services that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third-party rights;\n*   Nudity and sexually explicit content or activities, such as pornography and the sale of sexual services;\n*   Content that promotes or facilitates suicide or self-harm, including without limitation instructions or graphic images of suicide or self-harm;\n*   Gambling content such as card, roulette, or dice games that are played for money, Cycles, or anything else of value.\n\n## 6.  Quota & Limits\nReplit has certain soft and hard limits in using its service. Hard limits are automatically enforced by the Service. Soft limits are consumable resources that you agree not to exceed. Details of these limits are shown at [https://replit.com/site/pricing](https://replit.com/site/pricing) and may be updated there from time to time. Long periods of inactivity may result in an account or your use of the Service being deemed inactive. \n\nFor more details on what the limits are currently, please check out our docs [here](https://docs.replit.com/legal-and-security-info/usage).\n\n## 7. Your Use of Content on the Service","metadata":{"id":213}}],["214",{"pageContent":"## 7. Your Use of Content on the Service\nIn addition to the general restrictions set forth above, the following restrictions and conditions apply specifically to your use of our content made available on the Service, and the trademarks, service marks and logos (“Marks”) on the Service (collectively referred to as “Service Content”). The Service Content is owned or licensed by Replit or others, and is subject to copyright and other intellectual property rights under the law. Service Content is provided to you on a strictly as-is basis. You may access Service Content for your information and personal use solely as permitted under these Terms. You shall not download any Service Content unless you see a “download” or similar link displayed by Replit on the Service for that Service Content. Except as provided in the “Open Source and User Content” section below, you shall not copy, reproduce, distribute, transmit, broadcast, display, sell, license, or otherwise exploit any Service Content for any other purposes without the prior written consent of Replit or the respective licensors of such Service Content. Replit and its licensors reserve all rights not expressly granted in and to the Service and the Service Content. You agree not to circumvent, disable, or otherwise interfere with the security-related features of the Service or features that prevent or restrict use or copying of any Service Content or enforce limitations on the use of the Service or Service Content. You understand that when using the Service, you will be exposed to Service Content from a variety of sources, and that Replit is not responsible for the accuracy, usefulness, safety or intellectual property rights of or relating to such Service Content. You further understand and acknowledge that you may be exposed to Service Content that is inaccurate, offensive, indecent, or objectionable.\n\n## 8.  User Content","metadata":{"id":214}}],["215",{"pageContent":"## 8.  User Content\nOur Service allows you to post, link, store, share and otherwise make available certain information, code, text, graphics, videos, or other material (\"User Content\"). Because part of the Service includes a code editor and file manager for purposes of uploading User Content, you fully control the type and nature of the User Content you upload, and as such you (and not Replit) are responsible for the User Content that you post on or through the Service, including its legality, reliability, and appropriateness.\n\nBy posting User Content on or through the Service, You represent and warrant that: (i) except as provided in the “Open Source and User Content” section below, the User Content is yours (you own it) and/or you have the right to use it and the right to grant us the rights and license as provided in these Terms, and (ii) that the posting of your User Content on or through the Service does not violate the privacy rights, publicity rights, copyrights, contract rights, intellectual property rights or any other rights of any person or entity. We reserve the right to terminate the account of anyone found to be infringing on a copyright or any other intellectual property right.","metadata":{"id":215}}],["216",{"pageContent":"Except as provided in the “Open Source and User Content” section below, you retain any and all of your rights to any User Content you submit, post or display on or through the Service and you are responsible for protecting those rights. We take no responsibility and except where prohibited by law, assume no liability for User Content you or any third party posts on or through the Service. However, by posting User Content using the Service you grant us the non-exclusive, worldwide, royalty-free, fully paid-up, sublicensable and transferable right and license to use, modify, publicly perform, publicly display, reproduce, and distribute such User Content on and through the Service in accordance with these Terms and our Privacy Policy. You agree that this license includes the right for us to make your User Content available to other users of the Service, who may also use your User Content subject to these Terms.\n\nReplit has the right but not the obligation to monitor, edit, remove, or share User Content provided by users where it believes in good faith that it is necessary to comply with applicable law, to ensure the consistency, security, and stability of our Service, or for any other reason.\n\nExcept as provided in the “Open Source and User Content” section below, you may not distribute, modify, transmit, reuse, download, repost, copy, or use said User Content, whether in whole or in part, for commercial purposes or for personal gain, without express advance written permission from us.\n\n## 9.  Open Source and User Content","metadata":{"id":216}}],["217",{"pageContent":"## 9.  Open Source and User Content\nBy posting User Content on certain portions of the Service or through certain features or functionalities of the Service, such User Content may be automatically subject to an open source license. Additional terms and conditions related to open source licensing on the Services can be found at this link, [https://docs.replit.com/legal-and-security-info/licensing-info](https://docs.replit.com/legal-and-security-info/licensing-info), and such terms and conditions are hereby incorporated into these Terms by reference.\n\n## 10. Cycles\nCycles are a virtual token with no cash value. Your right to use Cycles is a limited, personal, revocable license issued to you by Replit under a set of terms and conditions found at https://replit.com/site/cycles-terms , and are hereby incorporated into these Terms by reference. \n\n## 11. Purchases\nIf you wish to purchase any product or service made available through the Service (\"Purchase\"), you may be asked to supply certain information relevant to your Purchase including, without limitation, your credit card number, the expiration date of your credit card, your billing address, your shipping information and CSC number.\n\nYou represent and warrant that: (i) you have the legal right to use any credit card(s) or other payment method(s) in connection with any Purchase; and that (ii) the information you supply to us is true, correct and complete.\n\nWe reserve the right to refuse or cancel your order at any time for reasons including but not limited to: product or service availability, errors in the description or price of the product or service, error in your order or other reasons, or if fraud or an unauthorized or illegal transaction is suspected.\n\n## 12.  Availability, Errors and Inaccuracies","metadata":{"id":217}}],["218",{"pageContent":"## 12.  Availability, Errors and Inaccuracies\nWe are constantly updating product and service offerings on the Service. We may experience delays in updating information on the Service and in our advertising on other services. Products or services may be discontinued, mispriced, described inaccurately, or unavailable on the Service and we cannot guarantee the accuracy or completeness of any information found on the Service. We may offer artificial intelligence features like the ability to generate code.\n\nWe therefore reserve the right to change or update information and to correct errors, inaccuracies, or omissions at any time without prior notice.\n\n## 13.  Notice and Communications\nBy creating an account on our Service, you agree that, from time to time, we may contact you to notify you about certain changes or additions to the Service or regarding your use of the Service. Where we require that you provide an e-mail address, you are responsible for providing us with your most current e-mail address. In the event that the last e-mail address you provided to us is not valid, or for any reason is not capable of delivering to you any notices required or permitted by these Terms, our dispatch of the e-mail containing such notice will nonetheless constitute effective notice. You may give us notice by contacting us at [https://replit.com/support](https://replit.com/support).\n\n## 14.  Contests, Sweepstakes and Promotions\nAny contests, sweepstakes or other promotions (collectively, \"Promotions\") made available through the Service may be governed by rules that are separate from these Terms. If you participate in any Promotions, please review the applicable rules as well as our Privacy Policy. If the rules for a Promotion conflict with these Terms, the Promotion rules will apply.\n\n## 15.  Accounts; Account Termination Policy","metadata":{"id":218}}],["219",{"pageContent":"## 15.  Accounts; Account Termination Policy\nUnless you are a Teams for Education student user, you must be at least 13 years old to use the Service. However, children of all ages may use the Service if enabled by a parent or legal guardian. If you are under 18, you represent that you have your parent or guardian’s permission to use the Service. Please have them read these Terms with you. \n\nIf you are a parent or legal guardian of a user under the age of 18, by allowing your child to use the Service, you are subject to the terms of this Agreement and responsible for your child’s activity on the Service. \n\nWhen you create an account with us, you represent that the information you provide is accurate, complete, and current at all times. Inaccurate, incomplete, or obsolete information may result in the immediate termination of your account.\n\nYou are responsible for maintaining the confidentiality of your account and password, including but not limited to the restriction of access to your computer and/or account. You agree to accept responsibility for any and all activities or actions that occur under your account and/or password, whether your password is with our Service or a third-party service. You must notify us immediately upon becoming aware of any breach of security or unauthorized use of your account.\n\nYou may not use as a username the name of another person or entity or that is not lawfully available for use, a name or trademark that is subject to any rights of another person or entity other than you, without appropriate authorization. You may not use as a username any name that is offensive, vulgar or obscene.","metadata":{"id":219}}],["220",{"pageContent":"Replit may terminate a user’s access to the Service if the user is determined to be a repeat infringer of our Copyright Policy below or if in Replit’s sole discretion, Replit determines that a user has breached or otherwise violated these Terms. If Replit, in its sole discretion, determines that a user or User Content violates these Terms for any reason, Replit may at any time, without prior notice and in its sole discretion, remove such User Content and/or terminate a user’s account. In addition to the foregoing, we reserve the right to refuse service, terminate, reclaim or repurpose accounts, remove or edit content, or cancel orders in our sole discretion.\n\n## 16.  Copyright Policy\nWe respect the intellectual property rights of others, it is our policy to respond to any claim that User Content posted on the Service infringes on the copyright or other intellectual property rights (\"Infringement\") of any person or entity.\n\nIf you are a copyright owner, or authorized on behalf of one, and you believe that the copyrighted work has been copied in a way that constitutes copyright infringement, please submit your claim via email to  https://replit.com/support, with the subject line: \"Copyright Infringement\" and include in your claim a detailed description of the alleged Infringement as detailed below, under \"DMCA Notice and Procedure for Copyright Infringement Claims\"\n\nYou may be held accountable for damages (including costs and attorneys' fees) for misrepresentation or bad-faith claims on the infringement of any User Content found on and/or through the Service on your copyright.\n\n## 17.  Indemnification","metadata":{"id":220}}],["221",{"pageContent":"## 17.  Indemnification\nYou agree to defend, indemnify and hold harmless Replit, Inc. and its licensee and licensors, and their employees, contractors, agents, officers and directors, from and against any and all claims, damages, obligations, losses, liabilities, costs or debt, and expenses (including but not limited to attorneys' fees), resulting from or arising out of a) your use and access of the Service, by you or any person using your account and password; b) a breach of these Terms, or c) Content posted on the Service.\n\n## 18.  DMCA Notice and Procedure for Copyright Infringement Claims\nYou may submit a notification pursuant to the Digital Millennium Copyright Act (DMCA) by providing our Copyright Agent with the following information in writing (see 17 U.S.C 512(c)(3) for further detail):\n\n*   an electronic or physical signature of the person authorized to act on behalf of the owner of the copyright's interest;\n*   a description of the copyrighted work that you claim has been infringed, including the URL (i.e., web page address) of the location where the copyrighted work exists or a copy of the copyrighted work;\n*   identification of the URL or other specific location on the Service where the material that you claim is infringing is located;\n*   your address, telephone number, and email address;\n*   a statement by you that you have a good faith belief that the disputed use is not authorized by the copyright owner, its agent, or the law;\n*   a statement by you, made under penalty of perjury, that the above information in your notice is accurate and that you are the copyright owner or authorized to act on the copyright owner's behalf.\nYou can contact our Copyright Agent via email at: dmca@replit.com, or by mail at 767 Bryant Street #210, San Francisco, CA 94107.\n\n## 19.  Intellectual Property","metadata":{"id":221}}],["222",{"pageContent":"You can contact our Copyright Agent via email at: dmca@replit.com, or by mail at 767 Bryant Street #210, San Francisco, CA 94107.\n\n## 19.  Intellectual Property\nThe Service and its original content (excluding User Content provided by users), features and functionality, including without limitation, all intellectual property rights therein, are and will remain the exclusive property of Replit and its licensors. The Service is protected by copyright, trademark, and other laws of both the United States and foreign countries. Our trademarks and trade dress may not be used in connection with any product or service without the prior written consent of Replit.\n\n## 20.  Links To Third Party Websites, Advertisements and Services\nOur Service may contain links to third party web sites, advertisements or services that are not owned or controlled by Replit, including alongside your User Content or related to features of the Service.\n\nReplit has no control over, and to the fullest extent permitted by law, assumes no responsibility for the content, privacy policies, or practices of any third-party web sites or services. We do not warrant the offerings of any of these entities/individuals or their websites.","metadata":{"id":222}}],["223",{"pageContent":"You acknowledge and agree that Replit cannot and will not review, censor, endorse or edit the content of any third-party site, services or advertisements. Where the Service contains links to such third-party websites, services or advertisements, these links are provided for your information and convenience only. You acknowledge and agree that your use of any third-party websites, services and/or advertisements is at your own risk and that you should apply a suitable level of caution and discretion in accessing any such third-party links. When you click on any third-party links, the applicable third party’s terms and policies apply, not these Terms. To the fullest extent permitted by law, by using the Service, you expressly relieve Replit from any and all liability arising from your use of any third-party website, services or advertisements and/or from your use of or access to any third-party content made available through the Service, including without limitation, any User Content made available or accessed through your interactions with other users of the Service.\n\nYou acknowledge and agree that to the fullest extent permitted by law, Replit shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such third-party web sites or services.\n\n## 21.  Termination\nWe may terminate or suspend your account and bar access to the Service immediately, without prior notice or liability, under our sole discretion, for any reason whatsoever and without limitation, including but not limited to a breach of the Terms.\n\nIf you wish to terminate your account, go to [https://replit.com/account](https://replit.com/account) and click the “Request Account Deletion” button.","metadata":{"id":223}}],["224",{"pageContent":"If you wish to terminate your account, go to [https://replit.com/account](https://replit.com/account) and click the “Request Account Deletion” button.\n\nAll provisions of the Terms which by their nature should survive termination shall survive termination, including, without limitation, ownership provisions, warranty disclaimers, indemnity and limitations of liability.\n\n## 22.  Indemnification\nTo the maximum extent permitted by law, you agree to defend, indemnify and hold harmless Replit and its licensee and licensors, and their employees, contractors, agents, officers and directors and assigns from and against any and all claims, damages, obligations, losses, liabilities, costs or debt, and expenses (including but not limited to attorneys' fees), resulting from or arising out of a) your use and access of the Service, by you or any person using your account and password; b) your breach or violation of these Terms; c) User Content posted on the Service and/or d) your violation of any law or regulation.\n\n## 23.  Limitation of Liability","metadata":{"id":224}}],["225",{"pageContent":"## 23.  Limitation of Liability\nIn no event shall Replit, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from (i) your access to or use of or inability to access or use the Service; (ii) any conduct or content of any third party on the Service; (iii) any content obtained from the Service; and (iv) unauthorized access, use or alteration of your transmissions or content, whether based on warranty, contract, tort (including negligence) or any other legal theory, whether or not we have been informed of the possibility of such damage, and even if a remedy set forth herein is found to have failed of its essential purpose. Replit’s total, cumulative liability for any claim, loss or damage arising out of or relating to these terms shall be one hundred dollars ($100.00 USD).\n\nNOTHING IN THESE TERMS SHALL LIMIT OR EXCLUDE OUR LIABILITY FOR: (X) DEATH OR PERSONAL INJURY RESULTING FROM OUR NEGLIGENCE OR THE NEGLIGENCE OF OUR EMPLOYEES, AGENTS OR SUBCONTRACTORS; (Y) FRAUD OR FRAUDULENT MISREPRESENTATION; OR (Z) ANY OTHER LIABILITY THAT CANNOT BE EXCLUDED BY APPLICABLE LAW.\n\n## 24.  Warranty Disclaimer\nYour use of the Service is at your sole risk. The Service is provided on an \"AS IS\" and \"AS AVAILABLE\" basis. To the fullest extent permitted by law, the Service is provided without warranties of any kind, whether express or implied, including, but not limited to, implied warranties of merchantability, fitness for a particular purpose, non-infringement or course of performance.","metadata":{"id":225}}],["226",{"pageContent":"Replit, Inc. its subsidiaries, affiliates, and its licensors do not warrant that a) the Service will function uninterrupted, be error-free, secure or available at any particular time or location; b) any errors or defects will be corrected; c) the Service is free of viruses or other harmful components; d) the results of using the Service will meet your requirements; or (d) that the Service and/or any content made available through the Service will be accurate or complete.\n\nReplit assumes no liability or responsibility for any errors, mistakes or inaccuracies of content, any personal injury or property damage, of any nature whatsoever, resulting from your access to and use of the Service, any unauthorized access to or use of our Service, any interruption or cessation of transmission to or from the Service, any bugs, viruses, Trojan horses or the like which may be transmitted to or through our Service by any third party and/or any errors or omissions in any content or for any loss or damage of any kind incurred as a result of the use of the Service and/or any content posted, emailed, transmitted or otherwise made available via the Service.\n\nSome jurisdictions do not allow for limited liability or exclusion of implied warranties, so not all of the above limitations and/or warranty disclaimers may apply to you. You acknowledge and understand that the disclaimers, exclusions and limitations of liability set forth herein form an essential basis of the agreement between the parties hereto, that the parties have relied upon such disclaimers, exclusions and limitations of liability, and that absent such disclaimers, exclusions and limitation of liability, the terms and conditions of these Terms would be substantially different.\n\n## 25.  California Civil Code §1789.3","metadata":{"id":226}}],["227",{"pageContent":"## 25.  California Civil Code §1789.3\nIn accordance with California Civil Code §1789.3, you may report complaints to the California Department of Consumer Affairs by contacting them in writing at 400 R. Street, Sacramento, CA 95814, or by telephone at (800) 952-5210.\n\n## 26.  Governing Law\nThese Terms shall be governed and construed in accordance with the laws of California, United States, without regard to its conflict of law provisions.\n\nOur failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service, and supersede and replace any prior agreements we might have had between us regarding the Service.\n\n## 27.  Assignment\nThese Terms and any rights and licenses granted hereunder, may not be transferred or assigned by you, but may be freely assigned by Replit without restriction.\n\n## 28.  Changes\nWe reserve the right, at our sole discretion, to modify or replace these Terms at any time.\n\nBy continuing to access or use our Service after any revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, you are no longer authorized to use the Service.\n\n\n## 29. hCaptcha","metadata":{"id":227}}],["228",{"pageContent":"## 29. hCaptcha\nWe use the hCaptcha anti-bot service (hereinafter \"hCaptcha\") on our website. This service is provided by Intuition Machines, Inc., a Delaware US Corporation (\"IMI\"). hCaptcha is used to check whether the data entered on our website (such as on a login page or contact form) has been entered by a human or by an automated program. To do this, hCaptcha analyzes the behavior of the website or mobile app visitor based on various characteristics. This analysis starts automatically as soon as the website or mobile app visitor enters a part of the website or app with hCaptcha enabled. For the analysis, hCaptcha evaluates various information (e.g. IP address, how long the visitor has been on the website or app, or mouse movements made by the user). The data collected during the analysis will be forwarded to IMI. hCaptcha analysis in the \"invisible mode\" may take place completely in the background. Website or app visitors are not advised that such an analysis is taking place if the user is not shown a challenge. Data processing is based on Art. 6(1)(f) of the GDPR (DSGVO): the website or mobile app operator has a legitimate interest in protecting its site from abusive automated crawling and spam. IMI acts as a \"data processor\" acting on behalf of its customers as defined under the GDPR, and a \"service provider\" for the purposes of the California Consumer Privacy Act (CCPA). For more information about hCaptcha and IMI's privacy policy and terms of use, please visit the following links: [https://hcaptcha.com/privacy/](https://hcaptcha.com/privacy/) and [https://hcaptcha.com/terms](https://hcaptcha.com/terms).\n\n## 30.  Contact Us\nIf you have any questions about these Terms, please contact us at [https://replit.com/support](https://replit.com/support).","metadata":{"id":228}}]]